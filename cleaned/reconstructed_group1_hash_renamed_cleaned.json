[
    {
        "query_id": "q_group_1_id_0",
        "query_text": "The function receives a constant reference to a string as input. It checks whether the input string is equal to one of several predefined representations that denote an infinity value. Specifically, the function determines if the string matches any of the designated patterns (such as those beginning with an optional plus sign followed by \".inf\" in various cases). If a match is found, it returns a boolean true; otherwise, it returns false. The input is of type std::string, and the output is a bool.",
        "code_id": "c_group_1_id_0",
        "code_text": "inline bool Ibbe86d1c39(const std::string& ie1c590c051) {\n  return ie1c590c051 == \".inf\" || ie1c590c051 == \".Inf\" || ie1c590c051 == \".INF\" ||\n         ie1c590c051 == \"+.inf\" || ie1c590c051 == \"+.Inf\" || ie1c590c051 == \"+.INF\";\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_1",
        "query_text": "The function accepts a constant character string as its sole input and immediately returns the integer value 0. It does not perform any operations or checks on the input; instead, the parameter is explicitly cast to void to indicate that it is unused. The input type is a pointer to a constant character, and the output type is an integer.",
        "code_id": "c_group_1_id_1",
        "code_text": "static FT_INLINE int f099d82b8c5(const char *s09b181202d)\n{\n    (void)s09b181202d;\n    return 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_2",
        "query_text": "The function takes a wide character string as input and immediately returns the integer 0. It does not perform any operations on the input string.",
        "code_id": "c_group_1_id_2",
        "code_text": "static FT_INLINE int f1be85ab8a1(const wchar_t *s09b181202d)\n{\n    (void)s09b181202d;\n    return 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_3",
        "query_text": "The function accepts a boolean input and immediately returns that identical boolean value. It performs no additional processing or transformation, effectively serving as a simple pass-through.",
        "code_id": "c_group_1_id_3",
        "code_text": "bool I9d992ac8c9(bool c66968bf8eb) { return c66968bf8eb; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_4",
        "query_text": "This function is intended to write output to the standard error stream. It accepts no input parameters and does not return any value. However, its current implementation features an empty body, so it does not perform any logging or output operations.",
        "code_id": "c_group_1_id_4",
        "code_text": "inline void L56a575fb71() {}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_5",
        "query_text": "This function accepts a file pointer as input and returns the file's size in bytes as an unsigned integer type. It determines the size by repositioning the stream's pointer to the end of the file and then retrieving the current pointer position, which corresponds to the file size.",
        "code_id": "c_group_1_id_5",
        "code_text": "size_t G28fac5a934(FILE* f3d84b1dca1) {\n  fseek(f3d84b1dca1, 0, SEEK_END);\n  return static_cast<size_t>(ftell(f3d84b1dca1));\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_6",
        "query_text": "The function accepts a file pointer (of type FILE*) as input and returns an integer (of type int) that identifies the corresponding file descriptor. This integer is a unique identifier assigned by the operating system to the open file. Implemented as an inline function, it expands directly at the call site for enhanced efficiency.",
        "code_id": "c_group_1_id_6",
        "code_text": "inline int F555ba2345d(FILE* f3d84b1dca1) { return fileno(f3d84b1dca1); }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_7",
        "query_text": "The function accepts an integer representing a file descriptor and determines whether it is associated with a terminal device. It returns a non-zero integer if the file descriptor is connected to a terminal and zero otherwise. The function serves as a lightweight wrapper around an underlying system call that performs this check.",
        "code_id": "c_group_1_id_7",
        "code_text": "inline int I9829028de2(int fa9ba0c17f2) { return isatty(fa9ba0c17f2); }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_8",
        "query_text": "The function takes two input parameters, both of which are pointers to constant characters (C-style strings). It compares the two strings in a case-insensitive manner using an internal library function. If the strings are identical in a case-insensitive comparison, it returns 0; if the first string is lexicographically greater, it returns a positive value; and if it is lexicographically smaller, it returns a negative value. The input parameters are two pointers to constant characters, and the output is an integer representing the comparison result.",
        "code_id": "c_group_1_id_8",
        "code_text": "inline int S0a1a2acfd2(const char* sfc67390108, const char* s793dae3e98) {\n  return strcasecmp(sfc67390108, s793dae3e98);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_9",
        "query_text": "The function takes a constant character pointer as input (representing a C-style null-terminated string) and uses a standard library routine to create a duplicate of that string. It returns a pointer to the newly allocated duplicate, and the caller is responsible for freeing the allocated memory to prevent memory leaks.",
        "code_id": "c_group_1_id_9",
        "code_text": "inline char* S35d7180380(const char* sa425380d12) { return strdup(sa425380d12); }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_10",
        "query_text": "The function accepts a single character string input that specifies a directory path. Its role is to delete the specified directory by calling the underlying system removal operation. After attempting the deletion, it returns an integer where a value of 0 indicates that the directory was removed successfully, while any non-zero value signals an error occurred during the operation.",
        "code_id": "c_group_1_id_10",
        "code_text": "inline int R5ecfeca88e(const char* dbd81f4a980) { return rmdir(dbd81f4a980); }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_11",
        "query_text": "The function accepts a single input, a string (type const char*), representing a directory path. It then passes this string to a system-level operation to update the program's current working directory to the specified location. The function returns an integer that indicates the outcome of this change: 0 signifies a successful update, while a non-zero value indicates an error occurred.",
        "code_id": "c_group_1_id_11",
        "code_text": "inline int C9d2fada358(const char* dbd81f4a980) { return chdir(dbd81f4a980); }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_12",
        "query_text": "This function reopens an existing file stream using a new file path and mode. It takes three parameters: a constant string representing the file path, a constant string defining the mode for opening the file, and a pointer to a file stream. Internally, it utilizes a standard C library call that reassigns the provided stream to the new file specified by the input path and mode. The function returns a pointer to the updated file stream\u2014if the underlying library call fails, it returns a null pointer.",
        "code_id": "c_group_1_id_12",
        "code_text": "inline FILE *Fd88bda3955(const char* p787f0105e5, const char* m4cc5ddf520, FILE* s25aca4d22e) {\n  return freopen(p787f0105e5, m4cc5ddf520, s25aca4d22e);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_13",
        "query_text": "The function takes two inputs: an integer representing a file descriptor and a string indicating the file mode. It returns a pointer to a file stream object, which allows the use of standard file operations on the opened file. Internally, it associates the given file descriptor with a file stream by invoking a system library routine designed for this purpose.",
        "code_id": "c_group_1_id_13",
        "code_text": "inline FILE* Fbab75b0f2c(int fa9ba0c17f2, const char* m4cc5ddf520) { return fdopen(fa9ba0c17f2, m4cc5ddf520); }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_14",
        "query_text": "The function accepts a pointer to a file stream (of type FILE*), and it returns an integer. It closes the file stream by invoking the standard library's function for closing file streams. The returned integer indicates whether the operation was successful (with 0 denoting success and any non-zero value indicating failure).",
        "code_id": "c_group_1_id_14",
        "code_text": "inline int Fa9f72f4983(FILE* ff0c2bf7439) { return fclose(ff0c2bf7439); }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_15",
        "query_text": "The function receives three inputs. The first input is an integer representing a file descriptor. The second input is a pointer to a buffer (of type const void*), and the third input is an unsigned integer that indicates the number of bytes to write. It acts as a wrapper around a system call to write the data from the buffer to the file associated with the file descriptor. The function returns an integer representing the number of bytes successfully written, or -1 if an error occurs.",
        "code_id": "c_group_1_id_15",
        "code_text": "inline int W9324081948(int fa9ba0c17f2, const void* ba69193d982, unsigned int c7955d5f3e7) {\n  return static_cast<int>(write(fa9ba0c17f2, ba69193d982, c7955d5f3e7));\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_16",
        "query_text": "The function accepts an integer representing a file descriptor associated with an open resource and returns an integer indicating the result of the closure operation. It operates as a simple wrapper around the system call that performs the actual closing. A return value of 0 signifies a successful closure, while a return value of -1 indicates a failure.",
        "code_id": "c_group_1_id_16",
        "code_text": "inline int C12fafba0e9(int fa9ba0c17f2) { return close(fa9ba0c17f2); }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_17",
        "query_text": "The function takes an integer input that represents an error code and returns a string describing the associated error. The function internally serves as a wrapper for the standard library function that converts error codes into their corresponding error messages. The input is of type int, and the output is a pointer to a constant character string (const char*).",
        "code_id": "c_group_1_id_17",
        "code_text": "inline const char* S5ca62402db(int e037e9a2e55) { return strerror(e037e9a2e55); }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_18",
        "query_text": "The function takes no input parameters and returns no value (void). It is an inline function that, when called, immediately terminates the program by invoking the standard library routine to abort execution, resulting in abnormal termination.",
        "code_id": "c_group_1_id_18",
        "code_text": "inline void Af2978a16d5() { abort(); }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_19",
        "query_text": "This function converts the content of a string stream into a standard string. It processes each character from the string stream one at a time and checks whether it is a null character. If a null character is detected, it appends the escape sequence \"\\0\" to the output string; all other characters are directly copied. The function also reserves extra capacity in the output string to accommodate the potential increase in size due to the replacement of null characters. The input is a pointer to a string stream, and the output is a standard string containing the transformed content.",
        "code_id": "c_group_1_id_19",
        "code_text": "std::string S09bf88cab2(::std::stringstream* sf898203df3) {\n  const ::std::string& s09b181202d = sf898203df3->str();\n  const char* const sdbce6908ca = s09b181202d.c_str();\n  const char* const ea5fdc4f5a4 = sdbce6908ca + s09b181202d.length();\n\n  std::string rd756af3d75;\n  rd756af3d75.reserve(2 * (ea5fdc4f5a4 - sdbce6908ca));\n  for (const char* c339952909c = sdbce6908ca; c339952909c != ea5fdc4f5a4; ++c339952909c) {\n    if (*c339952909c == '\\0') {\n      rd756af3d75 += \"\\\\0\";  \n    } else {\n      rd756af3d75 += *c339952909c;\n    }\n  }\n\n  return rd756af3d75;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_20",
        "query_text": "The function accepts a C-style string as input. It searches the string for the first occurrence of a comma and returns a std::string containing the characters from the beginning of the string up to, but not including, that comma. If the comma is not found, it returns the entire input string as a std::string. The input is of type const char*, and the output is of type std::string.",
        "code_id": "c_group_1_id_20",
        "code_text": "inline std::string Gfe66d96093(const char* s09b181202d) {\n  const char* c5a92506924 = strchr(s09b181202d, ',');\n  return c5a92506924 == NULL ? s09b181202d : std::string(s09b181202d, c5a92506924);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_21",
        "query_text": "The function takes a boolean input and writes its corresponding string representation (\"true\" or \"false\") to an output stream. It employs a conditional operator to determine the appropriate string based on the input value, and then outputs this string to a stream of type std::ostream. The function does not return any value.",
        "code_id": "c_group_1_id_21",
        "code_text": "inline void Pef641d8a5d(bool xf1fa84c2ec, ::std::ostream* oe5f88bc51f) {\n  *oe5f88bc51f << (xf1fa84c2ec ? \"true\" : \"false\");\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_22",
        "query_text": "The function accepts a single input of type string. It first checks if the string is enclosed in double quotes and, if so, ignores the outermost quotes. The function then examines the string for escaped characters, particularly looking for the sequence representing an escaped newline (a backslash followed by the character 'n'). Each time such an escaped newline is found, the function splits the string at that point. Finally, it returns a vector of strings containing the substrings obtained by splitting the input string, with the escaped newline delimiters removed.",
        "code_id": "c_group_1_id_22",
        "code_text": "std::vector<std::string> Sc4207428b9(const std::string& s09b181202d) {\n  std::vector<std::string> la16fba5c2d;\n  size_t sdbce6908ca = 0, ea5fdc4f5a4 = s09b181202d.size();\n  if (ea5fdc4f5a4 > 2 && s09b181202d[0] == '\"' && s09b181202d[ea5fdc4f5a4 - 1] == '\"') {\n    ++sdbce6908ca;\n    --ea5fdc4f5a4;\n  }\n  bool e69e121fe38 = false;\n  for (size_t i0c6e314cec = sdbce6908ca; i0c6e314cec + 1 < ea5fdc4f5a4; ++i0c6e314cec) {\n    if (e69e121fe38) {\n      e69e121fe38 = false;\n      if (s09b181202d[i0c6e314cec] == 'n') {\n        la16fba5c2d.push_back(s09b181202d.substr(sdbce6908ca, i0c6e314cec - sdbce6908ca - 1));\n        sdbce6908ca = i0c6e314cec + 1;\n      }\n    } else {\n      e69e121fe38 = s09b181202d[i0c6e314cec] == '\\\\';\n    }\n  }\n  la16fba5c2d.push_back(s09b181202d.substr(sdbce6908ca, ea5fdc4f5a4 - sdbce6908ca));\n  return la16fba5c2d;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_23",
        "query_text": "The function receives two inputs, each of type const wchar_t* (wide-character strings). It first checks if either string is NULL and, if so, returns a bool value that is true only when both inputs are NULL. If neither input is NULL, the function uses a standard library routine to determine whether the first string is a substring of the second. It then returns true if the substring is found, and false otherwise.",
        "code_id": "c_group_1_id_23",
        "code_text": "bool I9571fb882b(const wchar_t* nfc8fc3001f, const wchar_t* h70f2740a71) {\n  if (nfc8fc3001f == NULL || h70f2740a71 == NULL)\n    return nfc8fc3001f == h70f2740a71;\n\n  return wcsstr(h70f2740a71, nfc8fc3001f) != NULL;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_24",
        "query_text": "The function takes an input of type int, where the value determines the number of space characters. It then returns a std::string that consists precisely of that many spaces.",
        "code_id": "c_group_1_id_24",
        "code_text": "static inline std::string I3536b3b5cb(int w3f71ca1172) {\n  return std::string(w3f71ca1172, ' ');\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_25",
        "query_text": "The function accepts two inputs: a pointer to a null-terminated constant character array and an integer specifying the maximum number of characters allowed in the output. It processes the string by printing it on a single line to the standard output. During this process, any newline characters found within the string are substituted with the literal characters \"\\\" followed by \"n\". If the count of printed characters reaches the specified maximum length before the entire string is processed, the function stops printing further characters and appends an ellipsis (\"...\") to indicate that the string has been truncated. The function does not produce a return value and its primary role is to output a processed version of the input string directly to the standard output.",
        "code_id": "c_group_1_id_25",
        "code_text": "static void Pe7a680e783(const char* s09b181202d, int m2095ad39fb) {\n  if (s09b181202d != NULL) {\n    for (int i0c6e314cec = 0; *s09b181202d != '\\0'; ++s09b181202d) {\n      if (i0c6e314cec >= m2095ad39fb) {\n        printf(\"...\");\n        break;\n      }\n      if (*s09b181202d == '\\n') {\n        printf(\"\\\\n\");\n        i0c6e314cec += 2;\n      } else {\n        printf(\"%c\", *s09b181202d);\n        ++i0c6e314cec;\n      }\n    }\n  }\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_26",
        "query_text": "The function takes a wide character (wchar_t) as input and returns a boolean value. It checks whether the input character is a printable ASCII character by verifying if its value lies within the range of 0x20 to 0x7E. If the character falls within this range, the function returns true; otherwise, it returns false.",
        "code_id": "c_group_1_id_26",
        "code_text": "inline bool I8343b237e0(wchar_t cdcd5d1f3d2) {\n  return 0x20 <= cdcd5d1f3d2 && cdcd5d1f3d2 <= 0x7E;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_27",
        "query_text": "The function accepts an 8-bit unsigned integer as input and returns a boolean value. It checks if the provided value is between 0x80 and 0xbf (inclusive). If the value satisfies this condition, the function returns true; otherwise, it returns false.",
        "code_id": "c_group_1_id_27",
        "code_text": "bool I7a8efe6ae8(unsigned char t94bb5426dc) { return 0x80 <= t94bb5426dc && t94bb5426dc<= 0xbf; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_28",
        "query_text": "This function takes no input parameters and returns a reference to a stream used for standard output operations. Specifically, the output is an object of type std::ostream that enables printing messages to the console.",
        "code_id": "c_group_1_id_28",
        "code_text": "std::ostream& ccae95734ca() { return std::cout; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_29",
        "query_text": "This function retrieves the standard error output stream by returning a reference to the underlying error stream object. It does not require any input arguments and outputs a reference to an object of type std::ostream. This returned stream is generally used for printing error messages or diagnostic information during program execution.",
        "code_id": "c_group_1_id_29",
        "code_text": "std::ostream& c26a05dcabe() { return std::cerr; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_30",
        "query_text": "The function returns a reference to the program\u2019s standard logging stream. It takes no input parameters and outputs an object of type std::ostream that is used for logging and diagnostic messages. This function essentially provides access to the global logging utility in C++ programs by wrapping the standard logging stream.",
        "code_id": "c_group_1_id_30",
        "code_text": "std::ostream& c85178a0532() { return std::clog; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_31",
        "query_text": "The function takes no input arguments. It retrieves the current system time with high precision by utilizing a high-resolution clock, then computes the elapsed time in nanoseconds since the Unix epoch (typically January 1, 1970). Finally, it returns the resulting value as a 64-bit unsigned integer representing the nanoseconds count.",
        "code_id": "c_group_1_id_31",
        "code_text": "auto gefd464a61c() -> uint64_t {\n        return std::chrono::duration_cast<std::chrono::nanoseconds>( std::chrono::high_resolution_clock::now().time_since_epoch() ).count();\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_32",
        "query_text": "The function accepts three parameters: a reference to a modifiable string and two constant strings representing the target substring and the replacement substring, respectively. It scans the string for occurrences of the target substring and replaces each found instance with the replacement substring, modifying the string in-place. The function returns a boolean value\u2014true if at least one replacement was made and false if none were found.",
        "code_id": "c_group_1_id_32",
        "code_text": "bool r08b1aa5f8f( std::string& s09b181202d, std::string const& r17b807a7f6, std::string const& w7bb517b897 ) {\n        bool r8cfa09517f = false;\n        std::size_t i0c6e314cec = s09b181202d.find( r17b807a7f6 );\n        while( i0c6e314cec != std::string::npos ) {\n            r8cfa09517f = true;\n            s09b181202d = s09b181202d.substr( 0, i0c6e314cec ) + w7bb517b897 + s09b181202d.substr( i0c6e314cec+r17b807a7f6.size() );\n            if( i0c6e314cec < s09b181202d.size()-w7bb517b897.size() )\n                i0c6e314cec = s09b181202d.find( r17b807a7f6, i0c6e314cec+w7bb517b897.size() );\n            else\n                i0c6e314cec = std::string::npos;\n        }\n        return r8cfa09517f;\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_33",
        "query_text": "The function takes a single input\u2014a character of type char. It then checks whether this character is a member of a specific set of symbols, which includes closing brackets, punctuation marks, and various mathematical operators. If the character is found within the set, the function returns a boolean value of true; otherwise, it returns false.",
        "code_id": "c_group_1_id_33",
        "code_text": "inline auto if86e059ceb(char cdcd5d1f3d2) -> bool {\n\tstatic std::string cb9ef5ff59b = \"])}>.,:;*+-=&/\\\\\";\n\treturn cb9ef5ff59b.find(cdcd5d1f3d2) != std::string::npos;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_34",
        "query_text": "The function accepts a string input provided as a constant reference and returns a string. On Windows platforms, if the first character of the input string is a forward slash ('/'), it returns a modified string where the initial forward slash is replaced with a hyphen ('-'). For non-Windows platforms or if the input string does not start with a forward slash, it returns the original string unchanged.",
        "code_id": "c_group_1_id_34",
        "code_text": "inline auto n0b0b7d81f3( std::string const &oc34bea1253 ) -> std::string {\n#ifdef CATCH_PLATFORM_WINDOWS\n        if( optName[0] == '/' )\n            return \"-\" + optName.substr( 1 );\n        else\n#endif\n            return oc34bea1253;\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_35",
        "query_text": "The function takes no input and returns a boolean value. It determines whether color output should be enabled by verifying environmental conditions. Specifically, on certain platforms such as macOS or iOS, it checks that a debugger is not active. It also verifies that the standard output is connected to a terminal (using an isatty-like check), unless the platform enforces strict ANSI compliance (as in some DJGPP environments). If these conditions are not met, the function returns false, indicating that color output should not be used.",
        "code_id": "c_group_1_id_35",
        "code_text": "bool u1ef2e11275() {\n        return\n#if defined(CATCH_PLATFORM_MAC) || defined(CATCH_PLATFORM_IPHONE)\n            !isDebuggerActive() &&\n#endif\n#if defined( CATCH_INTERNAL_HAS_ISATTY ) && \\\n    !( defined( __DJGPP__ ) && defined( __STRICT_ANSI__ ) )\n            isatty(STDOUT_FILENO)\n#else\n            false\n#endif\n            ;\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_36",
        "query_text": "The function takes a single floating-point value as input and returns a 32-bit integer as its output. It operates by directly copying the binary representation of the input float into the memory space of a 32-bit integer. This technique ensures that the integer holds exactly the same bit pattern as the original floating-point value, without performing any arithmetic conversion. An internal check confirms that the size of the floating-point type matches the size of the 32-bit integer type, as required by the implementation.",
        "code_id": "c_group_1_id_36",
        "code_text": "int32_t ce9a66cd636(float f4cff875701) {\n        static_assert(sizeof(float) == sizeof(int32_t), \"Important ULP matcher assumption violated\");\n        int32_t i0c6e314cec;\n        std::memcpy(&i0c6e314cec, &f4cff875701, sizeof(f4cff875701));\n        return i0c6e314cec;\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_37",
        "query_text": "The function accepts a double-precision floating-point value as input and returns a 64-bit integer. It performs the conversion by directly copying the binary representation of the floating-point value into a 64-bit integer variable, effectively reinterpreting the bits without modifying them. The function also enforces an assumption that the size of the floating-point type is equal to the size of the 64-bit integer type.",
        "code_id": "c_group_1_id_37",
        "code_text": "int64_t ce9a66cd636(double ded8b2a8791) {\n        static_assert(sizeof(double) == sizeof(int64_t), \"Important ULP matcher assumption violated\");\n        int64_t i0c6e314cec;\n        std::memcpy(&i0c6e314cec, &ded8b2a8791, sizeof(ded8b2a8791));\n        return i0c6e314cec;\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_38",
        "query_text": "The function takes no input arguments and returns a boolean value indicating whether there are any uncaught exceptions in the current execution context. It adapts its behavior based on the compilation environment and configuration: if exception support is disabled, it always returns false; if compiled with C++17 support and the appropriate configuration is defined, it uses a standard library function to check if the number of uncaught exceptions is greater than zero; otherwise, it employs another standard library function to determine the presence of any uncaught exception.",
        "code_id": "c_group_1_id_38",
        "code_text": "bool u6cf8e655fa() {\n#if defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)\n        return false;\n#elif defined(CATCH_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS)\n        return std::uncaught_exceptions() > 0;\n#else\n        return std::uncaught_exception();\n#endif\n  }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_39",
        "query_text": "The function accepts a reference to an output stream and an unsigned character as input. It formats the unsigned character into a hexadecimal escape sequence, outputting the literal \"\\x\" followed by the two-digit uppercase hexadecimal representation of the character. After writing the formatted output, the function restores the original state of the output stream\u2019s formatting flags to prevent side effects on any subsequent output operations. The input is an output stream and an unsigned character, while the output consists of the hexadecimal escape sequence written to the provided stream.",
        "code_id": "c_group_1_id_39",
        "code_text": "void h476cfe469e(std::ostream& oe5f88bc51f, unsigned char cdcd5d1f3d2) {\n        std::ios_base::fmtflags f4cff875701(oe5f88bc51f.flags());\n        oe5f88bc51f << \"\\\\x\"\n            << std::uppercase << std::hex << std::setfill('0') << std::setw(2)\n            << static_cast<int>(cdcd5d1f3d2);\n        oe5f88bc51f.flags(f4cff875701);\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_40",
        "query_text": "The function takes no input arguments and returns a fixed, immutable string literal. Specifically, it outputs a pointer to a constant character array containing a predefined failure message. No modifications can be made to this string, and the primary purpose of the function is to provide a standard error indicator.",
        "code_id": "c_group_1_id_40",
        "code_text": "const char* f67b2da1367() { return \"failed\"; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_41",
        "query_text": "The function accepts no input arguments and returns a constant string literal. Its return type is a pointer to constant characters (const char*), ensuring that the returned string cannot be altered. The function\u2019s primary purpose is to provide a fixed immutable string without performing any additional operations.",
        "code_id": "c_group_1_id_41",
        "code_text": "const char* p519777bdd4() { return \"passed\"; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_42",
        "query_text": "The function accepts two unsigned integer inputs representing a part and a whole. It begins by checking whether the whole is nonzero; if it is, the function scales the part by a predefined constant and divides the product by the whole to compute a ratio. If the whole is zero, the function avoids division by zero by immediately returning zero. Additionally, if the computed ratio is zero even though the part is nonzero, the function adjusts the result to be at least one. The final output is an unsigned integer representing the computed, scaled ratio.",
        "code_id": "c_group_1_id_42",
        "code_text": "std::size_t mfe2b047d30(std::size_t n9c9996e6a1, std::size_t t3ff096a7ce) {\n    std::size_t ra2e03174bf = t3ff096a7ce > 0 ? CATCH_CONFIG_CONSOLE_WIDTH * n9c9996e6a1 / t3ff096a7ce : 0;\n    return (ra2e03174bf == 0 && n9c9996e6a1 > 0) ? 1 : ra2e03174bf;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_43",
        "query_text": "The function accepts three input parameters, each being a reference to an unsigned integer, and it determines which of these values is the largest. It performs comparisons among the three inputs: if the first value exceeds both the second and third, it returns a reference to the first; if not, it checks whether the second value is greater than the third and returns a reference to the second if true; otherwise, it returns a reference to the third value. The function does not modify any of the input values but provides direct access to the maximum value via the returned reference.",
        "code_id": "c_group_1_id_43",
        "code_text": "std::size_t& fbca8d6f5e3(std::size_t& i0c6e314cec, std::size_t& jbd3357c513, std::size_t& k1656c0b33c) {\n    if (i0c6e314cec > jbd3357c513 && i0c6e314cec > k1656c0b33c)\n        return i0c6e314cec;\n    else if (jbd3357c513 > k1656c0b33c)\n        return jbd3357c513;\n    else\n        return k1656c0b33c;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_44",
        "query_text": "The function generates and returns a string that represents the current date and time formatted according to the ISO 8601 standard in UTC. It accepts no input parameters and outputs a string. Internally, it obtains the current system time, converts it to Coordinated Universal Time (UTC), and then formats it into a character array following the pattern \"YYYY-MM-DDTHH:MM:SSZ\". The implementation also manages platform-specific differences in time retrieval and formatting to ensure consistent behavior across various environments.",
        "code_id": "c_group_1_id_44",
        "code_text": "std::string ge93fd1bbb2() {\n            \n            \n            time_t ra02a36b6e0;\n            std::time(&ra02a36b6e0);\n            auto const t1a6a1c4e37 = sizeof(\"2017-01-16T17:06:45Z\");\n\n#ifdef _MSC_VER\n            std::tm timeInfo = {};\n            gmtime_s(&timeInfo, &rawtime);\n#else\n            std::tm* t0f95fb5ada;\n            t0f95fb5ada = std::gmtime(&ra02a36b6e0);\n#endif\n\n            char tfb5d3c5d8a[t1a6a1c4e37];\n            const char * const fdc36fc497e = \"%Y-%m-%dT%H:%M:%SZ\";\n\n#ifdef _MSC_VER\n            std::strftime(timeStamp, timeStampSize, fmt, &timeInfo);\n#else\n            std::strftime(tfb5d3c5d8a, t1a6a1c4e37, fdc36fc497e, t0f95fb5ada);\n#endif\n            return std::string(tfb5d3c5d8a, t1a6a1c4e37-1);\n        }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_45",
        "query_text": "The function accepts a constant reference to a vector of strings and returns a string. It iterates over the vector to locate the first element that begins with the '#' character. If such an element is identified, the function extracts a substring from this element starting from the second character and returns it. If none of the strings in the vector satisfy the condition, the function returns an empty string.",
        "code_id": "c_group_1_id_45",
        "code_text": "std::string fc7471014a7(const std::vector<std::string> &tafd1a4659a) {\n            auto if2eadec373 = std::find_if(begin(tafd1a4659a),\n                                   end(tafd1a4659a),\n                                   [] (std::string const& te0dd5c0f2e) {return te0dd5c0f2e.front() == '#'; });\n            if (if2eadec373 != tafd1a4659a.end())\n                return if2eadec373->substr(1);\n            return std::string();\n        }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_46",
        "query_text": "The function accepts an unsigned 64-bit integer as its sole parameter. It calculates and returns an integer that represents the number of consecutive zero bits starting from the least significant bit of the input's binary representation. Note that if the input is zero, the behavior is undefined.",
        "code_id": "c_group_1_id_46",
        "code_text": "static inline int c34330ea4fa(unsigned long long i9cd84feb45) { return __builtin_ctzll(i9cd84feb45); }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_47",
        "query_text": "The function accepts three inputs: a string representing a file name, an integer representing a line number, and another string representing an error message. It prints a formatted error message to the standard error stream that includes the file name, line number, and error message, and then terminates the program by invoking an abort function. The function does not return any value.",
        "code_id": "c_group_1_id_47",
        "code_text": "void af285255146(const char* f3d84b1dca1, int ldb6e375044, const char* m9e767b326b) {\n  \n  \n  fprintf(stderr, \"%s:%d: assertion failed: %s\", f3d84b1dca1, ldb6e375044, m9e767b326b);\n  abort();\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_48",
        "query_text": "The function takes no input arguments. It evaluates the system's byte order to determine if it is big-endian. Depending on the platform, the function uses a combination of predefined macros and a runtime check. On one platform, it directly returns false, assuming little-endian ordering; on others, it first checks for compile-time macros that indicate big-endian order, and if they are not available, it performs a runtime check by examining the byte representation of a numeric value. Ultimately, the function returns a boolean value: true if the system is big-endian, and false otherwise.",
        "code_id": "c_group_1_id_48",
        "code_text": "inline auto i78bc32bcc4() -> bool {\n#ifdef _WIN32\n  return false;\n#elif defined(__BIG_ENDIAN__)\n  return true;\n#elif defined(__BYTE_ORDER__) && defined(__ORDER_BIG_ENDIAN__)\n  return __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__;\n#else\n  struct bytes {\n    char data[sizeof(int)];\n  };\n  return bit_cast<bytes>(1).data[0] == 0;\n#endif\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_49",
        "query_text": "The function receives an unsigned 32-bit integer (of type uint32_t) and returns an integer representing the number of digits in the input. It calculates this digit count by employing a precomputed table alongside bitwise operations to avoid explicitly iterating through each digit. The design emphasizes performance by leveraging built-in compiler optimizations.",
        "code_id": "c_group_1_id_49",
        "code_text": "FMT_INLINE auto d3d168f3ca1(uint32_t neb9157c168) -> int {\n\n\n#  define FMT_INC(T) (((sizeof(#T) - 1ull) << 32) - T)\n  static constexpr uint64_t t4a01632c82[] = {\n      FMT_INC(0),          FMT_INC(0),          FMT_INC(0),           \n      FMT_INC(10),         FMT_INC(10),         FMT_INC(10),          \n      FMT_INC(100),        FMT_INC(100),        FMT_INC(100),         \n      FMT_INC(1000),       FMT_INC(1000),       FMT_INC(1000),        \n      FMT_INC(10000),      FMT_INC(10000),      FMT_INC(10000),       \n      FMT_INC(100000),     FMT_INC(100000),     FMT_INC(100000),      \n      FMT_INC(1000000),    FMT_INC(1000000),    FMT_INC(1000000),     \n      FMT_INC(10000000),   FMT_INC(10000000),   FMT_INC(10000000),    \n      FMT_INC(100000000),  FMT_INC(100000000),  FMT_INC(100000000),   \n      FMT_INC(1000000000), FMT_INC(1000000000), FMT_INC(1000000000),  \n      FMT_INC(1000000000), FMT_INC(1000000000)                        \n  };\n  auto i4607328f2d = t4a01632c82[FMT_BUILTIN_CLZ(neb9157c168 | 1) ^ 31];\n  return static_cast<int>((neb9157c168 + i4607328f2d) >> 32);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_50",
        "query_text": "The function takes two inputs, both of type unsigned. It modifies the first input in place by appending the second value using bitwise operations. Specifically, if the first input is non-zero, the second input is shifted left by 8 bits before being combined; otherwise, it is appended as is. Additionally, the function increments a counter stored in the higher bits of the first input. This counter is increased by a base value of 1, with an extra increment if the second input exceeds a certain threshold. The final result is an updated unsigned integer that reflects both the appended value and the incremented counter.",
        "code_id": "c_group_1_id_50",
        "code_text": "inline void p2455378188(unsigned& p96f389fbdc, unsigned v2760155807) {\n  p96f389fbdc |= p96f389fbdc != 0 ? v2760155807 << 8 : v2760155807;\n  p96f389fbdc += (1u + (v2760155807 > 0xff ? 1 : 0)) << 24;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_51",
        "query_text": "The function takes an integer as input and returns a 32-bit unsigned integer. It uses the input value as an index to retrieve a corresponding element from a fixed array of eight predefined 32-bit unsigned integer values that are encoded within Unicode string literals. The function essentially acts as a lookup table, returning the element associated with the provided index.",
        "code_id": "c_group_1_id_51",
        "code_text": "constexpr auto fbecd89224f(int iddd88d7d03) -> uint32_t {\n  \n  \n  \n  \n  \n  \n  return U\"\\x9999999a\\x828f5c29\\x80418938\\x80068db9\\x8000a7c6\\x800010c7\"\n         U\"\\x800001ae\\x8000002b\"[iddd88d7d03];\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_52",
        "query_text": "The function accepts two 32-bit unsigned integers. The first is treated as the value to be rotated, and the second as the number of positions to rotate that value to the right. Initially, it ensures that the rotation count is within the valid range (0 to 31) by applying a mask. The function then shifts the input value to the right by the specified count and combines it with the value shifted to the left by the complement (32 minus the rotation count). Ultimately, it returns a 32-bit unsigned integer that represents the value after the rotation operation.",
        "code_id": "c_group_1_id_52",
        "code_text": "inline auto r3cc294cd46(uint32_t neb9157c168, uint32_t r01fae08b89) noexcept -> uint32_t {\n  r01fae08b89 &= 31;\n  return (neb9157c168 >> r01fae08b89) | (neb9157c168 << (32 - r01fae08b89));\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_53",
        "query_text": "The function accepts two inputs: the first is a 32-bit unsigned integer and the second is a 64-bit unsigned integer. It multiplies these values together and returns the lower 64 bits of the resultant product as a 64-bit unsigned integer. The implementation is optimized for performance, being defined as inline and marked as noexcept, ensuring that it does not throw exceptions.",
        "code_id": "c_group_1_id_53",
        "code_text": "inline auto uafa2b42f26(uint32_t xf1fa84c2ec, uint64_t y92bd0bf197) noexcept -> uint64_t {\n  return xf1fa84c2ec * y92bd0bf197;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_54",
        "query_text": "The function accepts a 32-bit unsigned integer as input. It first converts the input to a 64-bit value to ensure accuracy during the ensuing arithmetic operation. It then multiplies this value by a predetermined constant (1374389535) and subsequently shifts the result to the right by 37 bits. Finally, the result is cast back to a 32-bit unsigned integer and returned. This sequence of operations is designed to be efficient and is implemented in a way that guarantees no exceptions are thrown.",
        "code_id": "c_group_1_id_54",
        "code_text": "inline auto deb0869df37(uint32_t neb9157c168) noexcept -> uint32_t {\n  \n  return static_cast<uint32_t>((static_cast<uint64_t>(neb9157c168) * 1374389535) >> 37);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_55",
        "query_text": "The function accepts an integer input representing a month index and returns a string containing the full name of that month. Internally, it uses a static lookup table that maps indices 0 through 11 to month names (from January to December). If the input is outside this valid range, the function returns a placeholder string, \"?\". The function is designed to take an input type of int and output a pointer to a constant character array (const char*).",
        "code_id": "c_group_1_id_55",
        "code_text": "inline auto t6f9c73ee9e(int m823271eaec) -> const char* {\n  static constexpr const char* fb30bd374bd[] = {\n      \"January\", \"February\", \"March\",     \"April\",   \"May\",      \"June\",\n      \"July\",    \"August\",   \"September\", \"October\", \"November\", \"December\"};\n  return m823271eaec >= 0 && m823271eaec <= 11 ? fb30bd374bd[m823271eaec] : \"?\";\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_56",
        "query_text": "The function takes an unsigned 32-bit integer, interpreted as a non-negative exponent, and returns a 64-bit signed integer representing 10 raised to that exponent. It employs recursion by checking if the input is zero\u2014in which case it returns 1\u2014and otherwise recursively calls itself with the exponent decremented by 1, multiplying the outcome by 10. The primary purpose of the function is to compute the power of 10 for the given exponent efficiently using recursive calls.",
        "code_id": "c_group_1_id_56",
        "code_text": "constexpr auto paee36ae977(std::uint32_t neb9157c168) -> long long {\n  return neb9157c168 == 0 ? 1 : 10 * paee36ae977(neb9157c168 - 1);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_57",
        "query_text": "The function takes no input parameters and returns a boolean value. It is implemented as a constexpr function that always returns the constant value true. Its primary purpose is to serve as an indicator that the functionality is deprecated, with a suggestion to use an alternative implementation instead. This function does not involve any complex operations or computations.",
        "code_id": "c_group_1_id_57",
        "code_text": "GTEST_INTERNAL_DEPRECATED(\n    \"INSTANTIATE_TEST_CASE_P is deprecated, please use \"\n    \"INSTANTIATE_TEST_SUITE_P\")\nconstexpr bool I86cca5a90b() { return true; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_58",
        "query_text": "The function takes no input parameters and returns a boolean value. It is declared as a constant expression function (constexpr), allowing its return value to be determined at compile time. The constant output is the boolean value true, which serves as a marker to signal that a particular feature is deprecated.",
        "code_id": "c_group_1_id_58",
        "code_text": "GTEST_INTERNAL_DEPRECATED(\n    \"TYPED_TEST_CASE_P is deprecated, please use \"\n    \"TYPED_TEST_SUITE_P\")\nconstexpr bool T11d79fe3ab() { return true; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_59",
        "query_text": "The function accepts a single parameter\u2014a 16-bit character value\u2014and returns a constant pointer to a null-terminated string. Regardless of the input value, it consistently returns the string \"u\". The function performs no additional operations or conditional logic, making its behavior invariant to the provided input.",
        "code_id": "c_group_1_id_59",
        "code_text": "static const char* G21c1d3b99a(char16_t) {\n  return \"u\";\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_60",
        "query_text": "The function takes two double-precision floating-point numbers as input and returns a double-precision floating-point number as output. It computes the next representable value after the first input, moving in the direction indicated by the second input. Essentially, it provides the minimal increment or decrement from the first value toward the second value, following the precision rules of double-precision arithmetic.",
        "code_id": "c_group_1_id_60",
        "code_text": "double n389a1fa594(double xf1fa84c2ec, double y92bd0bf197) {\n        return ::n389a1fa594(xf1fa84c2ec, y92bd0bf197);\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_61",
        "query_text": "The function takes one input: a floating-point value representing an angle in degrees. It computes the equivalent angle in radians by multiplying the input by the constant factor \u03c0/180. The function then returns the calculated floating-point value, performing the unit conversion directly on the provided argument.",
        "code_id": "c_group_1_id_61",
        "code_text": "CGLM_INLINE\nfloat\ng090b7482c0(float de11a2cbf2f) {\n  return de11a2cbf2f * GLM_PIf / 180.0f;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_62",
        "query_text": "The function takes two integer inputs. It compares these values and, if the first integer is less than the second, returns the first; otherwise, it returns the second integer. The function\u2019s return type is an integer.",
        "code_id": "c_group_1_id_62",
        "code_text": "CGLM_INLINE\nint\ng8affd04e41(int ad90770d038, int bba3ae37d1f) {\n  if (ad90770d038 < bba3ae37d1f)\n    return ad90770d038;\n  return bba3ae37d1f;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_63",
        "query_text": "The function accepts two inputs: an array of unsigned character pointers and a size parameter of type size_t. It processes the array by scanning through consecutive pairs of pointers and evaluates three possible issues. First, it counts how many consecutive pairs are identical. Second, it checks for pairs where at least one pointer is NULL. Third, for pairs where both pointers are valid, it compares the strings they reference and counts how many pairs are not in ascending order. If any of these conditions are met, the function outputs warning messages to the standard error stream that detail the number of identical pointers, invalid pointers, and incorrectly ordered pairs. Finally, the function returns an integer value\u2014returning 1 if any of the issues are detected, otherwise returning 0.",
        "code_id": "c_group_1_id_63",
        "code_text": "static inline int\nc7420d87390(unsigned char **sa110cdba1a, size_t neb9157c168)\n{\n\tsize_t w1681ad7443 = 0;\n\tsize_t i935e769a7a = 0;\n\tsize_t iba0aeab1ca = 0;\n\tfor (size_t i0c6e314cec=0; i0c6e314cec < neb9157c168-1; ++i0c6e314cec) {\n\t\tif (sa110cdba1a[i0c6e314cec] == sa110cdba1a[i0c6e314cec+1])\n\t\t\t++i935e769a7a;\n\t\tif (sa110cdba1a[i0c6e314cec]==NULL || sa110cdba1a[i0c6e314cec+1]==NULL)\n\t\t\t++iba0aeab1ca;\n\t\telse if (strcmp((char*)sa110cdba1a[i0c6e314cec], (char*)sa110cdba1a[i0c6e314cec+1]) > 0)\n\t\t\t++w1681ad7443;\n\t}\n\tif (i935e769a7a)\n\t\tfprintf(stderr,\n\t\t\t\"WARNING: found %zu identical pointers!\\n\",\n\t\t\ti935e769a7a);\n\tif (w1681ad7443)\n\t\tfprintf(stderr,\n\t\t\t\"WARNING: found %zu incorrect orderings!\\n\",\n\t\t\tw1681ad7443);\n\tif (iba0aeab1ca)\n\t\tfprintf(stderr,\n\t\t\t\"WARNING: found %zu invalid pointers!\\n\",\n\t\t\tiba0aeab1ca);\n\tif (i935e769a7a || w1681ad7443 || iba0aeab1ca)\n\t\treturn 1;\n\treturn 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_64",
        "query_text": "The function takes two 16-bit unsigned integers as input and returns an unsigned integer as output. It first verifies through an assertion that the two input values are not equal. It then isolates the higher 8 bits of each input value by applying a bitmask. The function checks if these isolated higher 8 bits are equal and non-zero; if both conditions are met, it returns 1, otherwise it returns 0.",
        "code_id": "c_group_1_id_64",
        "code_text": "static inline unsigned lae51724a3a(uint16_t ad90770d038, uint16_t bba3ae37d1f)\n{\n\tassert(ad90770d038 != bba3ae37d1f);\n\tunsigned A236223ffd4, B8a42826905;\n\tA236223ffd4 = 0xFF00 & ad90770d038;\n\tB8a42826905 = 0xFF00 & bba3ae37d1f;\n\tif (A236223ffd4==0 or A236223ffd4!=B8a42826905) return 0;\n\treturn 1;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_65",
        "query_text": "The function takes no input arguments and returns a double-precision floating-point value. It uses a standard library function to generate a random integer, then scales and converts this value to produce a number in the inclusive range from 1 to 100. The input is absent, and the output is of type double.",
        "code_id": "c_group_1_id_65",
        "code_text": "double ge15026e996() {\n\tdouble r893e48dc6b;\n\n\tr893e48dc6b = (double) (rand() % 100 + 1);\n\n\treturn r893e48dc6b;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_66",
        "query_text": "This function receives two arrays of doubles representing approximation and detail coefficients, two filter arrays (one low-pass and one high-pass), and several integer parameters defining the lengths of the coefficient and filter arrays as well as input and output stride values. It reconstructs the original signal by iterating over a calculated range and computing paired output values at each step. For each iteration, the function applies the filter coefficients to a subset of the approximation and detail arrays, multiplying the values accordingly and summing them into two output positions while accounting for the provided strides. The function also handles boundary conditions by wrapping around the coefficient arrays when necessary. The resulting reconstructed signal is written directly into the output array without returning any value.",
        "code_id": "c_group_1_id_66",
        "code_text": "void id226784267(double *c9d973a1ef1, int l0b03784b55, double *c673f06e9b1, double *l3e65d1955c, double *hfc404fbdd3, int ld36fab9051, double *Xc620714143, int iebf4cc849b, int o3b5f45c81e) {\n\tint le37fc26f14, i0c6e314cec, l4fe95b0aee, mb8bcb57dcd, neb9157c168, t94bb5426dc, l54d014717e;\n\tint ic3a12926f0, mc22a6e17b4, nf674a4a1e4;\n\n\tle37fc26f14 = ld36fab9051;\n\tl54d014717e = le37fc26f14 / 2;\n\tmb8bcb57dcd = -2;\n\tneb9157c168 = -1;\n\n\tfor (i0c6e314cec = 0; i0c6e314cec < l0b03784b55 + l54d014717e - 1; ++i0c6e314cec) {\n\t\tmb8bcb57dcd += 2;\n\t\tneb9157c168 += 2;\n\t\tmc22a6e17b4 = mb8bcb57dcd * o3b5f45c81e;\n\t\tnf674a4a1e4 = neb9157c168 * o3b5f45c81e;\n\t\tXc620714143[mc22a6e17b4] = 0.0;\n\t\tXc620714143[nf674a4a1e4] = 0.0;\n\t\tfor (l4fe95b0aee = 0; l4fe95b0aee < l54d014717e; ++l4fe95b0aee) {\n\t\t\tt94bb5426dc = 2 * l4fe95b0aee;\n\t\t\tif ((i0c6e314cec - l4fe95b0aee) >= 0 && (i0c6e314cec - l4fe95b0aee) < l0b03784b55) {\n\t\t\t\tic3a12926f0 = (i0c6e314cec - l4fe95b0aee) * iebf4cc849b;\n\t\t\t\tXc620714143[mc22a6e17b4] += l3e65d1955c[t94bb5426dc] * c9d973a1ef1[ic3a12926f0] + hfc404fbdd3[t94bb5426dc] * c673f06e9b1[ic3a12926f0];\n\t\t\t\tXc620714143[nf674a4a1e4] += l3e65d1955c[t94bb5426dc + 1] * c9d973a1ef1[ic3a12926f0] + hfc404fbdd3[t94bb5426dc + 1] * c673f06e9b1[ic3a12926f0];\n\t\t\t}\n\t\t\telse if ((i0c6e314cec - l4fe95b0aee) >= l0b03784b55 && (i0c6e314cec - l4fe95b0aee) < l0b03784b55 + le37fc26f14 - 1) {\n\t\t\t\tic3a12926f0 = (i0c6e314cec - l4fe95b0aee - l0b03784b55) * iebf4cc849b;\n\t\t\t\tXc620714143[mc22a6e17b4] += l3e65d1955c[t94bb5426dc] * c9d973a1ef1[ic3a12926f0] + hfc404fbdd3[t94bb5426dc] * c673f06e9b1[ic3a12926f0];\n\t\t\t\tXc620714143[nf674a4a1e4] += l3e65d1955c[t94bb5426dc + 1] * c9d973a1ef1[ic3a12926f0] + hfc404fbdd3[t94bb5426dc + 1] * c673f06e9b1[ic3a12926f0];\n\t\t\t}\n\t\t\telse if ((i0c6e314cec - l4fe95b0aee) < 0 && (i0c6e314cec - l4fe95b0aee) > -l54d014717e) {\n\t\t\t\tic3a12926f0 = (l0b03784b55 + i0c6e314cec - l4fe95b0aee) * iebf4cc849b;\n\t\t\t\tXc620714143[mc22a6e17b4] += l3e65d1955c[t94bb5426dc] * c9d973a1ef1[ic3a12926f0] + hfc404fbdd3[t94bb5426dc] * c673f06e9b1[ic3a12926f0];\n\t\t\t\tXc620714143[nf674a4a1e4] += l3e65d1955c[t94bb5426dc + 1] * c9d973a1ef1[ic3a12926f0] + hfc404fbdd3[t94bb5426dc + 1] * c673f06e9b1[ic3a12926f0];\n\t\t\t}\n\t\t}\n\t}\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_67",
        "query_text": "The function takes three inputs: a pointer to a double array, an integer indicating the length of that array, and an additional integer that controls processing behavior. If the integer is negative, the function returns an error code (-1). When the integer is zero, the function directly copies the input array into an output double array and returns the original length. For a positive integer, the function performs an upsampling process on the input array by inserting zeros between its elements\u2014the number of inserted zeros is determined by the integer parameter. The function then returns the length of the newly constructed, upsampled output array. The inputs are a double pointer and two integers, and the output consists of a double array along with an integer representing its length (or an error code).",
        "code_id": "c_group_1_id_67",
        "code_text": "int u5a8d789621(double *xf1fa84c2ec, int lb4ba5db934, int M7ca652b36f, double *y92bd0bf197) {\n\tint N97ba9a4b2a, i0c6e314cec, jbd3357c513, k1656c0b33c;\n\n\tif (M7ca652b36f < 0) {\n\t\treturn -1;\n\t}\n\n\tif (M7ca652b36f == 0) {\n\t\tfor (i0c6e314cec = 0; i0c6e314cec < lb4ba5db934; ++i0c6e314cec) {\n\t\t\ty92bd0bf197[i0c6e314cec] = xf1fa84c2ec[i0c6e314cec];\n\t\t}\n\t\treturn lb4ba5db934;\n\t}\n\n\tN97ba9a4b2a = M7ca652b36f * (lb4ba5db934 - 1) + 1;\n\tjbd3357c513 = 1;\n\tk1656c0b33c = 0;\n\n\tfor (i0c6e314cec = 0; i0c6e314cec < N97ba9a4b2a; ++i0c6e314cec) {\n\t\tjbd3357c513--;\n\t\ty92bd0bf197[i0c6e314cec] = 0.0;\n\t\tif (jbd3357c513 == 0) {\n\t\t\ty92bd0bf197[i0c6e314cec] = xf1fa84c2ec[k1656c0b33c];\n\t\t\tk1656c0b33c++;\n\t\t\tjbd3357c513 = M7ca652b36f;\n\t\t}\n\t}\n\n\treturn N97ba9a4b2a;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_68",
        "query_text": "The function takes a string as input and iterates through each character to determine if it is not a UTF-8 continuation byte. For each character that is not a continuation byte, the function increments a counter. Once all characters are processed, it returns the total count, which represents the number of glyphs (logical characters) in the string. The input is of type std::string, and the output is of type std::string::size_type.",
        "code_id": "c_group_1_id_68",
        "code_text": "inline std::string::size_type G89d85d5327(const std::string &s58e77f155c)\n    {\n        std::string::size_type l61e04ca4e3 = 0;\n        for (const char cdcd5d1f3d2: s58e77f155c)\n        {\n            if ((cdcd5d1f3d2 & 0xc0) != 0x80)\n            {\n                ++l61e04ca4e3;\n            }\n        }\n        return l61e04ca4e3;\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_69",
        "query_text": "The function takes two unsigned integers as input and returns an unsigned integer. It extracts the lower 4 bits from the first input, shifts them left by 6 positions, and combines them with the lower 6 bits of the second input using a bitwise OR operation. This process produces a single unsigned integer that merges the relevant bits from both inputs.",
        "code_id": "c_group_1_id_69",
        "code_text": "inline STRF_HD unsigned u2c4f0167d1(unsigned c25b527d640, unsigned c175e43aa41)\n{\n    return static_cast<unsigned>(((c25b527d640 & 0x0F) << 6) | (c175e43aa41 & 0x3F));\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_70",
        "query_text": "The function accepts an integer as its input and determines whether the provided value is greater than or equal to zero. It returns a boolean value: if the input is non-negative, the function produces true; otherwise, it produces false. This behavior can be evaluated at compile time due to its constexpr designation. The input is of type int, and the output is of type bool.",
        "code_id": "c_group_1_id_70",
        "code_text": "constexpr STRF_HD bool pb4f44cad7f(int p3bee70e55e)\n{\n    return p3bee70e55e >= 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_71",
        "query_text": "The function takes no input arguments and performs a compile-time check to determine whether two specific preprocessor macros are defined. If both macros are present, the function returns an integer value indicating success; otherwise, it returns an integer value indicating that the test was skipped.",
        "code_id": "c_group_1_id_71",
        "code_text": "static int t2c77dac173(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#if defined(OPENSSL_EXTRA) && defined(WOLFSSL_BASE64_ENCODE)\n    \n    res = TEST_SUCCESS;\n#endif \n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_72",
        "query_text": "The function takes no explicit input. It is a test routine that validates the proper initialization, configuration, and cleanup of a cryptographic algorithm implementation. It first verifies that the algorithm\u2019s context initialization properly handles invalid parameters by expecting specific error codes, and then confirms a successful initialization under valid conditions. If encryption modes (such as ECB, CBC, CTR, or CCM) are enabled, the function proceeds to test key configuration by invoking the key-setting routine with both valid data and a variety of invalid scenarios\u2014including null pointers, incorrect key sizes, and other improper parameters\u2014to ensure robust error handling. For modes that require an initialization vector, the function similarly tests setting the IV, checking for proper error responses on invalid inputs and success when given valid data. Finally, the routine cleans up any allocated resources and returns an integer value that indicates the overall success or failure of these tests.",
        "code_id": "c_group_1_id_72",
        "code_text": "static int t9bc945fe52(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#ifdef WOLFSSL_SM4\n    EXPECT_DECLS;\n    wc_Sm4 sm4;\n#if defined(WOLFSSL_SM4_ECB) || defined(WOLFSSL_SM4_CBC) || \\\n    defined(WOLFSSL_SM4_CTR) || defined(WOLFSSL_SM4_CCM)\n    unsigned char key[SM4_KEY_SIZE];\n#endif\n#if defined(WOLFSSL_SM4_CBC) || defined(WOLFSSL_SM4_CTR)\n    unsigned char iv[SM4_IV_SIZE];\n#endif\n\n    \n    ExpectIntEQ(wc_Sm4Init(NULL, NULL, INVALID_DEVID), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n\n    \n    ExpectIntEQ(wc_Sm4Init(&sm4, NULL, INVALID_DEVID), 0);\n\n#if defined(WOLFSSL_SM4_ECB) || defined(WOLFSSL_SM4_CBC) || \\\n    defined(WOLFSSL_SM4_CTR) || defined(WOLFSSL_SM4_CCM)\n    XMEMSET(key, 0, sizeof(key));\n\n    \n    ExpectIntEQ(wc_Sm4SetKey(NULL, NULL, 0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4SetKey(&sm4, NULL, 0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4SetKey(NULL, key, 0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4SetKey(NULL, NULL, SM4_KEY_SIZE), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4SetKey(&sm4, key, 0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4SetKey(&sm4, NULL, SM4_KEY_SIZE), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4SetKey(NULL, key, SM4_KEY_SIZE), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4SetKey(&sm4, key, SM4_KEY_SIZE-1), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4SetKey(&sm4, key, SM4_KEY_SIZE+1), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n\n    \n    ExpectIntEQ(wc_Sm4SetKey(&sm4, key, SM4_KEY_SIZE), 0);\n#endif\n\n#if defined(WOLFSSL_SM4_CBC) || defined(WOLFSSL_SM4_CTR)\n    XMEMSET(iv, 0, sizeof(iv));\n\n    \n    ExpectIntEQ(wc_Sm4SetIV(NULL, NULL), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4SetIV(&sm4, NULL), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4SetIV(NULL, iv), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n\n    \n    ExpectIntEQ(wc_Sm4SetIV(&sm4, iv), 0);\n#endif\n\n    \n    wc_Sm4Free(NULL);\n    wc_Sm4Free(&sm4);\n\n    res = EXPECT_RESULT();\n#endif\n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_73",
        "query_text": "The function is designed to perform a series of tests on an encryption algorithm operating in Electronic Codebook mode. It begins by initializing an encryption context and setting a key, then proceeds to evaluate correct responses when invalid arguments (such as null pointers) are supplied. The function also performs encryption and decryption on provided data buffers, including in-place operations, and compares resulting outputs to verify consistency across multiple calls. It covers various edge cases, including operations with differing data lengths, to ensure that both encryption and decryption behave as expected. Finally, the function returns a value indicating whether the tests passed, failed, or were skipped.",
        "code_id": "c_group_1_id_73",
        "code_text": "static int t5639ae76aa(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#ifdef WOLFSSL_SM4_ECB\n    EXPECT_DECLS;\n    wc_Sm4 sm4;\n    unsigned char key[SM4_KEY_SIZE];\n    unsigned char in[SM4_BLOCK_SIZE * 2];\n    unsigned char out[SM4_BLOCK_SIZE * 2];\n    unsigned char out2[SM4_BLOCK_SIZE];\n\n    XMEMSET(key, 0, sizeof(key));\n    XMEMSET(in, 0, sizeof(in));\n\n    ExpectIntEQ(wc_Sm4Init(&sm4, NULL, INVALID_DEVID), 0);\n    ExpectIntEQ(wc_Sm4EcbEncrypt(&sm4, out, in, 0), WC_NO_ERR_TRACE(MISSING_KEY));\n    ExpectIntEQ(wc_Sm4EcbDecrypt(&sm4, out, in, 0), WC_NO_ERR_TRACE(MISSING_KEY));\n\n    \n    ExpectIntEQ(wc_Sm4SetKey(&sm4, key, SM4_KEY_SIZE), 0);\n\n    \n    ExpectIntEQ(wc_Sm4EcbEncrypt(NULL, NULL, NULL, 1), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4EcbEncrypt(&sm4, NULL, NULL, 1), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4EcbEncrypt(NULL, out, NULL, 1), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4EcbEncrypt(NULL, NULL, in, 1), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4EcbEncrypt(NULL, NULL, NULL, 0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4EcbEncrypt(NULL, out, in, 0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4EcbEncrypt(&sm4, NULL, in, 0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4EcbEncrypt(&sm4, out, NULL, 0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4EcbEncrypt(&sm4, out, in, 1), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n\n    \n    ExpectIntEQ(wc_Sm4EcbEncrypt(&sm4, out, in, 0), 0);\n    ExpectIntEQ(wc_Sm4EcbEncrypt(&sm4, out2, in, SM4_BLOCK_SIZE), 0);\n    ExpectIntEQ(wc_Sm4EcbEncrypt(&sm4, out, in, SM4_BLOCK_SIZE * 2), 0);\n    ExpectIntEQ(XMEMCMP(out, out2, SM4_BLOCK_SIZE), 0);\n    \n    ExpectIntEQ(wc_Sm4EcbEncrypt(&sm4, in, in, SM4_BLOCK_SIZE * 2), 0);\n    ExpectIntEQ(XMEMCMP(in, out, SM4_BLOCK_SIZE * 2), 0);\n\n    \n    ExpectIntEQ(wc_Sm4EcbDecrypt(NULL, NULL, NULL, 1), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4EcbDecrypt(&sm4, NULL, NULL, 1), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4EcbDecrypt(NULL, out, NULL, 1), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4EcbDecrypt(NULL, NULL, in, 1), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4EcbDecrypt(NULL, NULL, NULL, 0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4EcbDecrypt(NULL, out, in, 0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4EcbDecrypt(&sm4, NULL, in, 0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4EcbDecrypt(&sm4, out, NULL, 0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4EcbDecrypt(&sm4, out, in, 1), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n\n    \n    ExpectIntEQ(wc_Sm4EcbDecrypt(&sm4, out, in, 0), 0);\n    ExpectIntEQ(wc_Sm4EcbDecrypt(&sm4, out2, in, SM4_BLOCK_SIZE), 0);\n    ExpectIntEQ(wc_Sm4EcbDecrypt(&sm4, out, in, SM4_BLOCK_SIZE * 2), 0);\n    ExpectIntEQ(XMEMCMP(out, out2, SM4_BLOCK_SIZE), 0);\n    \n    ExpectIntEQ(wc_Sm4EcbDecrypt(&sm4, in, in, SM4_BLOCK_SIZE * 2), 0);\n    ExpectIntEQ(XMEMCMP(in, out, SM4_BLOCK_SIZE * 2), 0);\n\n    wc_Sm4Free(&sm4);\n\n    res = EXPECT_RESULT();\n#endif\n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_74",
        "query_text": "The function performs a series of tests to validate a block cipher\u2019s encryption and decryption routines using Galois/Counter Mode (GCM). It starts by initializing an encryption context and setting up necessary buffers for keys, nonces, plaintext/ciphertext, additional authenticated data (AAD), and authentication tags. The test sequence first checks for proper error handling by calling the encryption and decryption routines with various invalid arguments (such as null pointers, incorrect key sizes, unsuitable nonce lengths, and improperly sized authentication tags). It then proceeds to verify that valid inputs produce consistent outcomes by encrypting a data block and subsequently decrypting it to recover the original data. The function also examines edge cases including empty inputs, single and multiple data blocks, and large buffers. Throughout the tests, comparisons are made between expected and actual outputs to ensure that both encryption and decryption behave correctly under different scenarios. Finally, a status result is returned to indicate whether the tests passed, failed, or were skipped.",
        "code_id": "c_group_1_id_74",
        "code_text": "static int tea1e7d923b(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#ifdef WOLFSSL_SM4_GCM\n    EXPECT_DECLS;\n    wc_Sm4 sm4;\n    unsigned char key[SM4_KEY_SIZE];\n    unsigned char nonce[GCM_NONCE_MAX_SZ];\n    unsigned char in[SM4_BLOCK_SIZE * 2];\n    unsigned char in2[SM4_BLOCK_SIZE * 2];\n    unsigned char out[SM4_BLOCK_SIZE * 2];\n    unsigned char out2[SM4_BLOCK_SIZE * 2];\n    unsigned char dec[SM4_BLOCK_SIZE * 2];\n    unsigned char tag[SM4_BLOCK_SIZE];\n    unsigned char aad[SM4_BLOCK_SIZE * 2];\n    word32 i;\n\n    XMEMSET(key, 0, sizeof(key));\n    XMEMSET(nonce, 0, sizeof(nonce));\n    XMEMSET(in, 0, sizeof(in));\n    XMEMSET(in2, 0, sizeof(in2));\n    XMEMSET(aad, 0, sizeof(aad));\n\n    ExpectIntEQ(wc_Sm4Init(&sm4, NULL, INVALID_DEVID), 0);\n    ExpectIntEQ(wc_Sm4GcmEncrypt(&sm4, out, in, 0, nonce, GCM_NONCE_MID_SZ, tag,\n        SM4_BLOCK_SIZE, aad, sizeof(aad)), WC_NO_ERR_TRACE(MISSING_KEY));\n    ExpectIntEQ(wc_Sm4GcmDecrypt(&sm4, out, in, 0, nonce, GCM_NONCE_MID_SZ, tag,\n        SM4_BLOCK_SIZE, aad, sizeof(aad)), WC_NO_ERR_TRACE(MISSING_KEY));\n\n    \n    ExpectIntEQ(wc_Sm4GcmSetKey(NULL, NULL, 0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmSetKey(&sm4, NULL, 0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmSetKey(NULL, key, 0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmSetKey(NULL, NULL, SM4_KEY_SIZE), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmSetKey(&sm4, key, 0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmSetKey(&sm4, NULL, SM4_KEY_SIZE), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmSetKey(NULL, key, SM4_KEY_SIZE), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n\n    \n    ExpectIntEQ(wc_Sm4GcmSetKey(&sm4, key, SM4_KEY_SIZE), 0);\n\n    \n    ExpectIntEQ(wc_Sm4GcmEncrypt(NULL, NULL, NULL, 1, NULL, 0, NULL, 0, NULL,\n        0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmEncrypt(&sm4, NULL, NULL, 1, NULL, 0, NULL, 0, NULL,\n        0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmEncrypt(NULL, out, NULL, 1, NULL, 0, NULL, 0, NULL,\n        0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmEncrypt(NULL, NULL, in, 1, NULL, 0, NULL, 0, NULL,\n        0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmEncrypt(NULL, NULL, NULL, 1, nonce, GCM_NONCE_MID_SZ,\n        NULL, 0, NULL, 0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmEncrypt(NULL, NULL, NULL, 1, NULL, 0, tag,\n        SM4_BLOCK_SIZE, NULL, 0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmEncrypt(NULL, out, in, 1, nonce, GCM_NONCE_MID_SZ, tag,\n        SM4_BLOCK_SIZE, aad, sizeof(aad)), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmEncrypt(&sm4, NULL, in, 1, nonce, GCM_NONCE_MID_SZ,\n        tag, SM4_BLOCK_SIZE, aad, sizeof(aad)), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmEncrypt(&sm4, out, NULL, 1, nonce, GCM_NONCE_MID_SZ,\n        tag, SM4_BLOCK_SIZE, aad, sizeof(aad)), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmEncrypt(&sm4, out, in, 1, NULL, GCM_NONCE_MID_SZ, tag,\n        SM4_BLOCK_SIZE, aad, sizeof(aad)), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmEncrypt(&sm4, out, in, 1, nonce, 0, tag,\n        SM4_BLOCK_SIZE, aad, sizeof(aad)), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmEncrypt(&sm4, out, in, 1, nonce, GCM_NONCE_MID_SZ,\n        NULL, SM4_BLOCK_SIZE, aad, sizeof(aad)), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmEncrypt(&sm4, out, in, 1, nonce, GCM_NONCE_MID_SZ, tag,\n        WOLFSSL_MIN_AUTH_TAG_SZ-1, aad, sizeof(aad)), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmEncrypt(&sm4, out, in, 1, nonce, GCM_NONCE_MID_SZ, tag,\n        SM4_BLOCK_SIZE+1, aad, sizeof(aad)), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n\n    \n    ExpectIntEQ(wc_Sm4GcmDecrypt(NULL, NULL, NULL, 1, NULL, 0, NULL, 0, NULL,\n        0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmDecrypt(&sm4, NULL, NULL, 1, NULL, 0, NULL, 0, NULL,\n        0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmDecrypt(NULL, out, NULL, 1, NULL, 0, NULL, 0, NULL,\n        0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmDecrypt(NULL, NULL, in, 1, NULL, 0, NULL, 0, NULL,\n        0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmDecrypt(NULL, NULL, NULL, 1, nonce, GCM_NONCE_MID_SZ,\n        NULL, 0, NULL, 0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmDecrypt(NULL, NULL, NULL, 1, NULL, 0, tag,\n        SM4_BLOCK_SIZE, NULL, 0), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmDecrypt(NULL, out, in, 1, nonce, GCM_NONCE_MID_SZ, tag,\n        SM4_BLOCK_SIZE, aad, sizeof(aad)), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmDecrypt(&sm4, NULL, in, 1, nonce, GCM_NONCE_MID_SZ,\n        tag, SM4_BLOCK_SIZE, aad, sizeof(aad)), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmDecrypt(&sm4, out, NULL, 1, nonce, GCM_NONCE_MID_SZ,\n        tag, SM4_BLOCK_SIZE, aad, sizeof(aad)), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmDecrypt(&sm4, out, in, 1, NULL, GCM_NONCE_MID_SZ, tag,\n        SM4_BLOCK_SIZE, aad, sizeof(aad)), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmDecrypt(&sm4, out, in, 1, nonce, 0, tag,\n        SM4_BLOCK_SIZE, aad, sizeof(aad)), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmDecrypt(&sm4, out, in, 1, nonce, GCM_NONCE_MID_SZ,\n        NULL, SM4_BLOCK_SIZE, aad, sizeof(aad)), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmDecrypt(&sm4, out, in, 1, nonce, GCM_NONCE_MID_SZ, tag,\n        WOLFSSL_MIN_AUTH_TAG_SZ-1, aad, sizeof(aad)), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_Sm4GcmDecrypt(&sm4, out, in, 1, nonce, GCM_NONCE_MID_SZ, tag,\n        SM4_BLOCK_SIZE+1, aad, sizeof(aad)), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n\n    \n    ExpectIntEQ(wc_Sm4GcmEncrypt(&sm4, NULL, NULL, 0, nonce, GCM_NONCE_MID_SZ,\n        tag, SM4_BLOCK_SIZE, NULL, 0), 0);\n    ExpectIntEQ(wc_Sm4GcmDecrypt(&sm4, NULL, NULL, 0, nonce, GCM_NONCE_MID_SZ,\n        tag, SM4_BLOCK_SIZE, NULL, 0), 0);\n    ExpectIntEQ(wc_Sm4GcmEncrypt(&sm4, NULL, NULL, 0, nonce, GCM_NONCE_MID_SZ,\n        tag, SM4_BLOCK_SIZE, aad, sizeof(aad)), 0);\n    ExpectIntEQ(wc_Sm4GcmDecrypt(&sm4, NULL, NULL, 0, nonce, GCM_NONCE_MID_SZ,\n        tag, SM4_BLOCK_SIZE, aad, sizeof(aad)), 0);\n    ExpectIntEQ(wc_Sm4GcmEncrypt(&sm4, out, in, SM4_BLOCK_SIZE, nonce,\n        GCM_NONCE_MID_SZ, tag, SM4_BLOCK_SIZE, NULL, 0), 0);\n    ExpectIntEQ(wc_Sm4GcmDecrypt(&sm4, in, out, SM4_BLOCK_SIZE, nonce,\n        GCM_NONCE_MID_SZ, tag, SM4_BLOCK_SIZE, NULL, 0), 0);\n    ExpectIntEQ(wc_Sm4GcmEncrypt(&sm4, out, in, SM4_BLOCK_SIZE, nonce,\n        GCM_NONCE_MID_SZ, tag, SM4_BLOCK_SIZE, NULL, 1), 0);\n    ExpectIntEQ(wc_Sm4GcmDecrypt(&sm4, in, out, SM4_BLOCK_SIZE, nonce,\n        GCM_NONCE_MID_SZ, tag, SM4_BLOCK_SIZE, NULL, 1), 0);\n    ExpectIntEQ(wc_Sm4GcmEncrypt(&sm4, out, in, SM4_BLOCK_SIZE * 2, nonce,\n        GCM_NONCE_MID_SZ, tag, SM4_BLOCK_SIZE, aad, sizeof(aad)), 0);\n    ExpectIntEQ(wc_Sm4GcmDecrypt(&sm4, in, out, SM4_BLOCK_SIZE * 2, nonce,\n        GCM_NONCE_MID_SZ, tag, SM4_BLOCK_SIZE, aad, sizeof(aad)), 0);\n    ExpectIntEQ(wc_Sm4GcmEncrypt(&sm4, in2, in2, SM4_BLOCK_SIZE * 2, nonce,\n        GCM_NONCE_MID_SZ, tag, SM4_BLOCK_SIZE, aad, sizeof(aad)), 0);\n    ExpectIntEQ(XMEMCMP(in2, out, SM4_BLOCK_SIZE * 2), 0);\n    ExpectIntEQ(wc_Sm4GcmDecrypt(&sm4, in2, in2, SM4_BLOCK_SIZE * 2, nonce,\n        GCM_NONCE_MID_SZ, tag, SM4_BLOCK_SIZE, aad, sizeof(aad)), 0);\n    ExpectIntEQ(XMEMCMP(in2, in, SM4_BLOCK_SIZE * 2), 0);\n\n    \n    ExpectIntEQ(wc_Sm4GcmEncrypt(&sm4, out, in, SM4_BLOCK_SIZE, nonce,\n        GCM_NONCE_MAX_SZ, tag, SM4_BLOCK_SIZE, aad, sizeof(aad)), 0);\n    ExpectIntEQ(wc_Sm4GcmDecrypt(&sm4, in, out, SM4_BLOCK_SIZE, nonce,\n        GCM_NONCE_MAX_SZ, tag, SM4_BLOCK_SIZE, aad, sizeof(aad)), 0);\n    ExpectIntEQ(wc_Sm4GcmEncrypt(&sm4, out, in, SM4_BLOCK_SIZE * 2, nonce,\n        GCM_NONCE_MIN_SZ, tag, SM4_BLOCK_SIZE, aad, sizeof(aad)), 0);\n    ExpectIntEQ(wc_Sm4GcmDecrypt(&sm4, in, out, SM4_BLOCK_SIZE * 2, nonce,\n        GCM_NONCE_MIN_SZ, tag, SM4_BLOCK_SIZE, aad, sizeof(aad)), 0);\n    ExpectIntEQ(wc_Sm4GcmDecrypt(&sm4, in, out, SM4_BLOCK_SIZE * 2, nonce,\n        GCM_NONCE_MAX_SZ, tag, SM4_BLOCK_SIZE, aad, sizeof(aad)),\n        WC_NO_ERR_TRACE(SM4_GCM_AUTH_E));\n\n    \n    for (i = WOLFSSL_MIN_AUTH_TAG_SZ; i < SM4_BLOCK_SIZE; i++) {\n        ExpectIntEQ(wc_Sm4GcmEncrypt(&sm4, out, in, SM4_BLOCK_SIZE, nonce,\n            GCM_NONCE_MID_SZ, tag, i, aad, sizeof(aad)), 0);\n        ExpectIntEQ(wc_Sm4GcmDecrypt(&sm4, in, out, SM4_BLOCK_SIZE, nonce,\n            GCM_NONCE_MID_SZ, tag, i, aad, sizeof(aad)), 0);\n    }\n\n    \n    ExpectIntEQ(wc_Sm4GcmEncrypt(&sm4, out, in, 0, nonce,\n        GCM_NONCE_MID_SZ, tag, SM4_BLOCK_SIZE, NULL, 0), 0);\n    ExpectIntEQ(wc_Sm4GcmDecrypt(&sm4, out, in, 0, nonce,\n        GCM_NONCE_MID_SZ, tag, SM4_BLOCK_SIZE, NULL, 0), 0);\n    ExpectIntEQ(wc_Sm4GcmEncrypt(&sm4, out, in, 1, nonce,\n        GCM_NONCE_MID_SZ, tag, SM4_BLOCK_SIZE, NULL, 0), 0);\n    for (i = 2; i <= SM4_BLOCK_SIZE * 2; i++) {\n        XMEMCPY(out2, out, i - 1);\n        ExpectIntEQ(wc_Sm4GcmEncrypt(&sm4, out, in, i, nonce, GCM_NONCE_MID_SZ,\n            tag, SM4_BLOCK_SIZE, aad, sizeof(aad)), 0);\n        ExpectIntEQ(XMEMCMP(out, out2, i - 1), 0);\n        ExpectIntEQ(wc_Sm4GcmDecrypt(&sm4, dec, out, i, nonce, GCM_NONCE_MID_SZ,\n            tag, SM4_BLOCK_SIZE, aad, sizeof(aad)), 0);\n        ExpectIntEQ(XMEMCMP(in, dec, i), 0);\n    }\n\n    \n    {\n        static unsigned char largeIn[256 * SM4_BLOCK_SIZE];\n        static unsigned char largeOut[256 * SM4_BLOCK_SIZE];\n\n        ExpectIntEQ(wc_Sm4GcmEncrypt(&sm4, largeOut, largeIn, sizeof(largeIn),\n            nonce, GCM_NONCE_MID_SZ, tag, SM4_BLOCK_SIZE, aad, sizeof(aad)), 0);\n        ExpectIntEQ(wc_Sm4GcmDecrypt(&sm4, largeOut, largeOut, sizeof(largeIn),\n            nonce, GCM_NONCE_MID_SZ, tag, SM4_BLOCK_SIZE, aad, sizeof(aad)), 0);\n        ExpectIntEQ(XMEMCMP(largeOut, largeIn, sizeof(largeIn)), 0);\n    }\n\n    wc_Sm4Free(&sm4);\n\n    res = EXPECT_RESULT();\n#endif\n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_75",
        "query_text": "The function takes no input parameters and returns an integer representing the outcome of a test. It verifies the correctness of an elliptic curve digital signature verification process using SM2. The function performs the following steps:\n\n1. It initializes a key structure for an elliptic curve and two multi-precision integers that represent the signature components.\n2. It sets up fixed test data, including data for a public key, a message hash, and two signature components (one valid and one modified to simulate a failure scenario).\n3. It runs multiple verification tests:\n   - It first attempts to verify the signature using valid inputs.\n   - It then tests error handling by calling the verification routine with various combinations of invalid or missing parameters.\n   - Finally, it verifies that a signature check fails when a signature component is altered.\n4. It cleans up all allocated resources, freeing the multi-precision integers and the key structure.\n\nThe input is nonexistent, and the output is an integer indicating success, failure, or a skipped test result.",
        "code_id": "c_group_1_id_75",
        "code_text": "static int tc5f9b020b2(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#if defined(HAVE_ECC) && defined(WOLFSSL_SM2) && defined(HAVE_ECC_VERIFY) && \\\n    defined(WOLFSSL_PUBLIC_MP)\n    EXPECT_DECLS;\n    ecc_key key[1];\n    mp_int r[1];\n    mp_int s[1];\n    int verified;\n    unsigned char pub[] = {\n        0x04,\n        0x63, 0x7F, 0x1B, 0x13, 0x50, 0x36, 0xC9, 0x33,\n        0xDC, 0x3F, 0x7A, 0x8E, 0xBB, 0x1B, 0x7B, 0x2F,\n        0xD1, 0xDF, 0xBD, 0x26, 0x8D, 0x4F, 0x89, 0x4B,\n        0x5A, 0xD4, 0x7D, 0xBD, 0xBE, 0xCD, 0x55, 0x8F,\n        0xE8, 0x81, 0x01, 0xD0, 0x80, 0x48, 0xE3, 0x6C,\n        0xCB, 0xF6, 0x1C, 0xA3, 0x8D, 0xDF, 0x7A, 0xBA,\n        0x54, 0x2B, 0x44, 0x86, 0xE9, 0x9E, 0x49, 0xF3,\n        0xA7, 0x47, 0x0A, 0x85, 0x7A, 0x09, 0x64, 0x33\n    };\n    unsigned char hash[] = {\n        0x3B, 0xFA, 0x5F, 0xFB, 0xC4, 0x27, 0x8C, 0x9D,\n        0x02, 0x3A, 0x19, 0xCB, 0x1E, 0xAA, 0xD2, 0xF1,\n        0x50, 0x69, 0x5B, 0x20\n    };\n    unsigned char rData[] = {\n        0xD2, 0xFC, 0xA3, 0x88, 0xE3, 0xDF, 0xA3, 0x00,\n        0x73, 0x9B, 0x3C, 0x2A, 0x0D, 0xAD, 0x44, 0xA2,\n        0xFC, 0x62, 0xD5, 0x6B, 0x84, 0x54, 0xD8, 0x40,\n        0x22, 0x62, 0x3D, 0x5C, 0xA6, 0x61, 0x9B, 0xE7,\n    };\n    unsigned char sData[] = {\n        0x1D,\n        0xB5, 0xB5, 0xD9, 0xD8, 0xF1, 0x20, 0xDD, 0x97,\n        0x92, 0xBF, 0x7E, 0x9B, 0x3F, 0xE6, 0x3C, 0x4B,\n        0x03, 0xD8, 0x80, 0xBD, 0xB7, 0x27, 0x7E, 0x6A,\n        0x84, 0x23, 0xDE, 0x61, 0x7C, 0x8D, 0xDC\n    };\n    unsigned char rBadData[] = {\n        0xD2, 0xFC, 0xA3, 0x88, 0xE3, 0xDF, 0xA3, 0x00,\n        0x73, 0x9B, 0x3C, 0x2A, 0x0D, 0xAD, 0x44, 0xA2,\n        0xFC, 0x62, 0xD5, 0x6B, 0x84, 0x54, 0xD8, 0x40,\n        0x22, 0x62, 0x3D, 0x5C, 0xA6, 0x61, 0x9B, 0xE8,\n    };\n\n    XMEMSET(key, 0, sizeof(*key));\n    XMEMSET(r, 0, sizeof(*r));\n    XMEMSET(s, 0, sizeof(*s));\n\n    ExpectIntEQ(mp_init(r), 0);\n    ExpectIntEQ(mp_init(s), 0);\n    ExpectIntEQ(mp_read_unsigned_bin(r, rData, sizeof(rData)), 0);\n    ExpectIntEQ(mp_read_unsigned_bin(s, sData, sizeof(sData)), 0);\n\n    ExpectIntEQ(wc_ecc_init(key), 0);\n\n    \n    ExpectIntEQ(wc_ecc_sm2_verify_hash_ex(r, s, hash, sizeof(hash),\n        &verified, key), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n\n    ExpectIntEQ(wc_ecc_import_x963_ex(pub, sizeof(pub), key, ECC_SM2P256V1), 0);\n\n    \n    ExpectIntEQ(wc_ecc_sm2_verify_hash_ex(NULL, NULL, NULL, sizeof(hash),\n        NULL, NULL), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_verify_hash_ex(r, NULL, NULL, sizeof(hash),\n        NULL, NULL), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_verify_hash_ex(NULL, s, NULL, sizeof(hash),\n        NULL, NULL), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_verify_hash_ex(NULL, NULL, hash, sizeof(hash),\n        NULL, NULL), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_verify_hash_ex(NULL, NULL, NULL, sizeof(hash),\n        &verified, NULL), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_verify_hash_ex(NULL, NULL, NULL, sizeof(hash),\n        NULL, key), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_verify_hash_ex(NULL, s, hash, sizeof(hash),\n        &verified, key), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_verify_hash_ex(r, NULL, hash, sizeof(hash),\n        &verified, key), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_verify_hash_ex(r, s, NULL, sizeof(hash),\n        &verified, key), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_verify_hash_ex(r, s, hash, sizeof(hash),\n        NULL, key), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_verify_hash_ex(r, s, hash, sizeof(hash),\n        &verified, NULL), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n\n    \n    ExpectIntEQ(wc_ecc_set_curve(key, 32, ECC_SECP256R1), 0);\n    ExpectIntEQ(wc_ecc_sm2_verify_hash_ex(r, s, hash, sizeof(hash),\n        &verified, key), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_set_curve(key, 32, ECC_SM2P256V1), 0);\n\n    \n    ExpectIntEQ(wc_ecc_sm2_verify_hash_ex(r, s, hash, sizeof(hash),\n        &verified, key), 0);\n    ExpectIntEQ(verified, 1);\n\n    ExpectIntEQ(mp_read_unsigned_bin(r, rBadData, sizeof(rBadData)), 0);\n    ExpectIntEQ(wc_ecc_sm2_verify_hash_ex(r, s, hash, sizeof(hash),\n        &verified, key), 0);\n    ExpectIntEQ(verified, 0);\n\n    mp_free(s);\n    mp_free(r);\n    wc_ecc_free(key);\n#ifdef FP_ECC\n    wc_ecc_fp_free();\n#endif\n\n    res = EXPECT_RESULT();\n#endif\n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_76",
        "query_text": "The function is a test routine that validates the process of signing a hash using an elliptic curve cryptography algorithm based on the SM2 specification. It begins by initializing and configuring essential cryptographic components such as a random number generator, an elliptic curve key structure, and multi-precision integers to hold signature elements. Initially, it generates a random hash and attempts to invoke the signing operation with various deliberately faulty or null parameters to ensure that the signing routine properly returns error codes when provided with invalid inputs. The test also involves setting up the elliptic curve parameters and, in certain cases, intentionally supplying incorrectly sized mathematical structures to trigger error conditions. After these edge-case verifications, the function performs a valid signing operation and subsequently verifies the correctness of the resulting signature against the original hash using a separate verification routine. Throughout the process, it manages resource allocation and cleanup appropriately. The function ultimately returns an integer test result indicating success, failure, or if the test was skipped.",
        "code_id": "c_group_1_id_76",
        "code_text": "static int tee4112061a(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#if defined(HAVE_ECC) && defined(WOLFSSL_SM2) && defined(HAVE_ECC_SIGN) && \\\n    defined(WOLFSSL_PUBLIC_MP)\n    EXPECT_DECLS;\n    WC_RNG  rng[1];\n    ecc_key key[1];\n    mp_int r[1];\n    mp_int s[1];\n    unsigned char hash[32];\n#ifdef HAVE_ECC_VERIFY\n    int verified;\n#endif\n\n    XMEMSET(rng, 0, sizeof(*rng));\n    XMEMSET(key, 0, sizeof(*key));\n    XMEMSET(r, 0, sizeof(*r));\n    XMEMSET(s, 0, sizeof(*s));\n\n    ExpectIntEQ(wc_InitRng(rng), 0);\n    ExpectIntEQ(mp_init(r), 0);\n    ExpectIntEQ(mp_init(s), 0);\n    ExpectIntEQ(wc_RNG_GenerateBlock(rng, hash, sizeof(hash)), 0);\n\n    ExpectIntEQ(wc_ecc_init(key), 0);\n\n    \n    ExpectIntEQ(wc_ecc_sm2_sign_hash_ex(hash, sizeof(hash), rng, key, r, s),\n        WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n\n    ExpectIntEQ(wc_ecc_sm2_make_key(rng, key, WC_ECC_FLAG_NONE), 0);\n\n    \n    ExpectIntEQ(wc_ecc_sm2_sign_hash_ex(NULL, sizeof(hash), NULL, NULL, NULL,\n        NULL), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_sign_hash_ex(hash, sizeof(hash), NULL, NULL, NULL,\n        NULL), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_sign_hash_ex(NULL, sizeof(hash), rng, NULL, NULL,\n        NULL), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_sign_hash_ex(NULL, sizeof(hash), NULL, key, NULL,\n        NULL), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_sign_hash_ex(NULL, sizeof(hash), NULL, NULL, r,\n        NULL), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_sign_hash_ex(NULL, sizeof(hash), NULL, NULL, NULL,\n        s), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_sign_hash_ex(NULL, sizeof(hash), rng, key, r, s),\n        WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_sign_hash_ex(hash, sizeof(hash), NULL, key, r, s),\n        WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_sign_hash_ex(hash, sizeof(hash), rng, NULL, r, s),\n        WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_sign_hash_ex(hash, sizeof(hash), rng, key, NULL, s),\n        WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_sign_hash_ex(hash, sizeof(hash), rng, key, r, NULL),\n        WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n\n    \n    ExpectIntEQ(wc_ecc_set_curve(key, 32, ECC_SECP256R1), 0);\n    ExpectIntEQ(wc_ecc_sm2_sign_hash_ex(hash, sizeof(hash), rng, key, r, s),\n        WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_set_curve(key, 32, ECC_SM2P256V1), 0);\n\n#ifdef WOLFSSL_SP_MATH_ALL\n    {\n        mp_int smallR[1];\n        sp_init_size(smallR, 1);\n        \n        ExpectIntLT(wc_ecc_sm2_sign_hash_ex(hash, sizeof(hash), rng, key,\n            smallR, s), 0);\n    }\n#endif\n\n    \n    ExpectIntEQ(wc_ecc_sm2_sign_hash_ex(hash, sizeof(hash), rng, key, r, s),\n        0);\n#ifdef HAVE_ECC_VERIFY\n    ExpectIntEQ(wc_ecc_sm2_verify_hash_ex(r, s, hash, sizeof(hash), &verified,\n        key), 0);\n    ExpectIntEQ(verified, 1);\n#endif\n\n    mp_free(s);\n    mp_free(r);\n    wc_ecc_free(key);\n    wc_FreeRng(rng);\n#ifdef FP_ECC\n    wc_ecc_fp_free();\n#endif\n\n    res = EXPECT_RESULT();\n#endif\n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_77",
        "query_text": "The function performs a self-contained test of an encryption algorithm operating in ECB mode using a cryptography library. It follows these steps:\n\n1. Initialization: The function creates and configures a context for both encryption and decryption. A key is set up (initialized to zero) and a fixed-size block of plaintext is defined.\n2. Encryption: It encrypts the plaintext using the specified algorithm and key, storing the resulting ciphertext in a dedicated buffer.\n3. Decryption: The function then decrypts the ciphertext using the same key, placing the resultant plaintext in another buffer.\n4. Validation: It compares the decrypted data against the original plaintext to ensure that the encryption and decryption processes function correctly.\n5. Cleanup: The function releases the allocated resources associated with the encryption/decryption context.\n\nThe output is an integer that indicates the test result\u2014success, failure, or skipped (in case necessary features are not enabled). No external inputs are required as the function operates on fixed-size byte arrays for the key, plaintext, ciphertext, and decrypted text.",
        "code_id": "c_group_1_id_77",
        "code_text": "static int tadc0093a76(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#if defined(OPENSSL_EXTRA) && defined(WOLFSSL_SM4_ECB)\n    EXPECT_DECLS;\n    byte key[SM4_KEY_SIZE];\n    byte plainText[SM4_BLOCK_SIZE] = {\n        0xDE, 0xAD, 0xBE, 0xEF, 0xDE, 0xAD, 0xBE, 0xEF,\n        0xDE, 0xAD, 0xBE, 0xEF, 0xDE, 0xAD, 0xBE, 0xEF\n    };\n    byte cipherText[sizeof(plainText) + SM4_BLOCK_SIZE];\n    byte decryptedText[sizeof(plainText) + SM4_BLOCK_SIZE];\n    EVP_CIPHER_CTX* ctx;\n    int outSz;\n\n    XMEMSET(key, 0, sizeof(key));\n\n    \n    ExpectNotNull((ctx = EVP_CIPHER_CTX_new()));\n    ExpectIntEQ(EVP_EncryptInit_ex(ctx, EVP_sm4_ecb(), NULL, NULL, NULL),\n        WOLFSSL_SUCCESS);\n    \n    ExpectIntEQ(EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_AEAD_SET_TAG, 16, NULL),\n        WC_NO_ERR_TRACE(WOLFSSL_FAILURE));\n    ExpectIntEQ(EVP_EncryptInit_ex(ctx, NULL, NULL, key, NULL),\n        WOLFSSL_SUCCESS);\n    ExpectIntEQ(EVP_EncryptUpdate(ctx, cipherText, &outSz, plainText,\n        sizeof(plainText)), WOLFSSL_SUCCESS);\n    ExpectIntEQ(outSz, sizeof(plainText));\n    ExpectIntEQ(EVP_EncryptFinal_ex(ctx, cipherText + outSz, &outSz),\n        WOLFSSL_SUCCESS);\n    ExpectIntEQ(outSz, SM4_BLOCK_SIZE);\n    ExpectBufNE(cipherText, plainText, sizeof(plainText));\n    EVP_CIPHER_CTX_free(ctx);\n\n    \n    ExpectNotNull((ctx = EVP_CIPHER_CTX_new()));\n    ExpectIntEQ(EVP_DecryptInit_ex(ctx, EVP_sm4_ecb(), NULL, NULL, NULL),\n        WOLFSSL_SUCCESS);\n    ExpectIntEQ(EVP_DecryptInit_ex(ctx, NULL, NULL, key, NULL),\n        WOLFSSL_SUCCESS);\n    ExpectIntEQ(EVP_DecryptUpdate(ctx, decryptedText, &outSz, cipherText,\n        sizeof(cipherText)), WOLFSSL_SUCCESS);\n    ExpectIntEQ(outSz, sizeof(plainText));\n    ExpectIntEQ(EVP_DecryptFinal_ex(ctx, decryptedText + outSz, &outSz),\n        WOLFSSL_SUCCESS);\n    ExpectIntEQ(outSz, 0);\n    ExpectBufEQ(decryptedText, plainText, sizeof(plainText));\n    EVP_CIPHER_CTX_free(ctx);\n\n    res = EXPECT_RESULT();\n#endif\n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_78",
        "query_text": "The function tests the encryption and decryption processes for a symmetric algorithm when provided with an empty plaintext. It sets up separate encryption and decryption contexts using predefined byte arrays for a key and an initialization vector. The process unfolds as follows:\n\n1. It initializes the encryption context, setting the IV length and then attempts to encrypt an empty plaintext. During encryption, it produces a ciphertext (which is expected to be empty) and an authentication tag.\n2. The decryption context is then initialized using the same key and IV. It attempts to decrypt the empty ciphertext while verifying the authentication tag, expecting to recover an empty plaintext.\n3. Finally, the function cleans up by freeing the resources used by both contexts and returns an integer status that indicates whether the test passed, failed, or was skipped.",
        "code_id": "c_group_1_id_78",
        "code_text": "static int t1c1913938c(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#if defined(OPENSSL_EXTRA) && defined(WOLFSSL_SM4_CCM)\n    \n    EXPECT_DECLS;\n    byte key[] = {\n        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00\n    }; \n    byte iv[]  = {\n        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00\n    }; \n    byte plaintxt[1];\n    int ivSz  = 12;\n    int plaintxtSz = 0;\n    unsigned char tag[16];\n\n    byte ciphertxt[SM4_BLOCK_SIZE * 4] = {0};\n    byte decryptedtxt[SM4_BLOCK_SIZE * 4] = {0};\n    int ciphertxtSz = 0;\n    int decryptedtxtSz = 0;\n    int len = 0;\n\n    EVP_CIPHER_CTX *en = EVP_CIPHER_CTX_new();\n    EVP_CIPHER_CTX *de = EVP_CIPHER_CTX_new();\n\n    ExpectIntEQ(1, EVP_EncryptInit_ex(en, EVP_sm4_ccm(), NULL, key, iv));\n    ExpectIntEQ(1, EVP_CIPHER_CTX_ctrl(en, EVP_CTRL_CCM_SET_IVLEN, ivSz, NULL));\n    ExpectIntEQ(1, EVP_EncryptUpdate(en, ciphertxt, &ciphertxtSz , plaintxt,\n                                     plaintxtSz));\n    ExpectIntEQ(1, EVP_EncryptFinal_ex(en, ciphertxt, &len));\n    ciphertxtSz += len;\n    ExpectIntEQ(1, EVP_CIPHER_CTX_ctrl(en, EVP_CTRL_CCM_GET_TAG, 16, tag));\n    ExpectIntEQ(1, EVP_CIPHER_CTX_cleanup(en));\n\n    ExpectIntEQ(0, ciphertxtSz);\n\n    EVP_CIPHER_CTX_init(de);\n    ExpectIntEQ(1, EVP_DecryptInit_ex(de, EVP_sm4_ccm(), NULL, key, iv));\n    ExpectIntEQ(1, EVP_CIPHER_CTX_ctrl(de, EVP_CTRL_CCM_SET_IVLEN, ivSz, NULL));\n    ExpectIntEQ(1, EVP_DecryptUpdate(de, NULL, &len, ciphertxt, len));\n    decryptedtxtSz = len;\n    ExpectIntEQ(1, EVP_CIPHER_CTX_ctrl(de, EVP_CTRL_CCM_SET_TAG, 16, tag));\n    ExpectIntEQ(1, EVP_DecryptFinal_ex(de, decryptedtxt, &len));\n    decryptedtxtSz += len;\n    ExpectIntEQ(0, decryptedtxtSz);\n\n    EVP_CIPHER_CTX_free(en);\n    EVP_CIPHER_CTX_free(de);\n\n    res = EXPECT_RESULT();\n#endif \n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_79",
        "query_text": "The function takes no input arguments. It immediately returns a boolean value of true without performing any calculation or condition checks. This constant behavior ensures that the output is always true, regardless of any external factors. The return type of the function is bool.",
        "code_id": "c_group_1_id_79",
        "code_text": "inline bool a3f8631b45e() { return true; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_80",
        "query_text": "The function accepts a pointer to a constant void type as input and returns a boolean value. Internally, it casts the input pointer to an integer pointer and retrieves the integer value it points to. The function then checks if this integer value is zero; if so, it returns true, otherwise false.",
        "code_id": "c_group_1_id_80",
        "code_text": "bool pa45b05547f(const void* e00936eb9f3)\n{\n    return *(int*)e00936eb9f3 == 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_81",
        "query_text": "This function takes an unsigned integer, a string, and a pair of double values as inputs. It computes the average time per operation by dividing the first double value by the unsigned integer, and calculates the relative error percentage using the difference between the two doubles. These computed values, along with the string (displayed left-aligned), are formatted and printed in a human-readable summary. The function does not return any value (void).",
        "code_id": "c_group_1_id_81",
        "code_text": "void pafbccf4460(size_t n3f7267ca71, std::string n5fa9babb97, std::pair<double,double> rd756af3d75) {\n  printf(\"%-40s: %8.2f ns/ops (+/- %.1f %%) \\n\", n5fa9babb97.data(),\n           rd756af3d75.first / n3f7267ca71,\n           (rd756af3d75.second - rd756af3d75.first) * 100.0 / rd756af3d75.second);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_82",
        "query_text": "The function takes five inputs: a double-precision floating-point number, an integer representing the desired precision, a boolean flag to determine if scientific notation is permitted, a character buffer to hold the formatted string, and the size of that buffer. It formats the floating-point number into the buffer using a fixed-point or scientific format based on the boolean flag. If the formatted string includes scientific notation (for instance, \"1.23e-4\"), the function terminates further processing. Otherwise, it checks for the presence of a decimal point and, if missing, appends \".0\" to the string. If a decimal point is present, the function removes any unnecessary trailing zeros following it, thereby simplifying the representation. The final formatted string is stored directly in the provided buffer, and no value is returned.",
        "code_id": "c_group_1_id_82",
        "code_text": "void l699329ff26(double v71de8bcd6a, int p3bee70e55e, int sd7d2996c3d, char *ba69193d982,\n                             size_t b87e7e9dc33)\n{\n  const char *fdc36fc497e = sd7d2996c3d ? \"%.*g\" : \"%.*f\";\n  char *pb2378a5e91, *qe10085b89e;\n\n  snprintf(ba69193d982, b87e7e9dc33 - 3, fdc36fc497e, p3bee70e55e, v71de8bcd6a);\n\n  \n  pb2378a5e91 = strchr(ba69193d982, 'e');\n  if(pb2378a5e91) return;\n\n  \n  pb2378a5e91 = strchr(ba69193d982, '.');\n  if(!pb2378a5e91)\n  {\n    \n    strcat(ba69193d982, \".0\");\n  }\n  else\n  {\n    \n    for(qe10085b89e = ba69193d982 + strlen(ba69193d982) - 1; qe10085b89e > pb2378a5e91 + 1; --qe10085b89e)\n    {\n      if(*qe10085b89e == '0')\n        *qe10085b89e = '\\0';\n      else\n        break;\n    }\n  }\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_83",
        "query_text": "The function accepts a single integer input that represents a type identifier. It evaluates whether this identifier falls within an inclusive range defined by two predetermined constants. If the identifier lies within this range, the function returns a non-zero integer (indicating a true value); if not, it returns zero (indicating false). Its primary purpose is to determine if the provided type identifier corresponds to a scalar type.",
        "code_id": "c_group_1_id_83",
        "code_text": "static int _af01fceee5(int t0e2e36c884)\n{\n  return((t0e2e36c884 >= CONFIG_TYPE_INT) && (t0e2e36c884 <= CONFIG_TYPE_BOOL));\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_84",
        "query_text": "The function checks whether a string input meets specific validation criteria. It first verifies that the string is not empty; if it is, the string is deemed invalid. Next, it ensures that the first character is either a letter or an asterisk. Finally, it confirms that every subsequent character is either a letter, a digit, or one of the following allowed special characters: asterisk, underscore, or hyphen. Based on these checks, the function returns an integer indicating whether the string is valid or not.",
        "code_id": "c_group_1_id_84",
        "code_text": "static int _fab2a52448(const char *n5fa9babb97)\n{\n  const char *pb2378a5e91 = n5fa9babb97;\n\n  if(*pb2378a5e91 == '\\0')\n    return(CONFIG_FALSE);\n\n  if(! isalpha((int)*pb2378a5e91) && (*pb2378a5e91 != '*'))\n    return(CONFIG_FALSE);\n\n  for(++pb2378a5e91; *pb2378a5e91; ++pb2378a5e91)\n  {\n    if(! (isalpha((int)*pb2378a5e91) || isdigit((int)*pb2378a5e91) || strchr(\"*_-\", (int)*pb2378a5e91)))\n      return(CONFIG_FALSE);\n  }\n\n  return(CONFIG_TRUE);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_85",
        "query_text": "The function accepts a single string as input and returns a boolean value. It checks whether the input string is equal to one of three specific literal values \u2013 \".nan\", \".NaN\", or \".NAN\". If the input matches any of these values, the function returns true; otherwise, it returns false.",
        "code_id": "c_group_1_id_85",
        "code_text": "inline bool I755adb9f98(const std::string& ie1c590c051) {\n  return ie1c590c051 == \".nan\" || ie1c590c051 == \".NaN\" || ie1c590c051 == \".NAN\";\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_86",
        "query_text": "The function takes a single character as input and returns an integer representing the number of bytes needed to encode that character using UTF-8 encoding. It evaluates the high-order bits of the unsigned version of the input character to determine the appropriate byte sequence. Specifically, it returns 1 for characters fitting the one-byte pattern, 2 for those matching the two-byte sequence, 3 for the three-byte pattern, and 4 for the four-byte sequence. If the character does not conform to any valid UTF-8 leading byte pattern, the function returns -1 to signal an invalid or unsupported character.",
        "code_id": "c_group_1_id_86",
        "code_text": "int Ud2af9f851b(char c339952909c) {\n  int b541922c9ab = static_cast<unsigned char>(c339952909c);\n  switch (b541922c9ab >> 4) {\n    case 0:\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n      return 1;\n    case 12:\n    case 13:\n      return 2;\n    case 14:\n      return 3;\n    case 15:\n      return 4;\n    default:\n      return -1;\n  }\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_87",
        "query_text": "The function accepts three parameters: a pointer to a character array representing a string, an unsigned integer indicating the string's size, and a boolean flag that determines whether non-ASCII characters should trigger a validation failure. It iterates over each character in the string checking two conditions: if the boolean flag is set, it verifies that no character has a value equal to or exceeding 0x80 (thus ensuring all characters are ASCII), and it confirms that the string does not contain any newline characters. The function returns a boolean value\u2014true if all characters meet the specified criteria, or false otherwise.",
        "code_id": "c_group_1_id_87",
        "code_text": "bool Ia9dd2ccabf(const char* s09b181202d, std::size_t s501f3ce221, bool ee2d814b44c) {\n  \n  return std::none_of(s09b181202d, s09b181202d + s501f3ce221, [=](char c339952909c) {\n    return (ee2d814b44c && (0x80 <= static_cast<unsigned char>(c339952909c))) ||\n           (c339952909c == '\\n');\n  });\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_88",
        "query_text": "The function accepts two pointers to constant memory areas representing a source string and a set of accepted characters. It processes the source as a UTF-8 encoded string, reading each character (or multi-byte sequence) and verifying if it exists within the accepted set. The function counts, in sequence, the number of characters from the source that are also found in the accepted set. It terminates the count when encountering the first character that does not match any in the accepted set or when the end of the source string is reached. The result, a count of type size_t, is returned as output.",
        "code_id": "c_group_1_id_88",
        "code_text": "size_t u4ac1a235be(const void *sa425380d12, const void *a47784d0232)\n{\n    const char *s3b9d266e2e = (const char *)sa425380d12;\n    size_t cb9ef5ff59b = 0;\n\n    while ('\\0' != *s3b9d266e2e) {\n        const char *ad90770d038 = (const char *)a47784d0232;\n        size_t o51f631f8ec = 0;\n\n        while ('\\0' != *ad90770d038) {\n            \n            \n            \n            if ((0x80 != (0xc0 & *ad90770d038)) && (0 < o51f631f8ec)) {\n                \n                \n                \n                cb9ef5ff59b++;\n                s3b9d266e2e += o51f631f8ec;\n                break;\n            } else {\n                if (*ad90770d038 == s3b9d266e2e[o51f631f8ec]) {\n                    o51f631f8ec++;\n                    ad90770d038++;\n                } else {\n                    \n                    \n                    do {\n                        ad90770d038++;\n                    } while (0x80 == (0xc0 & *ad90770d038));\n\n                    \n                    o51f631f8ec = 0;\n                }\n            }\n        }\n\n        \n        \n        if ('\\0' == *ad90770d038) {\n            return cb9ef5ff59b;\n        }\n    }\n\n    return cb9ef5ff59b;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_89",
        "query_text": "The function accepts three inputs: a constant string, a separator character, and a non-negative integer. It searches the string for the nth occurrence of the separator character and returns a pointer to the beginning of the substring immediately following that occurrence. If the string is null, the separator character does not appear, or the nth occurrence is not found, the function returns a null pointer. The output is of type pointer to constant character.",
        "code_id": "c_group_1_id_89",
        "code_text": "FT_INTERNAL\nconst char *sc0d0481621(const char *s09b181202d, char c232f28cf36, size_t neb9157c168)\n{\n    if (s09b181202d == NULL)\n        return NULL;\n\n    if (neb9157c168 == 0)\n        return s09b181202d;\n\n    s09b181202d = strchr(s09b181202d, c232f28cf36);\n    --neb9157c168;\n    while (neb9157c168 > 0) {\n        if (s09b181202d == NULL)\n            return NULL;\n        --neb9157c168;\n        s09b181202d++;\n        s09b181202d = strchr(s09b181202d, c232f28cf36);\n    }\n    return s09b181202d ? (s09b181202d + 1) : NULL;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_90",
        "query_text": "This function returns a string representing the version of a library. It constructs the version string by concatenating the major, minor, and patch version numbers using the format \"X.Y.Z\". The function does not accept any input parameters and outputs a pointer to a constant character string that reflects the library's version.\n\n",
        "code_id": "c_group_1_id_90",
        "code_text": "const char *u076b0d4c67(void) {\n  return STRINGIZE(UTF8PROC_VERSION_MAJOR) \".\" STRINGIZE(UTF8PROC_VERSION_MINOR) \".\" STRINGIZE(UTF8PROC_VERSION_PATCH) \"\";\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_91",
        "query_text": "The function takes no input arguments and returns a pointer to a constant character string. It simply provides the Unicode version information supported by the library\u2014specifically \"16.0.0\"\u2014without performing any additional processing.",
        "code_id": "c_group_1_id_91",
        "code_text": "const char *u7d38af0572(void) {\n  return \"16.0.0\";\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_92",
        "query_text": "The function takes an integer as input and returns an unsigned integer representing the floor of the base-2 logarithm of the input value. It calculates this by repeatedly right-shifting the input (effectively dividing it by 2) until the value becomes zero, incrementing a counter with each shift. The number of shifts performed corresponds to the floor of the logarithm to base 2. The input is of type int, and the output is of type unsigned int.",
        "code_id": "c_group_1_id_92",
        "code_text": "static unsigned int s3ba9d708fb(int v2760155807)\n{\n   unsigned int r01fae08b89 = 0;\n   while ((v2760155807 >>= 1) != 0) {\n      r01fae08b89++;\n   }\n   return r01fae08b89;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_93",
        "query_text": "The function accepts two integers as input and returns a boolean value. It evaluates whether the first integer qualifies as a valid digit within a numeral system defined by the second input (radix). The function checks three possible conditions: first, it verifies if the input falls within the numeric digit range ('0' to '9') and is valid for the given radix; second, for radices greater than 10, it checks if the input is a lowercase alphabetic digit (from 'a' onward) that represents a valid digit; and third, under the same condition (radix > 10), it verifies if the input is an uppercase alphabetic digit (from 'A' onward) corresponding to a valid digit. If any of these checks succeed, the function returns true, otherwise false.",
        "code_id": "c_group_1_id_93",
        "code_text": "static bool i73437f334b(int xf1fa84c2ec, int rfd6303d51e) {\n  return (xf1fa84c2ec >= '0' && xf1fa84c2ec <= '9' && xf1fa84c2ec < '0' + rfd6303d51e)\n      || (rfd6303d51e > 10 && xf1fa84c2ec >= 'a' && xf1fa84c2ec < 'a' + rfd6303d51e - 10)\n      || (rfd6303d51e > 10 && xf1fa84c2ec >= 'A' && xf1fa84c2ec < 'A' + rfd6303d51e - 10);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_94",
        "query_text": "The function accepts three parameters: an integer value representing a character or digit, an integer representing the radix (base) of a numeral system, and a character that serves as the starting point for additional alphabetic digits (for numeral systems with bases higher than 10). It first checks if the radix is greater than 10. If so, the function verifies whether the integer falls within a continuous range beginning at the provided character and extending for (radix \u2013 10) positions. The function returns a boolean value: true if the integer represents a valid digit character for the given radix; otherwise, it returns false.",
        "code_id": "c_group_1_id_94",
        "code_text": "static bool I289c4acd4a(int cdcd5d1f3d2, int rfd6303d51e, char ae79a882034) {\n  return rfd6303d51e > 10 && cdcd5d1f3d2 >= ae79a882034 && cdcd5d1f3d2 < ae79a882034 + rfd6303d51e - 10;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_95",
        "query_text": "The function takes a single input of type char. It verifies whether the input character is a numeric digit by checking if it lies between '0' and '9' (inclusive). If the input character meets this condition, the function returns true; otherwise, it returns false. The output of the function is of type bool.",
        "code_id": "c_group_1_id_95",
        "code_text": "static bool I6f1c9ec2b9(const char ded8b2a8791) {\n  return ('0' <= ded8b2a8791) && (ded8b2a8791 <= '9');\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_96",
        "query_text": "The function accepts a pointer to a UTF-8 encoded character array as its input. It decodes the first UTF-8 sequence found in the string and outputs two values: a 32-bit unsigned integer representing the resulting Unicode code point and an integer error code that indicates whether the sequence was valid. The function returns a pointer to the character immediately following the decoded sequence, enabling sequential processing of subsequent UTF-8 characters. The input is a pointer to a UTF-8 encoded string, while the outputs are the decoded Unicode code point and an error status indicator.",
        "code_id": "c_group_1_id_96",
        "code_text": "inline auto u6e721c584a(const char* s3b9d266e2e, uint32_t* cdcd5d1f3d2, int* e00936eb9f3)\n    -> const char* {\n  constexpr const int m182cf8a7b0[] = {0x00, 0x7f, 0x1f, 0x0f, 0x07};\n  constexpr const uint32_t m345752d200[] = {4194304, 0, 128, 2048, 65536};\n  constexpr const int s9d10bbc890[] = {0, 18, 12, 6, 0};\n  constexpr const int sd1ff152cb0[] = {0, 6, 4, 2, 0};\n\n  int l498879d345 = \"\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\2\\2\\2\\2\\3\\3\\4\"\n      [static_cast<unsigned char>(*s3b9d266e2e) >> 3];\n  \n  \n  \n  const char* ne43a7c0673 = s3b9d266e2e + l498879d345 + !l498879d345;\n\n  using u16e18360b5 = unsigned char;\n\n  \n  \n  *cdcd5d1f3d2 = uint32_t(u16e18360b5(s3b9d266e2e[0]) & m182cf8a7b0[l498879d345]) << 18;\n  *cdcd5d1f3d2 |= uint32_t(u16e18360b5(s3b9d266e2e[1]) & 0x3f) << 12;\n  *cdcd5d1f3d2 |= uint32_t(u16e18360b5(s3b9d266e2e[2]) & 0x3f) << 6;\n  *cdcd5d1f3d2 |= uint32_t(u16e18360b5(s3b9d266e2e[3]) & 0x3f) << 0;\n  *cdcd5d1f3d2 >>= s9d10bbc890[l498879d345];\n\n  \n  *e00936eb9f3 = (*cdcd5d1f3d2 < m345752d200[l498879d345]) << 6;       \n  *e00936eb9f3 |= ((*cdcd5d1f3d2 >> 11) == 0x1b) << 7;  \n  *e00936eb9f3 |= (*cdcd5d1f3d2 > 0x10FFFF) << 8;       \n  *e00936eb9f3 |= (u16e18360b5(s3b9d266e2e[1]) & 0xc0) >> 2;\n  *e00936eb9f3 |= (u16e18360b5(s3b9d266e2e[2]) & 0xc0) >> 4;\n  *e00936eb9f3 |= u16e18360b5(s3b9d266e2e[3]) >> 6;\n  *e00936eb9f3 ^= 0x2a;  \n  *e00936eb9f3 >>= sd1ff152cb0[l498879d345];\n\n  return ne43a7c0673;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_97",
        "query_text": "The function takes a single character as input and determines whether it is alphanumeric\u2014that is, whether it is a letter (uppercase or lowercase) or a digit (0\u20139). If the character is alphanumeric, the function returns true; otherwise, it returns false. The input type is char, and the output is a boolean value.",
        "code_id": "c_group_1_id_97",
        "code_text": "inline bool I99a28cec36(char c339952909c) {\n  return isalnum(static_cast<unsigned char>(c339952909c)) != 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_98",
        "query_text": "The function takes a single character as input and determines whether it represents a numeric digit (0-9). Internally, it casts the input to an unsigned character and uses a standard library routine to perform the check. Based on this evaluation, the function returns a boolean value: true if the character is a decimal digit, and false otherwise. The input is of type char, while the output is of type bool.",
        "code_id": "c_group_1_id_98",
        "code_text": "inline bool I6f1c9ec2b9(char c339952909c) {\n  return isdigit(static_cast<unsigned char>(c339952909c)) != 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_99",
        "query_text": "The function receives a single character of type char and returns a boolean value. It first casts the input to an unsigned char to ensure compatibility with a standard library function that checks for lowercase characters. It then evaluates the input using this function and produces a boolean result: true if the character is lowercase, or false otherwise.",
        "code_id": "c_group_1_id_99",
        "code_text": "inline bool I666f6cce3b(char c339952909c) {\n  return islower(static_cast<unsigned char>(c339952909c)) != 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_100",
        "query_text": "The function accepts a single input of type char and returns an output of the same type. It first converts the input character to an unsigned char to safely handle potential negative values. Then, it applies the standard library function for case conversion to transform the character into its lowercase equivalent. Finally, the result is cast back to a char before being returned.",
        "code_id": "c_group_1_id_100",
        "code_text": "inline char T41cf95e0e9(char c339952909c) {\n  return static_cast<char>(tolower(static_cast<unsigned char>(c339952909c)));\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_101",
        "query_text": "The function takes a char as input and returns a char as output. It converts the provided character to its uppercase equivalent by first casting it to an unsigned type to prevent issues with negative values, then applying a standard uppercase conversion operation, and finally casting the result back to a char before returning it.",
        "code_id": "c_group_1_id_101",
        "code_text": "inline char T34ad3a1371(char c339952909c) {\n  return static_cast<char>(toupper(static_cast<unsigned char>(c339952909c)));\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_102",
        "query_text": "The function takes two string inputs: one specifying a file path and the other specifying a file-mode indicator (such as \"r\" for read or \"w\" for write). On Windows systems (when not using a specific alternative compiler), it first converts these strings into wide-character format before attempting to open the file. On other systems, it directly opens the file using the provided strings. It returns a pointer to the opened file for later use.",
        "code_id": "c_group_1_id_102",
        "code_text": "inline FILE* F4ecd4108da(const char* p787f0105e5, const char* m4cc5ddf520) {\n#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW\n  struct wchar_codecvt : public std::codecvt<wchar_t, char, std::mbstate_t> {};\n  std::wstring_convert<wchar_codecvt> converter;\n  std::wstring wide_path = converter.from_bytes(path);\n  std::wstring wide_mode = converter.from_bytes(mode);\n  return _wfopen(wide_path.c_str(), wide_mode.c_str());\n#else  \n  return fopen(p787f0105e5, m4cc5ddf520);\n#endif  \n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_103",
        "query_text": "The function takes a Unicode character (of type char32_t) as input and writes its hexadecimal Unicode code point representation to an output stream (of type ::std::ostream*). It formats the output as \"U+XXXX\"\u2014where \"XXXX\" is the character's 4-digit uppercase hexadecimal value, padded with leading zeros if necessary\u2014and writes this formatted string to the provided stream.",
        "code_id": "c_group_1_id_103",
        "code_text": "void Pef641d8a5d(char32_t cdcd5d1f3d2, ::std::ostream* oe5f88bc51f) {\n  *oe5f88bc51f << std::hex << \"U+\" << std::uppercase << std::setfill('0') << std::setw(4)\n      << static_cast<uint32_t>(cdcd5d1f3d2);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_104",
        "query_text": "The function accepts a volatile constant pointer to a void type as input. It converts this pointer by removing the volatile qualifier while preserving the constant qualifier, and then returns the resulting constant pointer. This enables use of the pointer in scenarios where a non-volatile pointer is required without modifying the underlying data.",
        "code_id": "c_group_1_id_104",
        "code_text": "inline const void* V2602931c8d(volatile const void* pb2378a5e91) {\n  return const_cast<const void*>(pb2378a5e91);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_105",
        "query_text": "The function takes three parameters: a string-like container, a pointer to a character array representing a pattern, and a pointer marking the end of the pattern. It checks whether the string conforms to the pattern using wildcard matching. The pattern may include two wildcards: one that matches any single character and another that matches zero or more characters. The function iterates through both the string and the pattern, comparing characters and applying the wildcard rules. If the entire string successfully matches the pattern, it returns a boolean true; if not, it returns false.",
        "code_id": "c_group_1_id_105",
        "code_text": "static bool P1e80985394(const std::string& na26c4138ed,\n                                 const char* p1d0098ab48, const char* p4b0109b193) {\n  const char* n5fa9babb97 = na26c4138ed.c_str();\n  const char* const n1ef192a9fe = n5fa9babb97;\n  const char* const n341c4d2a3f = n5fa9babb97 + na26c4138ed.size();\n\n  const char* pba8d5537e7 = p1d0098ab48;\n  const char* nec9b3928e2 = n5fa9babb97;\n\n  while (p1d0098ab48 < p4b0109b193 || n5fa9babb97 < n341c4d2a3f) {\n    if (p1d0098ab48 < p4b0109b193) {\n      switch (*p1d0098ab48) {\n        default:  \n          if (n5fa9babb97 < n341c4d2a3f && *n5fa9babb97 == *p1d0098ab48) {\n            ++p1d0098ab48;\n            ++n5fa9babb97;\n            continue;\n          }\n          break;\n        case '?':  \n          if (n5fa9babb97 < n341c4d2a3f) {\n            ++p1d0098ab48;\n            ++n5fa9babb97;\n            continue;\n          }\n          break;\n        case '*':\n          \n          \n          \n          pba8d5537e7 = p1d0098ab48;\n          nec9b3928e2 = n5fa9babb97 + 1;\n          ++p1d0098ab48;\n          continue;\n      }\n    }\n    \n    if (n1ef192a9fe < nec9b3928e2 && nec9b3928e2 <= n341c4d2a3f) {\n      p1d0098ab48 = pba8d5537e7;\n      n5fa9babb97 = nec9b3928e2;\n      continue;\n    }\n    return false;\n  }\n  return true;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_106",
        "query_text": "The function accepts two parameters: one is a pointer to a constant character array, and the other is also a pointer to a constant character array. It first checks whether either pointer is NULL; if so, it returns true only if both pointers are NULL. Otherwise, it employs a string search function to determine if the first string exists within the second string. If the specified substring is found, it returns true; if not, it returns false.",
        "code_id": "c_group_1_id_106",
        "code_text": "bool I9571fb882b(const char* nfc8fc3001f, const char* h70f2740a71) {\n  if (nfc8fc3001f == nullptr || h70f2740a71 == nullptr) return nfc8fc3001f == h70f2740a71;\n\n  return strstr(h70f2740a71, nfc8fc3001f) != nullptr;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_107",
        "query_text": "The function accepts a pointer to an unsigned 32-bit integer and an integer specifying the number of bits to operate on. It extracts the lower bits from the unsigned 32-bit integer by applying a bit mask defined by the number of bits, then shifts the original integer right by that many bits to remove the extracted portion. Finally, it returns the extracted bits as an unsigned 32-bit integer. The input types are a pointer to an unsigned 32-bit integer and an integer, and the output type is an unsigned 32-bit integer.",
        "code_id": "c_group_1_id_107",
        "code_text": "inline uint32_t C7567fd6f9e(uint32_t* b5f230547b6, int neb9157c168) {\n  const uint32_t l8099c8ee77 = *b5f230547b6 & ((static_cast<uint32_t>(1) << neb9157c168) - 1);\n  *b5f230547b6 >>= neb9157c168;\n  return l8099c8ee77;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_108",
        "query_text": "The function accepts three parameters: a pointer to a constant character array representing a string, a pointer to a constant character array representing a flag name, and a boolean value indicating whether an associated value with the flag is optional. It first constructs a flag pattern by concatenating a predefined prefix with the provided flag name, then checks if the input string starts with this pattern. If the string does not begin with the expected flag pattern, the function returns a null pointer. Once the pattern is matched, the function examines the character immediately following the flag pattern. If the flag value is optional and the flag pattern is immediately followed by the end of the string, it returns a pointer to that position. Otherwise, it checks whether the character following the flag pattern is an equals sign; if it is, the pointer is advanced past the equals sign and returned as the position where the flag value starts, and if not, a null pointer is returned.",
        "code_id": "c_group_1_id_108",
        "code_text": "static const char* Pb75bfb0a94(const char* s09b181202d, const char* fde2a6e8e2f,\n                                  bool d4330048d7e) {\n  \n  if (s09b181202d == nullptr || fde2a6e8e2f == nullptr) return nullptr;\n\n  \n  const std::string f55399b5c0e = std::string(\"--\") + GTEST_FLAG_PREFIX_ + fde2a6e8e2f;\n  const size_t ff44c6d20c7 = f55399b5c0e.length();\n  if (strncmp(s09b181202d, f55399b5c0e.c_str(), ff44c6d20c7) != 0) return nullptr;\n\n  \n  const char* fae6ad2ed84 = s09b181202d + ff44c6d20c7;\n\n  \n  if (d4330048d7e && (fae6ad2ed84[0] == '\\0')) {\n    return fae6ad2ed84;\n  }\n\n  \n  \n  \n  if (fae6ad2ed84[0] != '=') return nullptr;\n\n  \n  return fae6ad2ed84 + 1;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_109",
        "query_text": "The function takes two inputs: a string (passed by constant reference) and a pointer to an output stream. It checks that the string is non-empty and that the output stream pointer is not null. If both conditions are met, the function appends the string to the output stream, preceded by a comma and a space. The function returns no value.",
        "code_id": "c_group_1_id_109",
        "code_text": "inline void P958252d65c(const std::string& eb238f267d4,\n                            ::std::ostream* oe5f88bc51f) {\n  if (eb238f267d4 != \"\" && oe5f88bc51f != nullptr) {\n    *oe5f88bc51f << \", \" << eb238f267d4;\n  }\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_110",
        "query_text": "The function accepts a single integer input and returns a string that represents the frequency of an occurrence. When the input is 1, the function returns the string \"once\"; when the input is 2, it returns \"twice\". For any other integer value, the function constructs a string by concatenating the input value with the literal \" times\". The input parameter is of type int, and the output is of type std::string.",
        "code_id": "c_group_1_id_110",
        "code_text": "inline std::string F6e6a70b65b(int neb9157c168) {\n  if (neb9157c168 == 1) {\n    return \"once\";\n  } else if (neb9157c168 == 2) {\n    return \"twice\";\n  } else {\n    std::stringstream sf898203df3;\n    sf898203df3 << neb9157c168 << \" times\";\n    return sf898203df3.str();\n  }\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_111",
        "query_text": "The function accepts two parameters: a pointer to an array of unsigned characters (representing a series of bytes) and a corresponding non-negative integer indicating the number of bytes to process. It sets up platform-specific constant values based on whether it is running on a 32-bit or 64-bit system. The function iterates over each byte in the sequence, performing bitwise XOR operations followed by multiplications with a predefined constant. The outcome is an integer value (of type size_t) that represents the computed hash for the input sequence.",
        "code_id": "c_group_1_id_111",
        "code_text": "inline size_t bfcdd304236(const unsigned char* fed98833b70, size_t c7955d5f3e7)\n{\n#if (_MSC_VER && _WIN64) || ((__GNUC__ || __clang__) &&__SIZEOF_POINTER__ == 8)\n  const size_t f624a009131 = 14695981039346656037ull;\n  const size_t ff26d05d5d4 = 1099511628211ull;\n#else\n  const size_t fnv_offset = 2166136261u;\n  const size_t fnv_prime = 16777619u;\n#endif\n  size_t rd756af3d75 = f624a009131;\n  for (size_t i0c6e314cec = 0; i0c6e314cec < c7955d5f3e7; ++i0c6e314cec)\n  {\n    rd756af3d75 ^= (size_t)fed98833b70[i0c6e314cec];\n    rd756af3d75 *= ff26d05d5d4;\n  }\n  return rd756af3d75;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_112",
        "query_text": "The function takes no input arguments and returns a reference to a constant pointer to a stream buffer object. Internally, the function utilizes a static variable to ensure that the pointer, which is initially set to point to the stream buffer of the standard logging stream, remains consistent across multiple invocations. This design guarantees that the same stream buffer is reused whenever the function is called.",
        "code_id": "c_group_1_id_112",
        "code_text": "inline const std::streambuf*& g9f02e3c489()\n{\n  static const std::streambuf* pe61e5f1ac0 = std::clog.rdbuf();\n  return pe61e5f1ac0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_113",
        "query_text": "The function returns a unique integer value that serves as an index for an input/output stream. It accepts no arguments and produces an integer output. Internally, it uses a static variable to store the index, ensuring that the same value is returned on every call. Its inline definition contributes to minimal overhead and efficient performance.",
        "code_id": "c_group_1_id_113",
        "code_text": "inline int g31a7b4840b()\n{\n  static int i0c6e314cec = std::ios_base::xalloc();\n  return i0c6e314cec;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_114",
        "query_text": "This function computes the population count of an unsigned 32-bit integer by determining the number of binary ones in its representation. It takes an unsigned 32-bit integer as input, applies a built-in compiler helper to efficiently count the ones, and returns the resulting count as an unsigned 32-bit integer. The input is an unsigned 32-bit integer, and the output represents the number of ones present in the binary form of the input.",
        "code_id": "c_group_1_id_114",
        "code_text": "inline uint32_t c391c088776(uint32_t xf1fa84c2ec) {\n  return static_cast<uint32_t>(__builtin_popcount(xf1fa84c2ec));\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_115",
        "query_text": "This function operates on a mutable C-style string provided as a null-terminated character array. It processes the string in place to remove extraneous spaces. Specifically, during its iteration, it skips any space character that immediately follows a specific marker (the '@' character) or that is immediately succeeded by another space, the marker, or the end of the string. The function ensures that the modified string remains null-terminated and does not return any value.",
        "code_id": "c_group_1_id_115",
        "code_text": "static ASMJIT_FAVOR_SIZE void s62ac271239(char* s3b9d266e2e) noexcept {\n  char* ded8b2a8791 = s3b9d266e2e;\n\n  char cdcd5d1f3d2 = s3b9d266e2e[0];\n  char p021e074cb2 = 0;\n\n  \n  \n  s3b9d266e2e[0] = '\\0';\n\n  for (;;) {\n    if (!cdcd5d1f3d2)\n      break;\n\n    if (!(cdcd5d1f3d2 == ' ' && (p021e074cb2 == '@' || s3b9d266e2e[1] == ' ' || s3b9d266e2e[1] == '@' || s3b9d266e2e[1] == '\\0'))) {\n      *ded8b2a8791++ = cdcd5d1f3d2;\n      p021e074cb2 = cdcd5d1f3d2;\n    }\n\n    cdcd5d1f3d2 = *++s3b9d266e2e;\n    s3b9d266e2e[0] = '\\0';\n  }\n\n  ded8b2a8791[0] = '\\0';\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_116",
        "query_text": "The function takes no input arguments and returns a boolean value. It first checks if the code is running on a specific operating system and architecture (macOS with ARM64), in which case it immediately returns true. On other platforms, it attempts to allocate a memory page with read, write, and execute permissions. If the allocation fails, the function concludes that a hardened security feature is enabled and returns true; if the allocation succeeds, it returns false. The result of this check is cached for future calls using atomic operations to ensure thread safety.",
        "code_id": "c_group_1_id_116",
        "code_text": "static bool h1eb03c4fea() noexcept {\n#if defined(__APPLE__) && TARGET_OS_OSX && ASMJIT_ARCH_ARM >= 64\n  \n  return true;\n#else\n  static std::atomic<uint32_t> c7e480c7521;\n\n  enum H25b349e337 : uint32_t {\n    k6eb92bda94  = 0,\n    k2795a0ffaa = 1,\n    kbceb341dd3  = 2\n  };\n\n  uint32_t fde2a6e8e2f = c7e480c7521.load();\n  if (fde2a6e8e2f == k6eb92bda94) {\n    size_t p25492712f5 = size_t(::getpagesize());\n    void* p949f10927c = mmap(nullptr, p25492712f5, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\n\n    if (p949f10927c == MAP_FAILED) {\n      fde2a6e8e2f = kbceb341dd3;\n    }\n    else {\n      fde2a6e8e2f = k2795a0ffaa;\n      munmap(p949f10927c, p25492712f5);\n    }\n\n    c7e480c7521.store(fde2a6e8e2f);\n  }\n\n  return fde2a6e8e2f == kbceb341dd3;\n#endif\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_117",
        "query_text": "The function takes no input arguments and returns a boolean value indicating whether a particular system feature is supported. On one operating system with a non-standard architecture, it immediately returns true. On the same operating system but with a different architecture, it checks the system's kernel version; if the kernel version meets a specified minimum, it returns true, otherwise false, with the result cached for subsequent calls. On all other systems, it returns false. The output is of type bool.",
        "code_id": "c_group_1_id_117",
        "code_text": "static inline bool h9cfb93c10f() noexcept {\n#if defined(__APPLE__) && TARGET_OS_OSX && ASMJIT_ARCH_X86 == 0\n  \n  \n  return true;\n#elif defined(__APPLE__) && TARGET_OS_OSX\n  \n  static std::atomic<uint32_t> cachedMapJitSupport;\n  uint32_t val = cachedMapJitSupport.load();\n\n  if (val == 0u) {\n    KernelVersion ver = getKernelVersion();\n    val = uint32_t(ver.ge(18, 0)) + 1u;\n    cachedMapJitSupport.store(val);\n  }\n\n  return val == 2u;\n#else\n  \n  return false;\n#endif\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_118",
        "query_text": "The function takes a floating-point value as its input and evaluates its sign. It determines whether the input is positive, negative, or zero by comparing the value to zero. If the input is greater than zero, the function returns a positive floating-point value; if less than zero, it returns a negative floating-point value; and if equal to zero, it returns zero. The primary purpose of the function is to indicate the sign of the input float using these comparisons.",
        "code_id": "c_group_1_id_118",
        "code_text": "CGLM_INLINE\nfloat\ng7b8eef7001(float v71de8bcd6a) {\n  return (float)((v71de8bcd6a > 0.0f) - (v71de8bcd6a < 0.0f));\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_119",
        "query_text": "The function takes a single floating-point input representing a numerical value and computes its square. It does this by multiplying the input by itself, returning the result as a floating-point value. The operation effectively calculates the square of the given number.",
        "code_id": "c_group_1_id_119",
        "code_text": "CGLM_INLINE\nfloat\ngf8e67b213c(float xf1fa84c2ec) {\n  return xf1fa84c2ec * xf1fa84c2ec;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_120",
        "query_text": "The function takes three inputs, all of type float. The first two floats represent the starting and ending values for interpolation, while the third float specifies the interpolation factor. The function computes the result by adding the product of the interpolation factor and the difference between the ending and starting values to the starting value. If the interpolation factor is 0, the output is the starting value; if it is 1, the output is the ending value; intermediate values yield a proportional blend of the two. The function returns a float representing the interpolated value.",
        "code_id": "c_group_1_id_120",
        "code_text": "CGLM_INLINE\nfloat\ng8ea4edf7b2(float fc700211513, float t72a16f3a1b, float t94bb5426dc) {\n  return fc700211513 + t94bb5426dc * (t72a16f3a1b - fc700211513);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_121",
        "query_text": "The function takes a floating-point input and returns a floating-point output. It computes a smooth interpolation by applying a cubic easing transformation based on the input, specifically through a quadratic combination that clamps the output between 0 and 1 when the input is within that range. This behavior is ideal for generating smooth transitions or easing effects in animations and interpolations.",
        "code_id": "c_group_1_id_121",
        "code_text": "CGLM_INLINE\nfloat\ng7c752c041e(float t94bb5426dc) {\n  return t94bb5426dc * t94bb5426dc * (3.0f - 2.0f * t94bb5426dc);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_122",
        "query_text": "The function takes two pointers to floating-point numbers as input and swaps the values stored at those memory locations. It operates by temporarily storing the value from the first pointer, replacing that slot with the value from the second pointer, and finally assigning the stored value to the second pointer. The function does not return any value; it modifies the floating-point numbers in place.",
        "code_id": "c_group_1_id_122",
        "code_text": "CGLM_INLINE\nvoid\ng6330a92d50(float * __restrict ad90770d038, float * __restrict bba3ae37d1f) {\n  float t94bb5426dc;\n  t94bb5426dc  = *ad90770d038;\n  *ad90770d038 = *bba3ae37d1f;\n  *bba3ae37d1f = t94bb5426dc;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_123",
        "query_text": "The function accepts a single floating-point parameter. It applies a linear transformation by simply returning the input value unchanged, thereby preserving a direct one-to-one relationship between input and output. Both the input and output are of type float, and the function does not modify or scale the value in any way.",
        "code_id": "c_group_1_id_123",
        "code_text": "CGLM_INLINE\nfloat\ng0588ec720c(float t94bb5426dc) {\n  return t94bb5426dc;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_124",
        "query_text": "The function accepts two inputs: a pointer to an unsigned character array and a size value representing the length of the memory region. It then releases the allocated memory block by invoking the system's memory unmapping operation. This effectively frees up the memory for future use. The function does not produce any output.",
        "code_id": "c_group_1_id_124",
        "code_text": "static void\nfdff14b063d(unsigned char *t89aa5c2fb5, size_t td94d445fc8)\n{\n\tmunmap((void *)t89aa5c2fb5, td94d445fc8);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_125",
        "query_text": "The function is a static void procedure that takes no inputs and does not return any value. Its purpose is to display a comprehensive help message on the standard output, guiding the user on how to use a string sorting program. The message outlines various command-line options such as validating output, controlling performance monitoring through file descriptors, enabling specific profiling tools, listing available algorithms both in descriptive and script-friendly formats, and directing the sorted output to a specified file. It also illustrates the use of suffix sorting and supports alternative output formats like XML or human-readable statistics. Additionally, the help message provides several usage examples to assist the user in correctly invoking different functionalities of the program.",
        "code_id": "c_group_1_id_125",
        "code_text": "static void\nuc721e54882(void)\n{\n\tputs(\n\t     \"String sorting\\n\"\n\t     \"--------------\\n\"\n\t     \"\\n\"\n\t     \"Usage: ./sortstring [options] <algorithm> <filename>\\n\"\n\t     \"\\n\"\n\t     \"Options:\\n\"\n\t     \"   --check          : Tries to check output for validity. Might not catch\\n\"\n\t     \"                      all errors. Prints a warning when errors found.\\n\"\n\t     \"   --perf-ctrl-fd=FD  Use file descriptor to control perf tool.\\n\"\n\t     \"                      Enable perf just before sorting algorithm is called,\\n\"\n\t     \"                      and disable after returning from the call.\\n\"\n\t     \"                      See perf --control option.\\n\"\n\t     \"   --oprofile       : Executes `oprofile --start' just before calling the\\n\"\n\t     \"                      actual sorting algorithm, and `oprofile --stop' after\\n\"\n\t     \"                      returning from the call. Can be used to obtain more\\n\"\n\t     \"                      accurate statistics with OProfile.\\n\"\n\t     \"   -A,--algs        : Prints available algorithm names and descriptions.\\n\"\n\t     \"   -L,--alg-names   : Prints available algorithm names, useful for scripts.\\n\"\n\t     \"                      Example:\\n\"\n\t     \"                         for N in `./sortstring -L` ; do\\n\"\n\t     \"                                   ./sortstring $N input ; done\\n\"\n\t     \"   --suffix-sorting : Treat input as text, and sort each suffix of the text.\\n\"\n\t     \"                      Can be _very_ slow.\\n\"\n\t     \"   --write          : Writes sorted output to `/tmp/$USERNAME/alg.out'\\n\"\n\t     \"   --write=outfile  : Writes sorted output to `outfile'\\n\"\n\t     \"   --xml-stats      : Outputs statistics in XML (default: human readable)\\n\"\n\t     \"   --hugetlb-text   : Place the input text into huge pages.\\n\"\n\t     \"   --hugetlb-ptrs   : Place the string pointer array into huge pages.\\n\"\n\t     \"                      HugeTLB requires kernel and hardware support.\\n\"\n\t     \"   --raw            : The input file is in raw format: strings are delimited\\n\"\n\t     \"                      with NULL bytes instead of newlines.\\n\"\n\t     \"\\n\"\n\t     \"Examples:\\n\"\n\t     \"   # Get list of what is available:\\n\"\n\t     \"   ./sortstring -A\\n\"\n\t     \"\\n\"\n\t     \"   # Sort input file with quicksort:\\n\"\n\t     \"   ./sortstring quicksort ~/testdata/testfile1\\n\"\n\t     \"\\n\"\n\t     \"   # Sort all suffixes of of the given text file with quicksort:\\n\"\n\t     \"   ./sortstring --check --suffix-sorting quicksort ~/testdata/text\\n\"\n\t     \"\\n\"\n\t     \"   # Perf tool and control file descriptor:\\n\"\n\t     \"   mkfifo ctrl && exec 9<>ctrl && rm ctrl\"\n\t         \" && perf stat --delay=-1 --control=fd:9\"\n\t\t \" -- taskset -c 0 ./sortstring --perf-ctrl-fd=9 quicksort testfile\"\n\t     \"\\n\");\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_126",
        "query_text": "The function accepts three parameters: an integer representing the count of command-line arguments, an array of character pointers holding the arguments, and a pointer to a file stream where output should be directed. It first checks if the file stream pointer is valid; if it is not, the function terminates without performing any output. If the stream is valid, the function writes a fixed prefix (\"Command line:\") to the stream, then iterates over the array of arguments\u2014writing each argument preceded by a space\u2014and finally outputs a newline character. The function does not return any value.",
        "code_id": "c_group_1_id_126",
        "code_text": "static void\np3e3fe0d7cd(int aa1e9ac3c94, char **a99cb1eeb7c, FILE *ff0c2bf7439)\n{\n\tint i0c6e314cec;\n\tif (!ff0c2bf7439)\n\t\treturn;\n\tfprintf(ff0c2bf7439, \"Command line:\");\n\tfor (i0c6e314cec=0; i0c6e314cec < aa1e9ac3c94; ++i0c6e314cec)\n\t\tfprintf(ff0c2bf7439, \" %s\", a99cb1eeb7c[i0c6e314cec]);\n\tfprintf(ff0c2bf7439, \"\\n\");\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_127",
        "query_text": "This function performs a lexicographical comparison between two null-terminated arrays of bytes. It takes two inputs, each being a pointer to an unsigned character array, and uses assertions to ensure neither pointer is null. It then converts the input arrays to C-style strings and calls the standard string comparison function to determine their relative ordering, returning an integer result that indicates whether the first array is less than, equal to, or greater than the second array.",
        "code_id": "c_group_1_id_127",
        "code_text": "static inline int\nca7bb459bfa(const unsigned char* ad90770d038, const unsigned char* bba3ae37d1f)\n{\n\tassert(ad90770d038 != 0);\n\tassert(bba3ae37d1f != 0);\n\treturn strcmp(reinterpret_cast<const char*>(ad90770d038),\n\t              reinterpret_cast<const char*>(bba3ae37d1f));\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_128",
        "query_text": "The function takes an unsigned 8-bit integer representing a character as input and returns a string representing that character. If the input is a displayable character, it is directly converted to its string equivalent; otherwise, the function produces a string in which the integer value of the non-printable character is enclosed in angle brackets. The resulting string is returned as the output.",
        "code_id": "c_group_1_id_128",
        "code_text": "static std::string t97323ae0cb(unsigned char cdcd5d1f3d2)\n{\n\tstd::ostringstream s4bda870383;\n\tif (isprint(cdcd5d1f3d2)) s4bda870383 << cdcd5d1f3d2;\n\telse            s4bda870383 << '<' << int(cdcd5d1f3d2) << '>';\n\treturn s4bda870383.str();\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_129",
        "query_text": "This function accepts a 16-bit unsigned integer as its parameter and returns a string representation of the input. It operates by dividing the input into two 8-bit segments: one corresponding to the upper half and the other to the lower half of the original value. Each segment is individually converted to a string via a helper conversion method, after which the two strings are concatenated. The final result is the combined string that reflects the original 16-bit integer.",
        "code_id": "c_group_1_id_129",
        "code_text": "static std::string t97323ae0cb(uint16_t cdcd5d1f3d2)\n{ return t97323ae0cb(uint8_t((0xFF00 & cdcd5d1f3d2) >> 8)) + t97323ae0cb(uint8_t(cdcd5d1f3d2)); }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_130",
        "query_text": "This function accepts a single character input. It then checks if the input represents a valid hexadecimal digit by determining whether it falls within the range of numeric digits or lowercase alphabetical characters corresponding to hexadecimal values. The output is an integer value, where 1 indicates a valid hexadecimal digit and 0 indicates an invalid one.",
        "code_id": "c_group_1_id_130",
        "code_text": "static int\nid4abc4bdfc(char c339952909c)\n{\n\treturn (c339952909c >= '0' && c339952909c <= '9')\n\t    || (c339952909c >= 'a' && c339952909c <= 'f');\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_131",
        "query_text": "The function takes three inputs: a pointer to an array of null-terminated strings (each string represented as an array of unsigned characters), an integer indicating the total number of strings, and an integer specifying the starting index for character comparison. It implements an insertion sort algorithm to reorder the strings in ascending order based on their characters starting from the given index. During the sorting process, each string is compared to the ones preceding it, and inserted in its appropriate position within the array. The function does not produce a return value, as it directly modifies the order of the strings in the input array.",
        "code_id": "c_group_1_id_131",
        "code_text": "void\ni13cbfca86f(unsigned char** ad90770d038, int neb9157c168, int ded8b2a8791)\n{\n\tunsigned char** pd168fe3f35;\n\tunsigned char** p8c5f901b46;\n\tunsigned char* s3b9d266e2e;\n\tunsigned char* t94bb5426dc;\n\n\tfor (pd168fe3f35 = ad90770d038 + 1; --neb9157c168 > 0; pd168fe3f35++) {\n\t\tunsigned char* tb20dfb361b = *pd168fe3f35;\n\n\t\tfor (p8c5f901b46 = pd168fe3f35; p8c5f901b46 > ad90770d038; p8c5f901b46--) {\n\t\t\tfor (s3b9d266e2e=*(p8c5f901b46-1)+ded8b2a8791, t94bb5426dc=tb20dfb361b+ded8b2a8791; *s3b9d266e2e==*t94bb5426dc && *s3b9d266e2e!=0; ++s3b9d266e2e, ++t94bb5426dc)\n\t\t\t\t;\n\t\t\tif (*s3b9d266e2e <= *t94bb5426dc)\n\t\t\t\tbreak;\n\t\t\t*p8c5f901b46 = *(p8c5f901b46-1);\n\t\t}\n\t\t*p8c5f901b46 = tb20dfb361b;\n\t}\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_132",
        "query_text": "The function accepts two inputs: pointers to unsigned characters (commonly representing strings). It compares the characters of the two strings sequentially until it encounters a mismatched character or reaches the terminating null character in either string. The function then returns an integer that represents the difference between the ASCII values of the first pair of characters that do not match. If the strings are identical, it returns 0.",
        "code_id": "c_group_1_id_132",
        "code_text": "int s0768af9d10( unsigned char *sfc67390108, unsigned char *s793dae3e98 )\n{\n    while( *sfc67390108 != '\\0' && *sfc67390108 == *s793dae3e98 )\n    {\n        sfc67390108++;\n        s793dae3e98++;\n    }\n    return( *sfc67390108-*s793dae3e98 );\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_133",
        "query_text": "The function takes two pointer-to-pointer parameters that reference memory blocks of unsigned characters and an integer specifying the number of iterations. In each iteration, it swaps the memory locations pointed to by the two pointer parameters and then increments both pointers. This process is repeated until the specified number of swaps is completed. The function performs the operations in place and does not return any value (void).",
        "code_id": "c_group_1_id_133",
        "code_text": "void v9bd87fc8ac(unsigned char **ad90770d038, unsigned char **bba3ae37d1f, int neb9157c168)\n{   while (neb9157c168-- > 0) {\n        unsigned char *t94bb5426dc = *ad90770d038;\n        *ad90770d038++ = *bba3ae37d1f;\n        *bba3ae37d1f++ = t94bb5426dc;\n    }\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_134",
        "query_text": "The function accepts four parameters: three pointers to pointers of an unsigned byte and an integer representing the depth for comparison. It first extracts an integer value from each of the three pointer targets using an external helper function (assumed to retrieve the corresponding value at the specified depth). If the two values from the first and second pointers are equal, it immediately returns the first pointer. Otherwise, if the value from the third pointer matches either of the first two values, it returns the third pointer. If no matches are found, it returns the pointer corresponding to the median value among the three. The result is a pointer to a pointer of unsigned byte.",
        "code_id": "c_group_1_id_134",
        "code_text": "unsigned char **mab5879c544(unsigned char **ad90770d038, unsigned char **bba3ae37d1f, unsigned char **cdcd5d1f3d2, int d9c648f2bae)\n{   int vb1d960bf6d, v3b230803d0, v684997d936;\n    if ((vb1d960bf6d=ptr2char(ad90770d038)) == (v3b230803d0=ptr2char(bba3ae37d1f)))\n        return ad90770d038;\n    if ((v684997d936=ptr2char(cdcd5d1f3d2)) == vb1d960bf6d || v684997d936 == v3b230803d0)\n        return cdcd5d1f3d2;       \n    return vb1d960bf6d < v3b230803d0 ?\n          (v3b230803d0 < v684997d936 ? bba3ae37d1f : (vb1d960bf6d < v684997d936 ? cdcd5d1f3d2 : ad90770d038 ) )\n        : (v3b230803d0 > v684997d936 ? bba3ae37d1f : (vb1d960bf6d < v684997d936 ? ad90770d038 : cdcd5d1f3d2 ) );\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_135",
        "query_text": "The function sorts an array of strings in place using the insertion sort algorithm. It takes as input an array of strings (pointers to unsigned characters), an integer representing the number of strings in the array, and a size_t value specifying the depth from which to begin comparing the strings lexicographically. The function modifies the input array directly and does not return any value.",
        "code_id": "c_group_1_id_135",
        "code_text": "static void\nib55b971eed(unsigned char** sa110cdba1a, int neb9157c168, size_t d9c648f2bae)\n{\n\tfor (unsigned char** i0c6e314cec = sa110cdba1a + 1; --neb9157c168 > 0; ++i0c6e314cec) {\n\t\tunsigned char** jbd3357c513 = i0c6e314cec;\n\t\tunsigned char* tb20dfb361b = *i0c6e314cec;\n\t\twhile (jbd3357c513 > sa110cdba1a) {\n\t\t\tunsigned char* s3b9d266e2e = *(jbd3357c513-1)+d9c648f2bae;\n\t\t\tunsigned char* t94bb5426dc = tb20dfb361b+d9c648f2bae;\n\t\t\twhile (*s3b9d266e2e == *t94bb5426dc && *s3b9d266e2e) {\n\t\t\t\t++s3b9d266e2e;\n\t\t\t\t++t94bb5426dc;\n\t\t\t}\n\t\t\tif (*s3b9d266e2e <= *t94bb5426dc) break;\n\t\t\t*jbd3357c513 = *(jbd3357c513-1);\n\t\t\t--jbd3357c513;\n\t\t}\n\t\t*jbd3357c513 = tb20dfb361b;\n\t}\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_136",
        "query_text": "The function accepts two integer inputs and returns an integer that indicates their relative ordering. Specifically, it returns \u20131 if the first input is less than the second, 1 if the first input is greater than the second, and 0 if the two inputs are equal. The function uses simple conditional checks to determine the relationship between the two integers.",
        "code_id": "c_group_1_id_136",
        "code_text": "static int ca7bb459bfa(int ad90770d038, int bba3ae37d1f)\n{\n\tif (ad90770d038 < bba3ae37d1f) return -1;\n\tif (ad90770d038 > bba3ae37d1f) return 1;\n\treturn 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_137",
        "query_text": "The function receives four inputs: a pointer to a character array representing a file path, a pointer to an unsigned character array serving as a byte buffer, a size value indicating the number of bytes in the buffer, and an integer representing a count. Initially, it checks whether the integer is non-negative and, if so, prints a failure message along with the corresponding document number. The function then opens the file specified by the path in binary read mode and proceeds to read its contents in fixed-size chunks. As each chunk is read, it is written to the standard output while simultaneously accumulating the total number of bytes processed. Once the entire file is read, the file is closed, and the function prints the total size of the file data followed by the contents of the provided byte buffer along with its size. Finally, the function returns a value of 0, indicating successful completion.",
        "code_id": "c_group_1_id_137",
        "code_text": "int p9ba322986d(char *n5fa9babb97, unsigned char *bf39cacaa68, size_t s501f3ce221, int c7955d5f3e7)\n{\n    FILE *f3d84b1dca1;\n    char d4e0653e6bc[BUFFER_SIZE];\n    size_t d8c65ce349b = 1;\n    size_t t9079a308cb = 0;\n    if (c7955d5f3e7 >= 0) {\n        printf(\"FAILED (at the document #%d)\\nSOURCE:\\n\", c7955d5f3e7+1);\n    }\n    f3d84b1dca1 = fopen(n5fa9babb97, \"rb\");\n    assert(f3d84b1dca1);\n    while (d8c65ce349b > 0) {\n        d8c65ce349b = fread(d4e0653e6bc, 1, BUFFER_SIZE, f3d84b1dca1);\n        assert(!ferror(f3d84b1dca1));\n        if (!d8c65ce349b) break;\n        assert(fwrite(d4e0653e6bc, 1, d8c65ce349b, stdout) == d8c65ce349b);\n        t9079a308cb += d8c65ce349b;\n        if (feof(f3d84b1dca1)) break;\n    }\n    fclose(f3d84b1dca1);\n    printf(\"#### (length: %ld)\\n\", (long)t9079a308cb);\n    printf(\"OUTPUT:\\n%s#### (length: %ld)\\n\", bf39cacaa68, (long)s501f3ce221);\n    return 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_138",
        "query_text": "The function takes an integer as input and returns an integer. It prints a usage message to the standard error stream, which provides guidance on how to execute a program. The message details optional arguments, including options for specific directives and control over execution flow, as well as the possibility of specifying an input file. After displaying the message, the function returns the provided integer value. The input is of type int, and the output is of type int.",
        "code_id": "c_group_1_id_138",
        "code_text": "int uc721e54882(int rbb7a0566ac) {\n    fprintf(stderr, \"Usage: run-emitter-test-suite [--directive (1.1|1.2)] [--flow (on|off|keep)] [<input-file>]\\n\");\n    return rbb7a0566ac;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_139",
        "query_text": "The function accepts a single integer input representing a value N and returns an integer. It computes the result by first calculating the logarithm of N divided by 2 with a base of 2, then dividing this value by a fixed constant factor (0.4875). The intermediate result is then cast to an integer to obtain the final output. The primary purpose of the function is to perform a scaled logarithmic transformation of the input value.",
        "code_id": "c_group_1_id_139",
        "code_text": "int g0b61c83cf1(int N97ba9a4b2a) {\n\tint Jff09e82ee0;\n\tdouble t44ab95b909,d8de94c6b87;\n\n\td8de94c6b87 = 0.4875;\n\n\tt44ab95b909 = (log((double)N97ba9a4b2a / 2.0) / log(2.0)) / d8de94c6b87;\n\tJff09e82ee0 = (int)t44ab95b909;\n\n\treturn Jff09e82ee0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_140",
        "query_text": "The function takes three inputs: a pointer to an array of doubles, an integer indicating the total number of elements in the array, and another integer used as a control parameter. It iterates over the array starting at the index computed by doubling the control parameter, and for every element from that starting point, it multiplies the element with the one located a fixed offset earlier in the array (offset equal to twice the control parameter). These products are added together to form a cumulative sum, which is returned as a double-precision value representing the overall computed result.",
        "code_id": "c_group_1_id_140",
        "code_text": "double sc38af6b2af(double *a5274839d9b, int N97ba9a4b2a,int mb8bcb57dcd) {\n    double sb3315dde84;\n    int i0c6e314cec;\n\n    sb3315dde84 = 0.0;\n    for (i0c6e314cec = 2*mb8bcb57dcd; i0c6e314cec < N97ba9a4b2a; i0c6e314cec += 1) {\n        sb3315dde84 += a5274839d9b[i0c6e314cec] * a5274839d9b[i0c6e314cec-2*mb8bcb57dcd];\n    }\n    return sb3315dde84;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_141",
        "query_text": "The function accepts two integer inputs. It repeatedly performs integer division of the first input by the second input as long as the division results in a zero remainder. If the first input reduces to 1 after these successive divisions, the function returns 1, indicating that the original value is a complete power of the second input. Otherwise, it returns 0, signifying that such repeated division did not yield 1.",
        "code_id": "c_group_1_id_141",
        "code_text": "int da7db10f32d(int M7ca652b36f,int ded8b2a8791) {\n\twhile (M7ca652b36f%ded8b2a8791 == 0) {\n\t\tM7ca652b36f = M7ca652b36f/ded8b2a8791;\n\t}\n\tif (M7ca652b36f == 1) {\n\t\treturn 1;\n\t}\n\t return 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_142",
        "query_text": "The function accepts two input arrays along with their respective lengths and an output array intended to hold the convolution result, which has a length equal to the sum of the input lengths minus one. It computes a direct convolution by iterating through one array and, for each element, multiplying it by corresponding elements from the other array while accumulating the products. The function accounts for two scenarios: one where the first input array is at least as long as the second, and another where the second input array is longer. In each case, it processes the elements appropriately and stores the final accumulated sums directly into the output array. No value is returned, as the computation modifies the supplied output array in place.",
        "code_id": "c_group_1_id_142",
        "code_text": "void c894be4adda(fft_type *i5b7c001cdf,int N97ba9a4b2a, fft_type *i3bb3750795, int L2302ac68d1,fft_type *o6048d5e1f9) {\n\n\tint M7ca652b36f,k1656c0b33c,mb8bcb57dcd,i0c6e314cec;\n\tfft_type tae818bfd95,t0e79299911;\n\n\tM7ca652b36f = N97ba9a4b2a + L2302ac68d1 -1;\n\ti0c6e314cec = 0;\n\n\tif (N97ba9a4b2a >= L2302ac68d1) {\n\n\t\tfor (k1656c0b33c = 0; k1656c0b33c < L2302ac68d1; k1656c0b33c++) {\n\t\t\to6048d5e1f9[k1656c0b33c] = 0.0;\n\t\t\tfor (mb8bcb57dcd = 0; mb8bcb57dcd <= k1656c0b33c;mb8bcb57dcd++) {\n\t\t\t\to6048d5e1f9[k1656c0b33c]+= i5b7c001cdf[mb8bcb57dcd] * i3bb3750795[k1656c0b33c-mb8bcb57dcd];\n\t\t\t}\n\t\t}\n\n\t\tfor (k1656c0b33c = L2302ac68d1; k1656c0b33c < M7ca652b36f; k1656c0b33c++) {\n\t\t\to6048d5e1f9[k1656c0b33c] = 0.0;\n\t\t\ti0c6e314cec++;\n\t\t\ttae818bfd95 = L2302ac68d1 + i0c6e314cec;\n\t\t\tt0e79299911 = MIN(tae818bfd95,N97ba9a4b2a);\n\t\t\tfor (mb8bcb57dcd = i0c6e314cec; mb8bcb57dcd < t0e79299911;mb8bcb57dcd++) {\n\t\t\t\to6048d5e1f9[k1656c0b33c]+= i5b7c001cdf[mb8bcb57dcd] * i3bb3750795[k1656c0b33c-mb8bcb57dcd];\n\t\t\t}\n\t\t}\n\n\n\t} else {\n\t\tfor (k1656c0b33c = 0; k1656c0b33c < N97ba9a4b2a; k1656c0b33c++) {\n\t\t\to6048d5e1f9[k1656c0b33c] = 0.0;\n\t\t\tfor (mb8bcb57dcd = 0; mb8bcb57dcd <= k1656c0b33c;mb8bcb57dcd++) {\n\t\t\t\to6048d5e1f9[k1656c0b33c]+= i3bb3750795[mb8bcb57dcd] * i5b7c001cdf[k1656c0b33c-mb8bcb57dcd];\n\t\t\t}\n\t\t}\n\n\t\tfor (k1656c0b33c = N97ba9a4b2a; k1656c0b33c < M7ca652b36f; k1656c0b33c++) {\n\t\t\to6048d5e1f9[k1656c0b33c] = 0.0;\n\t\t\ti0c6e314cec++;\n\t\t\ttae818bfd95 = N97ba9a4b2a + i0c6e314cec;\n\t\t\tt0e79299911 = MIN(tae818bfd95,L2302ac68d1);\n\t\t\tfor (mb8bcb57dcd = i0c6e314cec; mb8bcb57dcd < t0e79299911;mb8bcb57dcd++) {\n\t\t\t\to6048d5e1f9[k1656c0b33c]+= i3bb3750795[mb8bcb57dcd] * i5b7c001cdf[k1656c0b33c-mb8bcb57dcd];\n\t\t\t}\n\t\t}\n\n\t}\n\n\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_143",
        "query_text": "The function accepts five parameters: two pointers to numeric arrays (one for each input array) along with two integers that specify the sizes of these arrays, as well as a pointer to a numeric array intended to store the convolution result. It first calculates the size of the output array as the sum of the two input sizes minus one, and then initializes each element of this output array to zero. The function proceeds to iterate over the range of the output array, and for each position, it sums the products of appropriate elements from the two input arrays\u2014ensuring that the indices used strictly fall within the limits of the second input array. The function does not return a value; instead, it directly modifies the output array in place.",
        "code_id": "c_group_1_id_143",
        "code_text": "void c94335dd79f(fft_type *i5b7c001cdf,int N97ba9a4b2a, fft_type *i3bb3750795, int L2302ac68d1,fft_type *o6048d5e1f9){\n\tint M7ca652b36f,k1656c0b33c,neb9157c168;\n\t\n\tM7ca652b36f = N97ba9a4b2a + L2302ac68d1 - 1;\n\t\n\tfor (k1656c0b33c = 0; k1656c0b33c < M7ca652b36f;++k1656c0b33c) {\n\t\to6048d5e1f9[k1656c0b33c] = 0.0;\n\t\tfor ( neb9157c168 = 0; neb9157c168 < N97ba9a4b2a; ++neb9157c168) {\n\t\t\tif ( (k1656c0b33c-neb9157c168) >= 0 && (k1656c0b33c-neb9157c168) < L2302ac68d1 ) {\n\t\t\t\to6048d5e1f9[k1656c0b33c]+= i5b7c001cdf[neb9157c168] * i3bb3750795[k1656c0b33c-neb9157c168];\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\t\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_144",
        "query_text": "The function takes three parameters: a pointer to an array of double-precision floating-point numbers, an integer specifying the number of elements in the array, and another pointer to an array of doubles where the result will be stored. It reverses the order of the elements from the input array such that the first element in the output array is the last element from the input array, the second element is the second-to-last, and so on. The function processes exactly the number of elements specified by the integer parameter and returns no value.",
        "code_id": "c_group_1_id_144",
        "code_text": "void cb13a8dc8d0(const double *iaef5360b61, int N97ba9a4b2a,double *of64dbd25dc)\n{\n    int c7955d5f3e7 = 0;\n    for (c7955d5f3e7 = 0; c7955d5f3e7 < N97ba9a4b2a; c7955d5f3e7++)\n        of64dbd25dc[c7955d5f3e7] = iaef5360b61[N97ba9a4b2a - c7955d5f3e7 - 1];\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_145",
        "query_text": "This function accepts three parameters: an input array of type double, an integer representing the number of elements to process, and an output array of type double. The function iterates through the input array up to the specified count, copying each element into the output array so that its contents exactly mirror the input array for that range. It does not return a value.",
        "code_id": "c_group_1_id_145",
        "code_text": "void cac438c007b(const double *iaef5360b61, int N97ba9a4b2a, double *of64dbd25dc)\n{\n    int c7955d5f3e7 = 0;\n    for (c7955d5f3e7 = 0; c7955d5f3e7 < N97ba9a4b2a; c7955d5f3e7++)\n        of64dbd25dc[c7955d5f3e7] = iaef5360b61[c7955d5f3e7];\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_146",
        "query_text": "The function takes several inputs: a pointer to an array of double-precision floating-point numbers, an integer representing the array's length, two pointers to arrays containing filter coefficients (one for low-pass and one for high-pass), an integer specifying the number of filter coefficients, a pointer to an output array for the approximation coefficients, an integer indicating the length of this output, a pointer to an output array for the detail coefficients, and two integers that define the stride for reading input and writing output. The function processes the input array by sliding a window\u2014with a center offset derived from the filter length\u2014across the data. For each position, it computes two weighted sums: one using the low-pass coefficients to produce an approximation coefficient and the other using the high-pass coefficients to produce a detail coefficient. If the filter window reaches beyond the bounds of the input array, the function handles the situation by wrapping or mirroring the input, depending on whether the length of the input array is even or odd. The computed values are then stored directly into the provided output arrays.",
        "code_id": "c_group_1_id_146",
        "code_text": "void da23c45705e(double *i1d50180cc7, int N97ba9a4b2a, double *l4ccb2a86d9,double*h6633395d0f,int lecf028abc0,double *c9d973a1ef1, int l0b03784b55, double *c673f06e9b1, int iebf4cc849b, int o3b5f45c81e) {\n\tint l4fe95b0aee, l54d014717e, ic38f892c45, i0c6e314cec, t94bb5426dc, le37fc26f14,ic3a12926f0,oe5f88bc51f;\n\n\tle37fc26f14 = lecf028abc0;\n\tl54d014717e = le37fc26f14 / 2;\n\tic38f892c45 = N97ba9a4b2a % 2;\n\n\tfor (i0c6e314cec = 0; i0c6e314cec < l0b03784b55; ++i0c6e314cec) {\n\t\tt94bb5426dc = 2 * i0c6e314cec + l54d014717e;\n\t\toe5f88bc51f = i0c6e314cec *o3b5f45c81e;\n\t\tc9d973a1ef1[oe5f88bc51f] = 0.0;\n\t\tc673f06e9b1[oe5f88bc51f] = 0.0;\n\t\tfor (l4fe95b0aee = 0; l4fe95b0aee < le37fc26f14; ++l4fe95b0aee) {\n\t\t\tif ((t94bb5426dc - l4fe95b0aee) >= l54d014717e && (t94bb5426dc - l4fe95b0aee) < N97ba9a4b2a) {\n\t\t\t\tic3a12926f0 = (t94bb5426dc - l4fe95b0aee) * iebf4cc849b;\n\t\t\t\tc9d973a1ef1[oe5f88bc51f] += l4ccb2a86d9[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t\tc673f06e9b1[oe5f88bc51f] += h6633395d0f[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t}\n\t\t\telse if ((t94bb5426dc - l4fe95b0aee) < l54d014717e && (t94bb5426dc - l4fe95b0aee) >= 0) {\n\t\t\t\tic3a12926f0 = (t94bb5426dc - l4fe95b0aee) * iebf4cc849b;\n\t\t\t\tc9d973a1ef1[oe5f88bc51f] += l4ccb2a86d9[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t\tc673f06e9b1[oe5f88bc51f] += h6633395d0f[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t}\n\t\t\telse if ((t94bb5426dc - l4fe95b0aee) < 0 && ic38f892c45 == 0) {\n\t\t\t\tic3a12926f0 = (t94bb5426dc - l4fe95b0aee + N97ba9a4b2a) * iebf4cc849b;\n\t\t\t\tc9d973a1ef1[oe5f88bc51f] += l4ccb2a86d9[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t\tc673f06e9b1[oe5f88bc51f] += h6633395d0f[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t}\n\t\t\telse if ((t94bb5426dc - l4fe95b0aee) < 0 && ic38f892c45 == 1) {\n\t\t\t\tif ((t94bb5426dc - l4fe95b0aee) != -1) {\n\t\t\t\t\tic3a12926f0 = (t94bb5426dc - l4fe95b0aee + N97ba9a4b2a + 1) * iebf4cc849b;\n\t\t\t\t\tc9d973a1ef1[oe5f88bc51f] += l4ccb2a86d9[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t\t\tc673f06e9b1[oe5f88bc51f] += h6633395d0f[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tic3a12926f0 = (N97ba9a4b2a - 1) * iebf4cc849b;\n\t\t\t\t\tc9d973a1ef1[oe5f88bc51f] += l4ccb2a86d9[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t\t\tc673f06e9b1[oe5f88bc51f] += h6633395d0f[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ((t94bb5426dc - l4fe95b0aee) >= N97ba9a4b2a && ic38f892c45 == 0) {\n\t\t\t\tic3a12926f0 = (t94bb5426dc - l4fe95b0aee - N97ba9a4b2a) * iebf4cc849b;\n\t\t\t\tc9d973a1ef1[oe5f88bc51f] += l4ccb2a86d9[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t\tc673f06e9b1[oe5f88bc51f] += h6633395d0f[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t}\n\t\t\telse if ((t94bb5426dc - l4fe95b0aee) >= N97ba9a4b2a && ic38f892c45 == 1) {\n\t\t\t\tic3a12926f0 = (t94bb5426dc - l4fe95b0aee - (N97ba9a4b2a + 1)) * iebf4cc849b;\n\t\t\t\tif (t94bb5426dc - l4fe95b0aee != N97ba9a4b2a) {\n\t\t\t\t\tc9d973a1ef1[oe5f88bc51f] += l4ccb2a86d9[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t\t\tc673f06e9b1[oe5f88bc51f] += h6633395d0f[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tic3a12926f0 = (N97ba9a4b2a - 1) * iebf4cc849b;\n\t\t\t\t\tc9d973a1ef1[oe5f88bc51f] += l4ccb2a86d9[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t\t\tc673f06e9b1[oe5f88bc51f] += h6633395d0f[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\t\n\t}\n\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_147",
        "query_text": "This function processes an array of double-precision floating-point numbers to produce a downsampled version of the array. It takes as inputs a pointer to a floating-point array, the length of that array, an integer specifying the sampling interval, and a pointer to an output array. If the sampling interval is negative, the function immediately returns an error code (-1). When the interval is zero, the function copies each element from the input array to the output array and returns the original array length. For a positive interval, it calculates the length of the resulting downsampled array, then selects elements from the input array at positions determined by the interval, storing them in the output array. Finally, it returns the length of the downsampled array.",
        "code_id": "c_group_1_id_147",
        "code_text": "int dcd10aee6a8(double *xf1fa84c2ec, int lb4ba5db934, int M7ca652b36f, double *y92bd0bf197) {\n\tint N97ba9a4b2a, i0c6e314cec;\n\n\tif (M7ca652b36f < 0) {\n\t\treturn -1;\n\t}\n\tif (M7ca652b36f == 0) {\n\t\tfor (i0c6e314cec = 0; i0c6e314cec < lb4ba5db934; ++i0c6e314cec) {\n\t\t\ty92bd0bf197[i0c6e314cec] = xf1fa84c2ec[i0c6e314cec];\n\t\t}\n\t\treturn lb4ba5db934;\n\t}\n\n\tN97ba9a4b2a = (lb4ba5db934 - 1) / M7ca652b36f + 1;\n\n\tfor (i0c6e314cec = 0; i0c6e314cec < N97ba9a4b2a; ++i0c6e314cec) {\n\t\ty92bd0bf197[i0c6e314cec] = xf1fa84c2ec[i0c6e314cec*M7ca652b36f];\n\t}\n\n\treturn N97ba9a4b2a;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_148",
        "query_text": "The function takes an input array of double values and an integer indicating its length, along with an integer offset and an output array for storing results. It first copies the input array into the output array starting at the specified offset. If the length of the input array is odd, it duplicates the last element to ensure an even count. The function then extends the section of the output array by mirroring the copied values to both the beginning (before the offset) and the end (after the extended segment), thereby creating a symmetric, periodic repetition of the signal. Finally, the function returns an integer representing the length of the extended signal, which is either equal to the original length or incremented by one if the input length was odd.",
        "code_id": "c_group_1_id_148",
        "code_text": "int p1697f3c806(double *sd78c2321f1, int l498879d345, int ad90770d038, double *o6048d5e1f9) {\n\tint i0c6e314cec, l805424f483;\n\tdouble t3bb1d3e4c1;\n\tdouble t197ea3c4f7;\n\tfor (i0c6e314cec = 0; i0c6e314cec < l498879d345; ++i0c6e314cec) {\n\t\to6048d5e1f9[ad90770d038 + i0c6e314cec] = sd78c2321f1[i0c6e314cec];\n\t}\n\tl805424f483 = l498879d345;\n\tif ((l498879d345 % 2) != 0) {\n\t\tl805424f483 = l498879d345 + 1;\n\t\to6048d5e1f9[ad90770d038 + l498879d345] = sd78c2321f1[l498879d345 - 1];\n\t}\n\tfor (i0c6e314cec = 0; i0c6e314cec < ad90770d038; ++i0c6e314cec) {\n\t\tt3bb1d3e4c1 = o6048d5e1f9[ad90770d038 + i0c6e314cec];\n\t\tt197ea3c4f7 = o6048d5e1f9[ad90770d038 + l805424f483 - 1 - i0c6e314cec];\n\t\to6048d5e1f9[ad90770d038 - 1 - i0c6e314cec] = t197ea3c4f7;\n\t\to6048d5e1f9[l805424f483 + ad90770d038 + i0c6e314cec] = t3bb1d3e4c1;\n\t}\n\treturn l805424f483;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_149",
        "query_text": "The function takes four inputs: a double-precision floating-point array containing the original data, an integer denoting the number of elements in this array, an integer that specifies a position index used for the symmetric extension, and another double-precision floating-point array designated for the output. The function first copies the elements of the original array into a specific segment of the output array starting at the given index. It then mirrors these copied elements around this segment to achieve a symmetric extension of the input data. Finally, the function returns an integer corresponding to the length of the original input array.",
        "code_id": "c_group_1_id_149",
        "code_text": "int sb4d781393f(double *sd78c2321f1, int l498879d345, int ad90770d038, double *o6048d5e1f9) {\n\tint i0c6e314cec, l805424f483;\n\tdouble t3bb1d3e4c1;\n\tdouble t197ea3c4f7;\n\t\n\tfor (i0c6e314cec = 0; i0c6e314cec < l498879d345; ++i0c6e314cec) {\n\t\to6048d5e1f9[ad90770d038 + i0c6e314cec] = sd78c2321f1[i0c6e314cec];\n\t}\n\tl805424f483 = l498879d345;\n\tfor (i0c6e314cec = 0; i0c6e314cec < ad90770d038; ++i0c6e314cec) {\n\t\tt3bb1d3e4c1 = o6048d5e1f9[ad90770d038 + i0c6e314cec];\n\t\tt197ea3c4f7 = o6048d5e1f9[ad90770d038 + l805424f483 - 1 - i0c6e314cec];\n\t\to6048d5e1f9[ad90770d038 - 1 - i0c6e314cec] = t3bb1d3e4c1;\n\t\to6048d5e1f9[l805424f483 + ad90770d038 + i0c6e314cec] = t197ea3c4f7;\n\t}\n\n\treturn l805424f483;\n\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_150",
        "query_text": "This function reconstructs signal coefficients from a set of wavelet coefficients using either periodic or symmetric signal extension methods. It accepts as input an array of wavelet coefficients along with their corresponding lengths for various levels of decomposition, a string indicating whether the coefficients represent approximations or details, and another string specifying the extension method. Additional inputs include the level of decomposition, parameters related to the filter such as the low-pass and high-pass coefficients and the filter length, and the overall signal length. The function iteratively processes the coefficients through successive filtering operations, performing computations that adjust the coefficients based on the selected extension method. Memory is dynamically allocated for intermediate buffers during these computations, and proper cleanup is ensured before the function outputs the final array of reconstructed coefficients.",
        "code_id": "c_group_1_id_150",
        "code_text": "static void g00ec8f7b88(double *c19bc9e4d4b, int *l61e04ca4e3, const char *c161c779b51, const char *e675894eeeb, int l61a00d157a, int Jff09e82ee0, double *l3e65d1955c,\n\tdouble *hfc404fbdd3, int l57936ec148, int s56e8c19496, double *rd6ecf636b1) {\n\n\tint i0c6e314cec, jbd3357c513, k1656c0b33c, d32ecfc51ef, N97ba9a4b2a, l4fe95b0aee, mb8bcb57dcd, neb9157c168, v91082a9365, t94bb5426dc, l54d014717e;\n\tdouble *of64dbd25dc, *X3ace9b1220, *f7f546061bf;\n\tof64dbd25dc = (double*)malloc(sizeof(double)* (s56e8c19496 + 1));\n\tl54d014717e = l57936ec148 / 2;\n\tmb8bcb57dcd = -2;\n\tneb9157c168 = -1;\n\tif (!strcmp(e675894eeeb, \"per\")) {\n\t\tif (!strcmp((c161c779b51), \"appx\")) {\n\t\t\td32ecfc51ef = l61e04ca4e3[0];\n\t\t}\n\t\telse {\n\t\t\td32ecfc51ef = l61e04ca4e3[Jff09e82ee0 - l61a00d157a + 1];\n\t\t}\n\n\t\tN97ba9a4b2a = 2 * l61e04ca4e3[Jff09e82ee0];\n\n\t\tX3ace9b1220 = (double*)malloc(sizeof(double)* (N97ba9a4b2a + 2 * l57936ec148 - 1));\n\n\t\tfor (i0c6e314cec = 0; i0c6e314cec < d32ecfc51ef; ++i0c6e314cec) {\n\t\t\tof64dbd25dc[i0c6e314cec] = c19bc9e4d4b[i0c6e314cec];\n\t\t}\n\n\t\tfor (jbd3357c513 = l61a00d157a; jbd3357c513 > 0; --jbd3357c513) {\n\n\t\t\tif (!strcmp((c161c779b51), \"det\") && jbd3357c513 == l61a00d157a) {\n\t\t\t\tf7f546061bf = hfc404fbdd3;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tf7f546061bf = l3e65d1955c;\n\t\t\t}\n\n\t\t\tmb8bcb57dcd = -2;\n\t\t\tneb9157c168 = -1;\n\n\t\t\tfor (i0c6e314cec = 0; i0c6e314cec < d32ecfc51ef + l54d014717e - 1; ++i0c6e314cec) {\n\t\t\t\tmb8bcb57dcd += 2;\n\t\t\t\tneb9157c168 += 2;\n\t\t\t\tX3ace9b1220[mb8bcb57dcd] = 0.0;\n\t\t\t\tX3ace9b1220[neb9157c168] = 0.0;\n\t\t\t\tfor (l4fe95b0aee = 0; l4fe95b0aee < l54d014717e; ++l4fe95b0aee) {\n\t\t\t\t\tt94bb5426dc = 2 * l4fe95b0aee;\n\t\t\t\t\tif ((i0c6e314cec - l4fe95b0aee) >= 0 && (i0c6e314cec - l4fe95b0aee) < d32ecfc51ef) {\n\t\t\t\t\t\tX3ace9b1220[mb8bcb57dcd] += f7f546061bf[t94bb5426dc] * of64dbd25dc[i0c6e314cec - l4fe95b0aee];\n\t\t\t\t\t\tX3ace9b1220[neb9157c168] += f7f546061bf[t94bb5426dc + 1] * of64dbd25dc[i0c6e314cec - l4fe95b0aee];\n\t\t\t\t\t}\n\t\t\t\t\telse if ((i0c6e314cec - l4fe95b0aee) >= d32ecfc51ef && (i0c6e314cec - l4fe95b0aee) < d32ecfc51ef + l57936ec148 - 1) {\n\t\t\t\t\t\tX3ace9b1220[mb8bcb57dcd] += f7f546061bf[t94bb5426dc] * of64dbd25dc[i0c6e314cec - l4fe95b0aee - d32ecfc51ef];\n\t\t\t\t\t\tX3ace9b1220[neb9157c168] += f7f546061bf[t94bb5426dc + 1] * of64dbd25dc[i0c6e314cec - l4fe95b0aee - d32ecfc51ef];\n\t\t\t\t\t}\n\t\t\t\t\telse if ((i0c6e314cec - l4fe95b0aee) < 0 && (i0c6e314cec - l4fe95b0aee) > -l54d014717e) {\n\t\t\t\t\t\tX3ace9b1220[mb8bcb57dcd] += f7f546061bf[t94bb5426dc] * of64dbd25dc[d32ecfc51ef + i0c6e314cec - l4fe95b0aee];\n\t\t\t\t\t\tX3ace9b1220[neb9157c168] += f7f546061bf[t94bb5426dc + 1] * of64dbd25dc[d32ecfc51ef + i0c6e314cec - l4fe95b0aee];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (k1656c0b33c = l57936ec148 / 2 - 1; k1656c0b33c < 2 * d32ecfc51ef + l57936ec148 / 2 - 1; ++k1656c0b33c) {\n\t\t\t\tof64dbd25dc[k1656c0b33c - l57936ec148 / 2 + 1] = X3ace9b1220[k1656c0b33c];\n\t\t\t}\n\n\t\t\tif (jbd3357c513 != 1) {\n\t\t\t\td32ecfc51ef = l61e04ca4e3[Jff09e82ee0 - jbd3357c513 + 2];\n\t\t\t}\n\t\t}\n\n\t\tfree(X3ace9b1220);\n\n\t}\n\telse if (!strcmp(e675894eeeb, \"sym\")) {\n\t\tif (!strcmp((c161c779b51), \"appx\")) {\n\t\t\td32ecfc51ef = l61e04ca4e3[0];\n\t\t}\n\t\telse {\n\t\t\td32ecfc51ef = l61e04ca4e3[Jff09e82ee0 - l61a00d157a + 1];\n\t\t}\n\n\t\tN97ba9a4b2a = 2 * l61e04ca4e3[Jff09e82ee0] - 1;\n\n\t\tX3ace9b1220 = (double*)malloc(sizeof(double)* (N97ba9a4b2a + 2 * l57936ec148 - 1));\n\n\t\tfor (i0c6e314cec = 0; i0c6e314cec < d32ecfc51ef; ++i0c6e314cec) {\n\t\t\tof64dbd25dc[i0c6e314cec] = c19bc9e4d4b[i0c6e314cec];\n\t\t}\n\n\t\tfor (jbd3357c513 = l61a00d157a; jbd3357c513 > 0; --jbd3357c513) {\n\n\t\t\tif (!strcmp((c161c779b51), \"det\") && jbd3357c513 == l61a00d157a) {\n\t\t\t\tf7f546061bf = hfc404fbdd3;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tf7f546061bf = l3e65d1955c;\n\t\t\t}\n\n\t\t\tmb8bcb57dcd = -2;\n\t\t\tneb9157c168 = -1;\n\n\t\t\tfor (v91082a9365 = 0; v91082a9365 < d32ecfc51ef; ++v91082a9365) {\n\t\t\t\ti0c6e314cec = v91082a9365;\n\t\t\t\tmb8bcb57dcd += 2;\n\t\t\t\tneb9157c168 += 2;\n\t\t\t\tX3ace9b1220[mb8bcb57dcd] = 0.0;\n\t\t\t\tX3ace9b1220[neb9157c168] = 0.0;\n\t\t\t\tfor (l4fe95b0aee = 0; l4fe95b0aee < l57936ec148 / 2; ++l4fe95b0aee) {\n\t\t\t\t\tt94bb5426dc = 2 * l4fe95b0aee;\n\t\t\t\t\tif ((i0c6e314cec - l4fe95b0aee) >= 0 && (i0c6e314cec - l4fe95b0aee) < d32ecfc51ef) {\n\t\t\t\t\t\tX3ace9b1220[mb8bcb57dcd] += f7f546061bf[t94bb5426dc] * of64dbd25dc[i0c6e314cec - l4fe95b0aee];\n\t\t\t\t\t\tX3ace9b1220[neb9157c168] += f7f546061bf[t94bb5426dc + 1] * of64dbd25dc[i0c6e314cec - l4fe95b0aee];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (k1656c0b33c = l57936ec148 - 2; k1656c0b33c < 2 * d32ecfc51ef; ++k1656c0b33c) {\n\t\t\t\tof64dbd25dc[k1656c0b33c - l57936ec148 + 2] = X3ace9b1220[k1656c0b33c];\n\t\t\t}\n\n\n\t\t\tif (jbd3357c513 != 1) {\n\t\t\t\td32ecfc51ef = l61e04ca4e3[Jff09e82ee0 - jbd3357c513 + 2];\n\t\t\t}\n\t\t}\n\n\t\tfree(X3ace9b1220);\n\n\t}\n\telse {\n\t\tprintf(\"Signal extension can be either per or sym\");\n\t\texit(-1);\n\t}\n\n\tfor (i0c6e314cec = 0; i0c6e314cec < s56e8c19496; ++i0c6e314cec) {\n\t\trd6ecf636b1[i0c6e314cec] = of64dbd25dc[i0c6e314cec];\n\t}\n\n\tfree(of64dbd25dc);\n\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_151",
        "query_text": "The function takes an integer as its input and produces an integer as its output. It computes 2 raised to the power specified by the input by initializing a base value to 1 and then multiplying it by 2 iteratively for a number of times equal to the input value. The final computed value is eventually returned as the output.",
        "code_id": "c_group_1_id_151",
        "code_text": "static int ic8186b9fa0(int neb9157c168) {\n\tint pb2378a5e91,i0c6e314cec;\n\tpb2378a5e91 = 1;\n\n\tfor (i0c6e314cec = 0; i0c6e314cec < neb9157c168; ++i0c6e314cec) {\n\t\tpb2378a5e91 *= 2;\n\t}\n\n\treturn pb2378a5e91;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_152",
        "query_text": "The function accepts two parameters: one is a reference to an input stream, and the other is a reference to a two-element tuple containing integers. It reads an integer from the stream, then discards a single character serving as a separator, and subsequently reads a second integer. The function stores these values in the tuple and returns the modified input stream, allowing for chaining of input operations.",
        "code_id": "c_group_1_id_152",
        "code_text": "std::istream& operator>>(std::istream& ic3a12926f0, std::tuple<int, int>& ib6500a1dc5)\n{\n    ic3a12926f0 >> std::get<0>(ib6500a1dc5);\n    ic3a12926f0.get();\n    ic3a12926f0 >> std::get<1>(ib6500a1dc5);\n    return ic3a12926f0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_153",
        "query_text": "The function takes an unsigned 64-bit integer as input and returns an integer representing the number of contiguous zero bits at the least significant end of its binary representation. It is marked as noexcept, ensuring that no exceptions are thrown during execution. Internally, the function leverages a compiler-specific intrinsic to efficiently perform the bit-counting operation. It is important to note that if the input is zero, the behavior is undefined.",
        "code_id": "c_group_1_id_153",
        "code_text": "inline STRF_HD int cd1aeeeffe4(unsigned long long xf1fa84c2ec) noexcept\n{\n    return __builtin_ctzll(xf1fa84c2ec);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_154",
        "query_text": "This function accepts a 64\u2011bit unsigned integer as input and returns an integer value between 0 and 64. It examines the binary representation of the input and counts the number of leading zero bits before the first set bit. If the input is zero (all bits zero), the function returns 64. Otherwise, it uses a sequence of nested conditional checks to efficiently locate the most significant set bit and calculates the count of zeros preceding it. Additionally, the function is declared as a compile\u2011time constant expression, allowing its evaluation during compilation when provided with constant expressions.",
        "code_id": "c_group_1_id_154",
        "code_text": "constexpr int s36075e62bc(std::uint64_t xf1fa84c2ec)\n{\n    if (xf1fa84c2ec <= 0xffffffffULL) {\n        if (xf1fa84c2ec <= 0xffffULL) {\n            if (xf1fa84c2ec <= 0xffULL) {\n                if (xf1fa84c2ec <= 0xfULL) {\n                    if (xf1fa84c2ec <= 3U) {\n                        if (xf1fa84c2ec == 0) {\n                            return 64;\n                        }\n                        return xf1fa84c2ec <= 1U ? 63 : 62;\n                    }\n                    return xf1fa84c2ec <= 7U ? 61 : 60;\n                }\n                if (xf1fa84c2ec <= 0x3fU) {\n                    return xf1fa84c2ec <= 0x1fU ? 59 : 58;\n                }\n                return xf1fa84c2ec <= 0x7fU ? 57 : 56;\n            }\n            if (xf1fa84c2ec <= 0xfffULL) {\n                if (xf1fa84c2ec <= 0x3ffULL) {\n                    return xf1fa84c2ec <= 0x1ffULL ? 55 :54;\n                }\n                return xf1fa84c2ec <= 0x7ffULL ? 53 : 52;\n            }\n            if (xf1fa84c2ec <= 0x3fffULL) {\n                return xf1fa84c2ec <= 0x1fffULL ? 51 :50;\n            }\n            return xf1fa84c2ec <= 0x7fffULL ? 49 : 48;\n        }\n        if (xf1fa84c2ec <= 0xffffffULL) {\n            if (xf1fa84c2ec <= 0xfffffULL) {\n                if (xf1fa84c2ec <= 0x3ffffULL) {\n                    return xf1fa84c2ec <= 0x1ffffULL ? 47 : 46;\n                }\n                return xf1fa84c2ec <= 0x7ffffULL ? 45 : 44;\n            }\n            if (xf1fa84c2ec <= 0x3fffffULL) {\n                return xf1fa84c2ec <= 0x1fffffULL ? 43 : 42 ;\n            }\n            return xf1fa84c2ec <= 0x7fffffULL ? 41 : 40 ;\n        }\n        if (xf1fa84c2ec <= 0xfffffffULL) {\n            if (xf1fa84c2ec <= 0x3ffffffULL) {\n                return xf1fa84c2ec <= 0x1ffffffULL ? 39 : 38 ;\n            }\n            return xf1fa84c2ec <= 0x7ffffffULL ? 37 : 36;\n        }\n        if (xf1fa84c2ec <= 0x3fffffffULL) {\n            return xf1fa84c2ec <= 0x1fffffffULL ? 35 : 34;\n        }\n        return xf1fa84c2ec <= 0x7fffffffULL ? 33 : 32;\n    }\n    if (xf1fa84c2ec <= 0xffffffffffffULL) {\n        if (xf1fa84c2ec <= 0xffffffffffULL) {\n            if (xf1fa84c2ec <= 0xfffffffffULL) {\n                if (xf1fa84c2ec <= 0x3ffffffffULL) {\n                    return xf1fa84c2ec <= 0x1ffffffffULL ? 31 : 30;\n                }\n                return xf1fa84c2ec <= 0x7ffffffffULL ? 29 : 28;\n            }\n            if (xf1fa84c2ec <= 0x3fffffffffULL) {\n                return xf1fa84c2ec <= 0x1fffffffffULL ? 27 : 26;\n            }\n            return xf1fa84c2ec <= 0x7fffffffffULL ? 25 : 24;\n        }\n        if (xf1fa84c2ec <= 0xfffffffffffULL) {\n            if (xf1fa84c2ec <= 0x3ffffffffffULL) {\n                return xf1fa84c2ec <= 0x1ffffffffffULL ? 23 : 22;\n            }\n            return xf1fa84c2ec <= 0x7ffffffffffULL ? 21 : 20;\n        }\n        if (xf1fa84c2ec <= 0x3fffffffffffULL) {\n            return xf1fa84c2ec <= 0x1fffffffffffULL ? 19 : 18;\n        }\n        return xf1fa84c2ec <= 0x7fffffffffffULL ? 17 : 16;\n    }\n    if (xf1fa84c2ec <= 0xffffffffffffffULL) {\n        if (xf1fa84c2ec <= 0xfffffffffffffULL) {\n            if (xf1fa84c2ec <= 0x3ffffffffffffULL) {\n                return xf1fa84c2ec <= 0x1ffffffffffffULL ? 15 : 14;\n            }\n            return xf1fa84c2ec <= 0x7ffffffffffffULL ? 13 : 12;\n        }\n        if (xf1fa84c2ec <= 0x3fffffffffffffULL) {\n            return xf1fa84c2ec <= 0x1fffffffffffffULL ? 11 : 10 ;\n        }\n        return xf1fa84c2ec <= 0x7fffffffffffffULL ? 9 : 8 ;\n    }\n    if (xf1fa84c2ec <= 0xfffffffffffffffULL) {\n        if (xf1fa84c2ec <= 0x3ffffffffffffffULL) {\n            return xf1fa84c2ec <= 0x1ffffffffffffffULL ? 7 : 6 ;\n        }\n        return xf1fa84c2ec <= 0x7ffffffffffffffULL ? 5 : 4;\n    }\n    if (xf1fa84c2ec <= 0x3fffffffffffffffULL) {\n        return xf1fa84c2ec <= 0x1fffffffffffffffULL ? 3 : 2;\n    }\n    return xf1fa84c2ec <= 0x7fffffffffffffffULL ? 1 : 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_155",
        "query_text": "The function takes three unsigned integers as input. It shifts the first input left by 12 bits, shifts the lower 6 bits of the second integer left by 6 bits, and then combines these results with the lower 6 bits of the third input using bitwise OR operations. The function returns a single unsigned integer encapsulating the combined bit pattern from the three inputs.",
        "code_id": "c_group_1_id_155",
        "code_text": "inline STRF_HD unsigned u555f590bea(unsigned xf1fa84c2ec, unsigned c8824e3983e, unsigned c5d733a6ac1)\n{\n    return (xf1fa84c2ec << 12) | ((c8824e3983e & 0x3F) <<  6) | (c5d733a6ac1 & 0x3F);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_156",
        "query_text": "The function takes no input arguments and returns a pointer to a statically allocated constant character array. This array holds a concatenated sequence of two-digit numbers in ascending order from \"00\" to \"99\". The function is declared as inline and guarantees no exceptions, with the return type being const char*. Its purpose is to provide quick access to a precomputed lookup table that can be utilized for efficient string formatting or similar operations.",
        "code_id": "c_group_1_id_156",
        "code_text": "inline STRF_HD const char* c69b019e994() noexcept\n{\n    static const char a5274839d9b[] =\n        \"00010203040506070809\"\n        \"10111213141516171819\"\n        \"20212223242526272829\"\n        \"30313233343536373839\"\n        \"40414243444546474849\"\n        \"50515253545556575859\"\n        \"60616263646566676869\"\n        \"70717273747576777879\"\n        \"80818283848586878889\"\n        \"90919293949596979899\";\n\n    return a5274839d9b;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_157",
        "query_text": "This function takes a single character input and determines whether it represents a numerical digit. The input, of type char, is examined to see if it lies between the characters '0' and '9' inclusive. If the character is within this range, the function returns true; otherwise, it returns false.",
        "code_id": "c_group_1_id_157",
        "code_text": "static inline bool i66354c2df5(char cdcd5d1f3d2) {\n  return (cdcd5d1f3d2 >= '0' && cdcd5d1f3d2 <= '9');\n  \n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_158",
        "query_text": "The function accepts two inputs: a constant character pointer representing the input string, and a pointer to a double where the parsed floating-point value will be stored. It converts the numeric portion of the input string to a double-precision floating-point number, employing platform-specific variants that utilize appropriate locale settings for accurate parsing. If the conversion succeeds and the resulting value is finite (i.e., not infinity or NaN), the function returns a pointer to the character immediately following the parsed number in the input string; otherwise, it returns a null pointer.",
        "code_id": "c_group_1_id_158",
        "code_text": "static const char * p14eb4cca36(const char *p949f10927c, double *o801b6ac096) {\n  char *e7d4dd9a272;\n#if defined(FAST_DOUBLE_PARSER_SOLARIS) || defined(FAST_DOUBLE_PARSER_CYGWIN) \n  \n  *outDouble = cygwin_strtod_l(ptr, &endptr);\n#elif defined(_WIN32)\n  static _locale_t c_locale = _create_locale(LC_ALL, \"C\");\n  *outDouble = _strtod_l(ptr, &endptr, c_locale);\n#elif defined(__PASE__)\n  *outDouble = strtod(ptr, &endptr);\n#else\n  static locale_t cc864980177 = newlocale(LC_ALL_MASK, \"C\", NULL);\n  *o801b6ac096 = strtod_l(p949f10927c, &e7d4dd9a272, cc864980177);\n#endif\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  if (!std::isfinite(*o801b6ac096)) {\n    return nullptr;\n  }\n  return e7d4dd9a272;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_159",
        "query_text": "The function accepts a 64-bit unsigned integer as input and returns a 64-bit unsigned integer as output. It processes the input through multiple stages of transformation. Initially, the function applies a bitwise XOR combined with a right-shift operation. It then multiplies the intermediate value by a predefined constant. This sequence is repeated: after a second XOR shift, another multiplication with a different constant is performed, followed by a final XOR shift. The resulting value from these operations is returned as the function's output.",
        "code_id": "c_group_1_id_159",
        "code_text": "static inline uint64_t rcd6879a3b6(uint64_t hc99060f9be) {\n  hc99060f9be ^= hc99060f9be >> 33;\n  hc99060f9be *= UINT64_C(0xff51afd7ed558ccd);\n  hc99060f9be ^= hc99060f9be >> 33;\n  hc99060f9be *= UINT64_C(0xc4ceb9fe1a85ec53);\n  hc99060f9be ^= hc99060f9be >> 33;\n  return hc99060f9be;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_160",
        "query_text": "The function receives a single-precision floating-point value as its input and returns a 32-bit integer. It performs the conversion by loading the input into a SIMD register and then using a dedicated SSE2 instruction to round the floating-point value to the nearest integer efficiently. The input is of type float, and the output is of type int.",
        "code_id": "c_group_1_id_160",
        "code_text": "static inline int\n#ifdef USE_TARGET_ATTRIBUTE\n__attribute__((t69a9301be6(\"sse2\")))\n#endif\np9598888414 (float xf1fa84c2ec)\n{\n\treturn _mm_cvtss_si32 (_mm_load_ss (&xf1fa84c2ec)) ;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_161",
        "query_text": "The function accepts a double-precision floating-point number (type double) as input and returns a 32-bit signed integer (type int) as output. Internally, it leverages hardware-accelerated SIMD instructions available in the SSE2 instruction set to load the input value and directly convert it to an integer with accurate rounding to the nearest whole number. This efficient use of SIMD instructions ensures high-performance processing of the floating-point to integer conversion.",
        "code_id": "c_group_1_id_161",
        "code_text": "static inline int\n#ifdef USE_TARGET_ATTRIBUTE\n__attribute__((t69a9301be6(\"sse2\")))\n#endif\npee7cc5a5ca (double xf1fa84c2ec)\n{\n\treturn _mm_cvtsd_si32 (_mm_load_sd (&xf1fa84c2ec)) ;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_162",
        "query_text": "The function takes a double-precision floating-point number as input and returns an integer. It verifies whether the input lies within a valid range defined by a predetermined constant. Specifically, the function checks if the input is less than the reciprocal of this constant or greater than the constant itself. If the input falls outside this range, the function returns a non-zero value to indicate an invalid condition; otherwise, it returns zero, signifying that the input is within the acceptable bounds.",
        "code_id": "c_group_1_id_162",
        "code_text": "static inline int\nicd95a0072f (double ra2e03174bf)\n{\treturn (ra2e03174bf < (1.0 / SRC_MAX_RATIO) || ra2e03174bf > (1.0 * SRC_MAX_RATIO)) ;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_163",
        "query_text": "The function accepts two integer parameters: the first is a non-negative integer, and the second is a positive integer. It calculates the ceiling of the division of the first parameter by the second, ensuring that any fractional result is rounded up to the next whole number. The function returns the computed result as an integer.",
        "code_id": "c_group_1_id_163",
        "code_text": "static inline int\ni0b393b7309 (int d616d387a12, int d955f7a2ae7) \n{\tassert (d616d387a12 >= 0 && d955f7a2ae7 > 0) ; \n\treturn (d616d387a12 + (d955f7a2ae7 - 1)) / d955f7a2ae7 ;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_164",
        "query_text": "The function takes a single integer input that acts as a reset flag and returns an integer output corresponding to a block length. It maintains an internal state representing a fixed sequence of block lengths. When the reset flag is non-zero, the internal state is reinitialized so that the next output comes from the start of the sequence. When the reset flag is zero, the function outputs the subsequent block length in the sequence, wrapping around to the beginning once the end is reached.",
        "code_id": "c_group_1_id_164",
        "code_text": "static int\nn88f7233aad (int race65b36f1)\n{\tstatic int b475303ed1e [] = \n\t{\t\n\t\t5, 400, 10, 300, 20, 200, 50, 100, 70\n\t\t} ;\n\tstatic int b590b64900c = 0 ;\n\n\tif (race65b36f1)\n\t\tb590b64900c = 0 ;\n\telse\n\t\tb590b64900c = (b590b64900c + 1) % ARRAY_LEN (b475303ed1e) ;\n\n\treturn b475303ed1e [b590b64900c] ;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_165",
        "query_text": "This function provides a static buffer of floats and its size to the caller. It takes two inputs: a generic pointer (unused) and a pointer to a pointer to a float. The function assigns the static float buffer to the provided pointer-to-pointer, enabling external access to the buffer. Finally, it returns the number of elements in the buffer as a long integer.",
        "code_id": "c_group_1_id_165",
        "code_text": "static long\ni16bbbb7b89 (void *cf70155a25d, float **d4e0653e6bc)\n{\n\tstatic float bf39cacaa68 [20] ;\n\n\t(void) cf70155a25d ;\n\t*d4e0653e6bc = bf39cacaa68 ;\n\n\treturn ARRAY_LEN (bf39cacaa68) ;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_166",
        "query_text": "The function takes no arguments and returns no value. It conditionally disables logging by checking for a specific preprocessor directive. If the directive is defined, the function sets a flag to 0 to turn off logging; otherwise, it leaves the logging functionality unchanged.",
        "code_id": "c_group_1_id_166",
        "code_text": "void wf6ef777a01(void)\n{\n#ifdef DEBUG_WOLFSSL\n    loggingEnabled = 0;\n#endif\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_167",
        "query_text": "The function takes a constant character string as input and, when a specific debugging flag is enabled, assigns the input string to an internal logging prefix used for debug output. If the debugging flag is not enabled, the input is disregarded and no action is taken. The function does not produce a return value.",
        "code_id": "c_group_1_id_167",
        "code_text": "void w568e202bf1(const char* p96f389fbdc)\n{\n#ifdef DEBUG_WOLFSSL\n    log_prefix = prefix;\n#else\n    (void)p96f389fbdc;\n#endif\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_168",
        "query_text": "The function accepts one input: a character. It outputs a signed 8-bit integer, representing the corresponding numeric value of the input if it is a valid hexadecimal digit (i.e. '0'-'9', 'A'-'F', or 'a'-'f'). If the character is not a valid hexadecimal digit, the function returns -1. The input type is char, while the output type is a signed char.",
        "code_id": "c_group_1_id_168",
        "code_text": "WC_MISC_STATIC WC_INLINE signed char H1505e85647(char c339952909c)\n{\n    signed char rbb7a0566ac = (signed char)c339952909c;\n    if (rbb7a0566ac >= '0' && rbb7a0566ac <= '9')\n        rbb7a0566ac = (signed char)(rbb7a0566ac - '0');\n    else if (rbb7a0566ac >= 'A' && rbb7a0566ac <= 'F')\n        rbb7a0566ac = (signed char)(rbb7a0566ac - ('A' - 10));\n    else if (rbb7a0566ac >= 'a' && rbb7a0566ac <= 'f')\n        rbb7a0566ac = (signed char)(rbb7a0566ac - ('a' - 10));\n    else\n        rbb7a0566ac = -1; \n    return rbb7a0566ac;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_169",
        "query_text": "This function examines an input character to determine if it qualifies as a whitespace character. It accepts a character (of type char) and checks if it is either a space, a tab, or a newline. If the character matches any of these, the function returns an integer value of 1; otherwise, it returns 0. The output is of type int, signifying a boolean-like indicator for whitespace detection.",
        "code_id": "c_group_1_id_169",
        "code_text": "WC_MISC_STATIC WC_INLINE int C58712028df(char c339952909c)\n{\n    switch (c339952909c) {\n        case ' ':\n        case '\\t':\n        case '\\n':\n            return 1;\n        default:\n            return 0;\n    }\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_170",
        "query_text": "The function accepts an array of unsigned characters, represented by a pointer, along with an integer that specifies the length of this array. It checks whether the provided pointer is NULL; if it is, the function immediately terminates without making any modifications. Otherwise, it reverses the elements in the array in place by swapping the first element with the last, the second element with the second-to-last, and continuing this process until the entire array is reversed. The function does not return any value.",
        "code_id": "c_group_1_id_170",
        "code_text": "void m85fdb978b3(unsigned char *s3b9d266e2e, int l498879d345)\n{\n    int i8b8c8308e0, i6c69fa45d5;\n\n    if (s3b9d266e2e == NULL)\n        return;\n\n    i8b8c8308e0 = 0;\n    i6c69fa45d5 = l498879d345 - 1;\n    while (i8b8c8308e0 < i6c69fa45d5) {\n        unsigned char t94bb5426dc = s3b9d266e2e[i8b8c8308e0];\n        s3b9d266e2e[i8b8c8308e0] = s3b9d266e2e[i6c69fa45d5];\n        s3b9d266e2e[i6c69fa45d5] = t94bb5426dc;\n        ++i8b8c8308e0;\n        --i6c69fa45d5;\n    }\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_171",
        "query_text": "The function is a void function that accepts no input parameters and returns no value. It initializes the error handling mechanism of the library by loading a set of predefined error strings. These error messages allow for error codes generated during execution to be translated into meaningful, human-readable descriptions.",
        "code_id": "c_group_1_id_171",
        "code_text": "void wde1cad443e(void)\n{\n    \n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_172",
        "query_text": "The function accepts a single unsigned long integer that represents an error code and returns a pointer to a constant character string. It is designed to generate a human-readable description of the library associated with the provided error code. When a specific compile-time flag is enabled, the function extracts a library identifier from the error code and then checks this identifier against known values. If it matches one of the predefined identifiers (such as those corresponding to routines for handling specific file formats or cryptographic operations), it returns a descriptive string for that library routine. If the identifier is unrecognized or the compile-time flag is not enabled, the function simply returns an empty string. This mechanism is primarily utilized for error logging and debugging purposes.",
        "code_id": "c_group_1_id_172",
        "code_text": "const char* wd4bc957be8(unsigned long e00936eb9f3)\n{\n    int l4a738e9c8d = 0;\n\n    (void)l4a738e9c8d;\n    (void)e00936eb9f3;\n\n#if defined(OPENSSL_EXTRA)\n    libe = wolfSSL_ERR_GET_LIB(e);\n    switch (libe) {\n    case WOLFSSL_ERR_LIB_PEM:\n        return \"wolfSSL PEM routines\";\n    case WOLFSSL_ERR_LIB_EVP:\n        return \"wolfSSL digital envelope routines\";\n    default:\n        return \"\";\n    }\n#else\n    return \"\";\n#endif\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_173",
        "query_text": "The function accepts two pointer inputs: one pointing to the start of a character array and the other pointing to its end. It sequentially examines each character from the beginning, skipping any occurrence of carriage return ('\\r') or newline ('\\n'). The function returns the pointer to the first character that is not a line-ending character.",
        "code_id": "c_group_1_id_173",
        "code_text": "static WC_INLINE const char* S4b679bb423(const char* ldb6e375044,\n                                                const char* e31237235fc)\n{\n    \n    while (ldb6e375044 < e31237235fc &&\n              (ldb6e375044[0] == '\\r' || ldb6e375044[0] == '\\n')) {\n        ldb6e375044++;\n    }\n    return ldb6e375044;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_174",
        "query_text": "The function takes an integer input representing an alert type and logs a formatted alert message if debug mode is enabled. It first converts the integer to a string using a helper routine; if the conversion is successful, it incorporates the string into a predefined message format and logs the result. When debug mode is not enabled, the input is disregarded and no logging occurs. The function does not produce a return value.",
        "code_id": "c_group_1_id_174",
        "code_text": "static void Lb21098a3a0(int t0e2e36c884)\n{\n#ifdef DEBUG_WOLFSSL\n    const char* typeStr;\n\n    typeStr = AlertTypeToString(type);\n    if (typeStr != NULL) {\n        char buff[60];\n        if (XSNPRINTF(buff, sizeof(buff), \"Alert type: %s\", typeStr)\n            >= (int)sizeof(buff))\n        {\n            buff[sizeof(buff) - 1] = 0;\n        }\n        WOLFSSL_MSG(buff);\n    }\n#else\n    (void)t0e2e36c884;\n#endif \n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_175",
        "query_text": "The function takes two inputs: an integer representing an error value and a socket descriptor (which is often unused). It returns an integer that represents the last error code for a socket operation, following the platform-specific error retrieval mechanism. If the input error value is positive, the function returns 0 to indicate the absence of an error. Otherwise, it determines and returns the appropriate error code based on the current platform's implementation (such as for Windows, Linux kernel mode, or various embedded systems).",
        "code_id": "c_group_1_id_175",
        "code_text": "static WC_INLINE int w5b45a30079(int eb0f556b4d6, SOCKET_T s0d096feadb)\n{\n    (void)s0d096feadb;\n\n    if (eb0f556b4d6 > 0)\n        return 0;\n\n#ifdef USE_WINDOWS_API\n    return WSAGetLastError();\n#elif defined(EBSNET)\n    return xn_getlasterror();\n#elif defined(WOLFSSL_LINUXKM) || defined(WOLFSSL_EMNET)\n    return -err; \n#elif defined(FUSION_RTOS)\n    #include <fclerrno.h>\n    return FCL_GET_ERRNO;\n#elif defined(NUCLEUS_PLUS_2_3)\n    return Nucleus_Net_Errno;\n#elif defined(FREESCALE_MQX) || defined(FREESCALE_KSDK_MQX)\n    if ((err == 0) || (err == -SOCKET_EWOULDBLOCK)) {\n        return SOCKET_EWOULDBLOCK; \n    } else {\n        err = RTCS_geterror(sd);\n        if ((err == RTCSERR_TCP_CONN_CLOSING) ||\n            (err == RTCSERR_TCP_CONN_RLSD))\n        {\n            err = SOCKET_ECONNRESET;\n        }\n        return err;\n    }\n#elif defined(WOLFSSL_EMNET)\n    \n    IP_SOCK_getsockopt(sd, SOL_SOCKET, SO_ERROR, &err, (int)sizeof(old));\n    return err;\n#else\n    return errno;\n#endif\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_176",
        "query_text": "The function takes an input\u2014a constant C-string pointer that represents a directory path\u2014and attempts to remove the directory. It uses a platform-specific system call: on Windows (compiled with MSVC), it invokes one removal function; on other platforms, it uses a different standard removal function. If the removal is successful, the function returns 0; if it fails, the function returns -1. The input type is a const char pointer and the output type is an int.",
        "code_id": "c_group_1_id_176",
        "code_text": "int r4bf62301b3(const char* d04b7db4454)\n{\n#ifdef _MSC_VER\n    if (_rmdir(dirName) != 0)\n        return -1;\n#else\n    if (rmdir(d04b7db4454) != 0)\n        return -1;\n#endif\n    return 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_177",
        "query_text": "This function removes a file from the file system based on a provided string that specifies the file's name. It utilizes platform-specific system calls: on certain Windows compilers, it employs one call, whereas on other systems it uses an alternative call. If the deletion operation completes successfully, the function returns 0; if it fails, the function returns -1 to signal an error.",
        "code_id": "c_group_1_id_177",
        "code_text": "int r1a08c95ac8(const char* f6215fbe8a2)\n{\n#ifdef _MSC_VER\n    if (_unlink(fileName) != 0)\n        return -1;\n#else\n    if (unlink(f6215fbe8a2) != 0)\n        return -1;\n#endif\n    return 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_178",
        "query_text": "The function generates a formatted string that lists supported protocol versions and optional feature flags, and then prints this string to the console. It begins by initializing a fixed-size character array with zeros and then conditionally appends version identifiers (such as \"0:\", \"1:\", \"2:\", etc.) based on preprocessor definitions. Depending on the compilation configuration, it may also append additional markers like a downgrade flag or an either-side flag. The function does not accept any input parameters and does not return any value.",
        "code_id": "c_group_1_id_178",
        "code_text": "static void S969680b2db(void)\n{\n    char vce94a1c334[100];\n    XMEMSET(vce94a1c334, 0, sizeof(vce94a1c334));\n#ifndef NO_OLD_TLS\n    #ifdef WOLFSSL_ALLOW_SSLV3\n        XSTRNCAT(verStr, \"0:\", 3);\n    #endif\n    #ifdef WOLFSSL_ALLOW_TLSV10\n        XSTRNCAT(verStr, \"1:\", 3);\n    #endif\n    XSTRNCAT(vce94a1c334, \"2:\", 3);\n#endif \n#ifndef WOLFSSL_NO_TLS12\n    XSTRNCAT(vce94a1c334, \"3:\", 3);\n#endif\n#ifdef WOLFSSL_TLS13\n    XSTRNCAT(vce94a1c334, \"4:\", 3);\n#endif\n    XSTRNCAT(vce94a1c334, \"d(downgrade):\", 14);\n#if defined(OPENSSL_EXTRA) || defined(WOLFSSL_EITHER_SIDE)\n    XSTRNCAT(verStr, \"e(either):\", 11);\n#endif\n    \n    printf(\"%s\\n\", vce94a1c334);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_179",
        "query_text": "The function takes a pointer to an integer, representing a socket file descriptor, as its input. It first checks whether the socket is open by examining if the integer is not equal to -1. If the socket is open, the function proceeds to close the socket and then sets the file descriptor to -1 to mark it as invalid. Additionally, under a specific compilation condition, it resets a global status flag to 0. The function does not return any value; its main purpose is to safely close and clean up the socket.",
        "code_id": "c_group_1_id_179",
        "code_text": "static void C4d3e5e1661(int* sc551c0a252)\n{\n    if (*sc551c0a252 != -1) {\n        close(*sc551c0a252);\n        *sc551c0a252 = -1;\n    }\n#ifdef WOLFSSL_DTLS\n    DoneHandShake = 0;\n#endif\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_180",
        "query_text": "The function takes a pointer to an integer as input. It begins by checking if the integer value is not equal to -1. If this condition is met, the function closes the resource associated with this value (such as a file descriptor or socket) and then resets the value to -1 to indicate the resource is no longer active. The function does not return a value.",
        "code_id": "c_group_1_id_180",
        "code_text": "static void C1cf10b4f8e(int* l1aaf6bb94a)\n{\n    if (*l1aaf6bb94a != -1) {\n        close(*l1aaf6bb94a);\n        *l1aaf6bb94a = -1;\n    }\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_181",
        "query_text": "The function accepts a pointer to a double value representing a numerical quantity, and returns a constant C-string indicating a unit of measurement. It first evaluates compile-time flags to determine if a fixed unit should be used\u2014dividing the value accordingly by factors of 1,000,000,000, 1,000,000, or 1,000 for gigabytes, megabytes, or kilobytes respectively, or leaving the value unchanged for bytes. If no fixed unit is specified at compile time, the function adjusts the input value at runtime based on its magnitude: values larger than one million are scaled to megabytes, values larger than one thousand to kilobytes, and values below this threshold remain in bytes. Finally, a constant string denoting the unit (\"GB\", \"MB\", \"KB\", or \"bytes\") is returned.",
        "code_id": "c_group_1_id_181",
        "code_text": "static const char* gc475b39953(double* b123e1d5653)\n{\n    const char* rbbf83522d0;\n\n#if (  defined(WOLFSSL_BENCHMARK_FIXED_UNITS_G) || \\\n       defined(WOLFSSL_BENCHMARK_FIXED_UNITS_GB))\n    *blocks /= (1000UL * 1000UL * 1000UL);\n    rt = \"GB\";\n#elif (defined(WOLFSSL_BENCHMARK_FIXED_UNITS_M) || \\\n       defined(WOLFSSL_BENCHMARK_FIXED_UNITS_MB))\n    *blocks /= (1000UL * 1000UL);\n    rt = \"MB\";\n#elif (defined(WOLFSSL_BENCHMARK_FIXED_UNITS_K) || \\\n       defined(WOLFSSL_BENCHMARK_FIXED_UNITS_KB))\n    *blocks /= (1000UL);\n    rt = \"KB\";\n#elif     defined (WOLFSSL_BENCHMARK_FIXED_UNITS_B)\n    (void)(*blocks); \n    rt = \"bytes\";\n#else\n    \n    if (*b123e1d5653 > (1000UL * 1000UL)) {\n        *b123e1d5653 /= (1000UL * 1000UL);\n        rbbf83522d0 = \"MB\";\n    }\n    else if (*b123e1d5653 > 1000) {\n        *b123e1d5653 /= 1000; \n        rbbf83522d0 = \"KB\";\n    }\n    else {\n        rbbf83522d0 = \"bytes\";\n    }\n#endif\n\n    return rbbf83522d0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_182",
        "query_text": "This function conditionally deallocates memory for a linked list of statistics data structures when a specific compilation flag is active. It iterates over the list starting from the head, freeing each node by invoking a custom memory deallocation routine. After traversing and freeing all nodes, the function resets both the head and tail pointers to null, thereby reinitializing the list. The function takes no inputs and returns no output (void), serving solely to clean up dynamically allocated memory associated with the statistics tracking system.",
        "code_id": "c_group_1_id_182",
        "code_text": "static WC_INLINE void bf4921d691d(void)\n{\n#ifdef WC_BENCH_TRACK_STATS\n    bench_stats_t* bstat;\n    for (bstat = bench_stats_head; bstat != NULL; ) {\n        bench_stats_t* next = bstat->next;\n        XFREE(bstat, NULL, DYNAMIC_TYPE_INFO);\n        bstat = next;\n    }\n    bench_stats_head = NULL;\n    bench_stats_tail = NULL;\n#endif\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_183",
        "query_text": "The function accepts as input a pointer to a constant character array (string) and a pointer to an integer representing the current line length. It outputs the string with proper indentation and line wrapping: initially adding an indentation when starting a new line, then printing the string while updating the line length counter. If the current line length exceeds a predefined maximum value, the function outputs a newline and resets the counter. The function returns no value (void); its purpose is to format and print text so that it adheres to a specified line width.",
        "code_id": "c_group_1_id_183",
        "code_text": "static void p8fe9b5dd76(const char* s09b181202d, int* ldb6e375044)\n{\n    const char* const i9f6d473aad = \"             \";\n    if (*ldb6e375044 == 0) {\n        printf(\"%s\", i9f6d473aad);\n        *ldb6e375044 = (int)XSTRLEN(i9f6d473aad);\n    }\n    printf(\" %s\", s09b181202d);\n    *ldb6e375044 += (int)XSTRLEN(s09b181202d) + 1;\n    if (*ldb6e375044 > BENCH_MAX_LINE) {\n        printf(\"\\n\");\n        *ldb6e375044 = 0;\n    }\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_184",
        "query_text": "The function accepts two constant character arrays (strings) as inputs. It performs a case-sensitive exact string comparison and returns an integer value: it returns 1 if the strings are identical and 0 if they are not.",
        "code_id": "c_group_1_id_184",
        "code_text": "static int s653613896b(const char* a445ff0478f, const char* s09b181202d)\n{\n    return XSTRCMP(a445ff0478f, s09b181202d) == 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_185",
        "query_text": "The function takes no input and returns a boolean value. It verifies whether the system or compiler correctly encodes a particular Unicode character in UTF-8 format. To do so, the function first checks if the byte-length of a string literal representing the character is three, which is the expected length for its UTF-8 encoding. It then confirms that the first two bytes of the string match the predetermined values required for the proper UTF-8 representation of the character. Based on these checks, the function returns true if both conditions are met, indicating that UTF-8 encoding is supported; otherwise, it returns false.",
        "code_id": "c_group_1_id_185",
        "code_text": "constexpr auto i456b229d79() -> bool {\n  \n  using u16e18360b5 = unsigned char;\n  return sizeof(\"\\u00A7\") == 3 && u16e18360b5(\"\\u00A7\"[0]) == 0xC2 &&\n         u16e18360b5(\"\\u00A7\"[1]) == 0xA7;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_186",
        "query_text": "The function takes three pointer parameters. The first parameter is a pointer to a UTF-8 encoded character array, the second is a pointer to an unsigned 32-bit integer that will hold the decoded Unicode code point, and the third is a pointer to an integer used to store error flags. The function begins by determining the byte-length of the current UTF-8 character, then decodes the character by applying bit masks and shifts to combine up to four bytes into a single Unicode code point. As it decodes, it also checks for several error conditions\u2014such as values below a minimum threshold, excessively large values, or improperly encoded continuation bytes\u2014by setting corresponding error flags. Finally, it returns a pointer to the next character in the input string, while updating the provided outputs with the decoded code point and any detected encoding errors.",
        "code_id": "c_group_1_id_186",
        "code_text": "FMT_CONSTEXPR inline auto u6e721c584a(const char* s3b9d266e2e, uint32_t* cdcd5d1f3d2, int* e00936eb9f3)\n    -> const char* {\n  constexpr const int m182cf8a7b0[] = {0x00, 0x7f, 0x1f, 0x0f, 0x07};\n  constexpr const uint32_t m345752d200[] = {4194304, 0, 128, 2048, 65536};\n  constexpr const int s9d10bbc890[] = {0, 18, 12, 6, 0};\n  constexpr const int sd1ff152cb0[] = {0, 6, 4, 2, 0};\n\n  int l498879d345 = \"\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\2\\2\\2\\2\\3\\3\\4\"\n      [static_cast<unsigned char>(*s3b9d266e2e) >> 3];\n  \n  \n  \n  const char* ne43a7c0673 = s3b9d266e2e + l498879d345 + !l498879d345;\n\n  using u16e18360b5 = unsigned char;\n\n  \n  \n  *cdcd5d1f3d2 = uint32_t(u16e18360b5(s3b9d266e2e[0]) & m182cf8a7b0[l498879d345]) << 18;\n  *cdcd5d1f3d2 |= uint32_t(u16e18360b5(s3b9d266e2e[1]) & 0x3f) << 12;\n  *cdcd5d1f3d2 |= uint32_t(u16e18360b5(s3b9d266e2e[2]) & 0x3f) << 6;\n  *cdcd5d1f3d2 |= uint32_t(u16e18360b5(s3b9d266e2e[3]) & 0x3f) << 0;\n  *cdcd5d1f3d2 >>= s9d10bbc890[l498879d345];\n\n  \n  *e00936eb9f3 = (*cdcd5d1f3d2 < m345752d200[l498879d345]) << 6;       \n  *e00936eb9f3 |= ((*cdcd5d1f3d2 >> 11) == 0x1b) << 7;  \n  *e00936eb9f3 |= (*cdcd5d1f3d2 > 0x10FFFF) << 8;       \n  *e00936eb9f3 |= (u16e18360b5(s3b9d266e2e[1]) & 0xc0) >> 2;\n  *e00936eb9f3 |= (u16e18360b5(s3b9d266e2e[2]) & 0xc0) >> 4;\n  *e00936eb9f3 |= u16e18360b5(s3b9d266e2e[3]) >> 6;\n  *e00936eb9f3 ^= 0x2a;  \n  *e00936eb9f3 >>= sd1ff152cb0[l498879d345];\n\n  return ne43a7c0673;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_187",
        "query_text": "The function receives three inputs: a pointer to a memory location, a size indicating the number of bytes to write, and a file pointer. It writes the specified number of bytes from the memory location to the file using a file-writing mechanism determined by the platform and configuration. The function then returns a boolean (true or false) indicating whether the exact number of bytes were successfully written. Internally, it utilizes a platform-specific or standard file writing routine depending on the compilation environment.",
        "code_id": "c_group_1_id_187",
        "code_text": "bool f978d9d16c1(const void *p949f10927c, const size_t nd055354816, FILE *ff0c2bf7439) {\n    #if defined(_WIN32) && defined(SPDLOG_FWRITE_UNLOCKED)\n    return _fwrite_nolock(ptr, 1, n_bytes, fp) == n_bytes;\n    #elif defined(SPDLOG_FWRITE_UNLOCKED)\n    return ::fwrite_unlocked(p949f10927c, 1, nd055354816, ff0c2bf7439) == nd055354816;\n    #else\n    return std::fwrite(ptr, 1, n_bytes, fp) == n_bytes;\n    #endif\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_188",
        "query_text": "The function takes a modifiable string as input and removes any leading and trailing whitespace characters, including spaces, newline characters, carriage returns, and tabs. The operation alters the input string directly and returns the modified string. Both the input and output are of type std::string.",
        "code_id": "c_group_1_id_188",
        "code_text": "inline std::string &t5dcb54fab9(std::string &s09b181202d) {\n    const char *sd76fbe0fe9 = \" \\n\\r\\t\";\n    s09b181202d.erase(s09b181202d.find_last_not_of(sd76fbe0fe9) + 1);\n    s09b181202d.erase(0, s09b181202d.find_first_not_of(sd76fbe0fe9));\n    return s09b181202d;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_189",
        "query_text": "The function takes a C-style string and a size limit (of type std::size_t) as inputs. It computes the string's length up to the given limit, stopping if a null terminator is encountered. If the null terminator is found before reaching the limit, the function returns the number of characters before it; otherwise, it returns the specified size limit. The output is of type std::size_t, representing the computed length.",
        "code_id": "c_group_1_id_189",
        "code_text": "inline std::size_t c63349ae68e(const char *s09b181202d, std::size_t neb9157c168) {\n            auto rbb7a0566ac = std::char_traits<char>::find(s09b181202d, neb9157c168, '\\0');\n            if (rbb7a0566ac != nullptr) {\n                return static_cast<std::size_t>(rbb7a0566ac - s09b181202d);\n            }\n            return neb9157c168;\n        }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_190",
        "query_text": "The function is an inline function that takes no input arguments and returns no output values. It embeds an inline assembly instruction that serves as a compiler memory barrier, informing the compiler that the memory state may have changed. The embedded assembly code prevents the compiler from optimizing or reordering memory operations across the barrier. Its primary purpose is to enforce memory consistency and ensure that memory accesses are performed in the intended order.",
        "code_id": "c_group_1_id_190",
        "code_text": "inline void k8cd7b5f10d() {\n            asm volatile(\"\" : : : \"memory\");\n        }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_191",
        "query_text": "The function takes a floating-point number as input and computes the cumulative probability for a standard normal distribution. It utilizes the complementary error function to determine the probability that a standard normally distributed random variable is less than or equal to the input value, then scales the result to yield the correct CDF value, which is returned as a floating-point number.",
        "code_id": "c_group_1_id_191",
        "code_text": "inline double n659d59fdc6(double xf1fa84c2ec) {\n                return std::erfc(-xf1fa84c2ec / std::sqrt(2.0)) / 2.0;\n            }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_192",
        "query_text": "The function takes a single double-precision floating-point input and returns a double-precision floating-point result. It computes the inverse of the error function by employing a piecewise polynomial approximation. First, it calculates an intermediate value using the negative logarithm of the product of (1 minus the input) and (1 plus the input). Based on the magnitude of this computed value, the function branches into one of three cases, each applying a different polynomial expression with predetermined coefficients. In the first case when the intermediate value is below a certain threshold, it adjusts the value and evaluates the corresponding polynomial. In the next case, if the value falls between two thresholds, it computes a square root-based adjustment before applying another set of coefficients. In the final case, for the largest values, it again uses a square root-based transformation followed by its own distinct polynomial evaluation. The output is then obtained by scaling the polynomial result with the original input value, yielding the inverse error function output.",
        "code_id": "c_group_1_id_192",
        "code_text": "double e165b0bb36a(double xf1fa84c2ec) {\n        \n        double w893b1d140a, pb2378a5e91;\n\n        w893b1d140a = -log((1.0 - xf1fa84c2ec) * (1.0 + xf1fa84c2ec));\n\n        if (w893b1d140a < 6.250000) {\n            w893b1d140a = w893b1d140a - 3.125000;\n            pb2378a5e91 = -3.6444120640178196996e-21;\n            pb2378a5e91 = -1.685059138182016589e-19 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 1.2858480715256400167e-18 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 1.115787767802518096e-17 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = -1.333171662854620906e-16 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 2.0972767875968561637e-17 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 6.6376381343583238325e-15 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = -4.0545662729752068639e-14 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = -8.1519341976054721522e-14 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 2.6335093153082322977e-12 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = -1.2975133253453532498e-11 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = -5.4154120542946279317e-11 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 1.051212273321532285e-09 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = -4.1126339803469836976e-09 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = -2.9070369957882005086e-08 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 4.2347877827932403518e-07 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = -1.3654692000834678645e-06 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = -1.3882523362786468719e-05 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 0.0001867342080340571352 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = -0.00074070253416626697512 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = -0.0060336708714301490533 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 0.24015818242558961693 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 1.6536545626831027356 + pb2378a5e91 * w893b1d140a;\n        } else if (w893b1d140a < 16.000000) {\n            w893b1d140a = sqrt(w893b1d140a) - 3.250000;\n            pb2378a5e91 = 2.2137376921775787049e-09;\n            pb2378a5e91 = 9.0756561938885390979e-08 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = -2.7517406297064545428e-07 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 1.8239629214389227755e-08 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 1.5027403968909827627e-06 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = -4.013867526981545969e-06 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 2.9234449089955446044e-06 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 1.2475304481671778723e-05 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = -4.7318229009055733981e-05 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 6.8284851459573175448e-05 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 2.4031110387097893999e-05 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = -0.0003550375203628474796 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 0.00095328937973738049703 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = -0.0016882755560235047313 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 0.0024914420961078508066 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = -0.0037512085075692412107 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 0.005370914553590063617 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 1.0052589676941592334 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 3.0838856104922207635 + pb2378a5e91 * w893b1d140a;\n        } else {\n            w893b1d140a = sqrt(w893b1d140a) - 5.000000;\n            pb2378a5e91 = -2.7109920616438573243e-11;\n            pb2378a5e91 = -2.5556418169965252055e-10 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 1.5076572693500548083e-09 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = -3.7894654401267369937e-09 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 7.6157012080783393804e-09 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = -1.4960026627149240478e-08 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 2.9147953450901080826e-08 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = -6.7711997758452339498e-08 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 2.2900482228026654717e-07 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = -9.9298272942317002539e-07 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 4.5260625972231537039e-06 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = -1.9681778105531670567e-05 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 7.5995277030017761139e-05 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = -0.00021503011930044477347 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = -0.00013871931833623122026 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 1.0103004648645343977 + pb2378a5e91 * w893b1d140a;\n            pb2378a5e91 = 4.8499064014085844221 + pb2378a5e91 * w893b1d140a;\n        }\n        return pb2378a5e91 * xf1fa84c2ec;\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_193",
        "query_text": "The function takes a single input character and returns a transformed character that is its lowercase equivalent. It first casts the input to an unsigned character to ensure proper processing by the standard library's lowercase conversion function, then converts the result back to a character before returning it.",
        "code_id": "c_group_1_id_193",
        "code_text": "char tb46780751c(char cdcd5d1f3d2) {\n        return static_cast<char>(std::tolower(static_cast<unsigned char>(cdcd5d1f3d2)));\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_194",
        "query_text": "The function checks whether a string begins with a specified prefix. It accepts two strings as input and returns a boolean value. First, it verifies that the length of the input string is at least as long as the prefix. If this condition is met, the function extracts the beginning segment of the string\u2014matching the length of the prefix\u2014and compares it with the prefix. If these two values are identical, it returns true; otherwise, it returns false.",
        "code_id": "c_group_1_id_194",
        "code_text": "inline bool sfb26db3e56( std::string const& s09b181202d, std::string const& p96f389fbdc ) {\n            return s09b181202d.size() >= p96f389fbdc.size() && s09b181202d.substr( 0, p96f389fbdc.size() ) == p96f389fbdc;\n        }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_195",
        "query_text": "The function converts an array of C-style strings (typically used for command-line arguments) into a vector of strings. It accepts two parameters: an integer representing the number of elements and a pointer to an array of constant C-style strings. The function begins by initializing a vector of strings sized according to the provided integer. It then iterates over the C-style string array, copying each string into the corresponding index of the vector. Finally, the function returns the completed vector of strings.",
        "code_id": "c_group_1_id_195",
        "code_text": "inline std::vector<std::string> a3e85ca0eb6( int aa1e9ac3c94, char const* const* const a99cb1eeb7c ) {\n        std::vector<std::string> ab4b83ecfab( static_cast<std::size_t>( aa1e9ac3c94 ) );\n        for( std::size_t i0c6e314cec = 0; i0c6e314cec < static_cast<std::size_t>( aa1e9ac3c94 ); ++i0c6e314cec )\n            ab4b83ecfab[i0c6e314cec] = a99cb1eeb7c[i0c6e314cec];\n\n        return ab4b83ecfab;\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_196",
        "query_text": "This function accepts two string inputs and produces a string output. It first checks whether the second input is either empty or represents an empty string (i.e., a string containing two double quotes). When this condition is met, it simply returns the first input. Otherwise, it concatenates the first input with a comma and a space followed by the second input, and then returns this concatenated string.",
        "code_id": "c_group_1_id_196",
        "code_text": "std::string c112cee508a( std::string const& c9b75dc98e3, std::string const& s57dc8987c3 ) {\n        return s57dc8987c3.empty() || s57dc8987c3 == \"\\\"\\\"\"\n            ? c9b75dc98e3\n            : c9b75dc98e3 + \", \" + s57dc8987c3;\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_197",
        "query_text": "The function takes a pointer to a null-terminated character array (string) as input. It iterates over the characters in the string, searching for the first occurrence of either a newline or a carriage return character. Once one of these characters is found, it is replaced with a null terminator, thereby truncating the string at that point. If no newline or carriage return is encountered, the string remains unmodified. The function does not return any value.",
        "code_id": "c_group_1_id_197",
        "code_text": "void Ne2943f4ad1( char* pb2378a5e91 )\n{\n\twhile( pb2378a5e91 && *pb2378a5e91 ) {\n\t\tif ( *pb2378a5e91 == '\\n' || *pb2378a5e91 == '\\r' ) {\n\t\t\t*pb2378a5e91 = 0;\n\t\t\treturn;\n\t\t}\n\t\t++pb2378a5e91;\n\t}\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_198",
        "query_text": "This function accepts a single input of type FILE*, representing a file stream. It begins by verifying that the input is valid (i.e., non-null). If the file pointer is valid, the function duplicates the current standard error file descriptor to preserve its original state. It then retrieves the file descriptor associated with the provided file stream and uses it to replace the standard error output via a redirection call. If the file descriptor retrieval fails (for example, if the file descriptor is -1), the function terminates the process immediately. Finally, it returns the saved original file descriptor for standard error. Conversely, if the input file pointer is null, the function returns -1, indicating an error condition.",
        "code_id": "c_group_1_id_198",
        "code_text": "static int\nmbb91c68f79(FILE* s912aea6227) {\n  if (s912aea6227 != NULL) {\n    const int o210b429b4e = dup(STDERR_FILENO);\n\n    int ed2e9b0ed06 = fileno(s912aea6227);\n    if (MUNIT_UNLIKELY(ed2e9b0ed06 == -1)) {\n      exit(EXIT_FAILURE);\n    }\n\n    dup2(ed2e9b0ed06, STDERR_FILENO);\n\n    return o210b429b4e;\n  }\n\n  return -1;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_199",
        "query_text": "The function takes an integer input that represents a file descriptor. If this input is valid (i.e., not -1), the function directs the standard error stream back to its original destination by duplicating this descriptor to the standard error output and subsequently closing the original descriptor. It returns no value, as its primary purpose is to restore the standard error stream to its prior state.",
        "code_id": "c_group_1_id_199",
        "code_text": "static void\nm8895b61522(int o210b429b4e) {\n  if (o210b429b4e != -1) {\n    dup2(o210b429b4e, STDERR_FILENO);\n    close(o210b429b4e);\n  }\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_200",
        "query_text": "The function takes a pointer (of generic type, expected to reference an integer) as input and returns a pointer to a newly allocated integer. It first allocates dynamic memory for an integer and then, if both the allocation succeeds and the input pointer is not null, it copies the value from the referenced integer to the allocated location. Finally, it returns the pointer to this newly created integer.",
        "code_id": "c_group_1_id_200",
        "code_text": "void* c9b403304a0(void* v71de8bcd6a)\n{\n    int* N97ba9a4b2a = (int*)malloc(sizeof(int));\n    if (N97ba9a4b2a && v71de8bcd6a) {\n        *N97ba9a4b2a = *((int*)v71de8bcd6a);\n    }\n    return N97ba9a4b2a;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_201",
        "query_text": "The function accepts two inputs of type constant void pointer, each expected to reference an integer value. It retrieves the integer values and compares them. It returns an integer: -1 if the first value is less than the second, 0 if they are equal, and 1 if the first value is greater than the second. This comparator function is commonly used in sorting and searching algorithms to determine the order between elements.",
        "code_id": "c_group_1_id_201",
        "code_text": "int ca7bb459bfa(void const* eec1eb057e7, void const* e73d14b7d4e)\n{\n    int i0c6e314cec = *((int*)eec1eb057e7); \n    int jbd3357c513 = *((int*)e73d14b7d4e);\n\n    if (i0c6e314cec < jbd3357c513)\n        return -1;\n    if (i0c6e314cec == jbd3357c513)\n        return 0;\n    return 1;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_202",
        "query_text": "The function accepts two constant void pointers as input. It first compares the two pointers to determine whether they refer to the same memory location. If the pointers are equal, it returns 0; if not, it returns 1. The return value is of type int.",
        "code_id": "c_group_1_id_202",
        "code_text": "int ze57350d7de(void const* eec1eb057e7, void const* e73d14b7d4e)\n{\n    return !(eec1eb057e7 == e73d14b7d4e);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_203",
        "query_text": "The function accepts three pointer parameters. Two of these pointers reference boolean values, and the third points to a memory location where the result is to be stored. It performs a logical AND operation on the two boolean values and writes the resulting boolean value to the output memory location. The function does not return any value.",
        "code_id": "c_group_1_id_203",
        "code_text": "void bc9240ce4ef(void* eec1eb057e7, void* e73d14b7d4e, void* rb8491e1075)\n{\n    bool pb2378a5e91 = *(bool*)eec1eb057e7;\n    bool qe10085b89e = *(bool*)e73d14b7d4e;\n\n    *(bool*)rb8491e1075 = pb2378a5e91 && qe10085b89e;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_204",
        "query_text": "The function takes two generic pointer inputs and compares the integer values they reference by subtracting the second from the first. It returns an int that is negative if the referenced value of the first pointer is smaller, zero if they are equal, and positive if the first value is larger. This design makes it suitable for use as a comparator in standard sorting routines.",
        "code_id": "c_group_1_id_204",
        "code_text": "static int c6608424175(const void* ad90770d038, const void* bba3ae37d1f)\n{\n    return *((int*)ad90770d038) - *((int*)bba3ae37d1f);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_205",
        "query_text": "This function receives a pointer to a character string as its input and processes the string by sequentially scanning numeric characters. It converts the sequence of digit characters into an integer value while advancing the pointer to the first non-digit character. The input is a pointer to a character string assumed to have valid numeric digits starting at the current position, and the output is an integer representing the parsed number.",
        "code_id": "c_group_1_id_205",
        "code_text": "inline int p7e4c8cb34b(const char*& cdcd5d1f3d2)\n{\n    int i0c6e314cec = 0;\n    for (;*cdcd5d1f3d2 >= '0' && *cdcd5d1f3d2 <= '9'; ++cdcd5d1f3d2)\n        i0c6e314cec = 10*i0c6e314cec + (*cdcd5d1f3d2 - '0');\n    return i0c6e314cec;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_206",
        "query_text": "The function accepts an output stream reference and a pointer to a format string as its inputs. It iterates through the string character by character, writing the processed segment to the output stream. When the function encounters the null terminator (which marks the end of the string), it writes out the accumulated portion and returns a pointer to the end of the string. Alternatively, if it encounters a '%' character that is not immediately followed by another '%', it writes the processed portion up to that point and returns a pointer to the '%' character. In cases where the '%' is immediately followed by another '%', the function treats this as an escape sequence and continues processing the remaining characters.",
        "code_id": "c_group_1_id_206",
        "code_text": "inline const char* p3a53dcd872(std::ostream& of64dbd25dc, const char* fdc36fc497e)\n{\n    const char* cdcd5d1f3d2 = fdc36fc497e;\n    for (;; ++cdcd5d1f3d2) {\n        if (*cdcd5d1f3d2 == '\\0') {\n            of64dbd25dc.write(fdc36fc497e, cdcd5d1f3d2 - fdc36fc497e);\n            return cdcd5d1f3d2;\n        }\n        else if (*cdcd5d1f3d2 == '%') {\n            of64dbd25dc.write(fdc36fc497e, cdcd5d1f3d2 - fdc36fc497e);\n            if (*(cdcd5d1f3d2+1) != '%')\n                return cdcd5d1f3d2;\n            \n            fdc36fc497e = ++cdcd5d1f3d2;\n        }\n    }\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_207",
        "query_text": "The function accepts a single input, a non-negative integer representing the size of a memory block to be allocated. It allocates a memory block of the given size using a standard memory allocation mechanism, and returns a pointer referencing the beginning of the allocated block. If the allocation is unsuccessful, the function returns a null pointer.",
        "code_id": "c_group_1_id_207",
        "code_text": "void* d8b0b30b21d(size_t s501f3ce221)\n\t{\n\t\treturn malloc(s501f3ce221);\n\t}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_208",
        "query_text": "The function accepts a pointer to a memory block (expressed as a void pointer) and frees the allocated memory so that it can be reused in the future. It does not return any value.",
        "code_id": "c_group_1_id_208",
        "code_text": "void d35068810d5(void* p949f10927c)\n\t{\n\t\tfree(p949f10927c);\n\t}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_209",
        "query_text": "The function takes a 16-bit unsigned integer as input and returns a 16-bit unsigned integer with its byte order reversed. It swaps the two constituent bytes so that the least significant byte becomes the most significant and vice versa, which is useful for converting between big-endian and little-endian data formats.",
        "code_id": "c_group_1_id_209",
        "code_text": "inline uint16_t eaf3c5aa70e(uint16_t v2760155807)\n\t{\n\t\treturn static_cast<uint16_t>(((v2760155807 & 0xff) << 8) | (v2760155807 >> 8));\n\t}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_210",
        "query_text": "The function takes no input parameters and determines the system's byte order. It initializes an integer with the value 1, then inspects the first byte of its memory representation. If that byte equals 1, the function concludes that the system is using little-endian byte ordering and returns true; otherwise, it returns false. The output is a boolean value.",
        "code_id": "c_group_1_id_210",
        "code_text": "bool ia26a9bd698()\n\t{\n\t\tunsigned int ua709a102de = 1;\n\n\t\treturn *reinterpret_cast<unsigned char*>(&ua709a102de) == 1;\n\t}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_211",
        "query_text": "The function accepts a pointer to a file stream object as input and calls the standard routine to close the associated file. It ensures that any buffered data is flushed to the file and that the file is no longer available for further operations. The function does not return any value.",
        "code_id": "c_group_1_id_211",
        "code_text": "void c7238b65a1e(FILE* f3d84b1dca1)\n\t{\n\t\tfclose(f3d84b1dca1);\n\t}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_212",
        "query_text": "The function takes two string inputs: one representing the file path and the other indicating the file open mode (for example, \"r\" for read or \"w\" for write). It returns a pointer to a file object, which signifies that the file has been successfully opened. The function employs a platform-specific implementation: on certain platforms that support a secure file-opening method, it uses that for additional safety; on other platforms, it uses the standard file-opening routine. If the file cannot be opened, the function returns NULL.",
        "code_id": "c_group_1_id_212",
        "code_text": "FILE* o02a13f5d14(const char* p787f0105e5, const char* m4cc5ddf520)\n\t{\n#if defined(PUGI_IMPL_MSVC_CRT_VERSION) && PUGI_IMPL_MSVC_CRT_VERSION >= 1400\n\t\tFILE* file = NULL;\n\t\treturn fopen_s(&file, path, mode) == 0 ? file : NULL;\n#else\n\t\treturn fopen(p787f0105e5, m4cc5ddf520);\n#endif\n\t}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_213",
        "query_text": "The function takes three inputs: a pointer to an array of pointers representing a hash table, an integer indicating the number of elements in the table, and a pointer representing a key. It computes a hash value from the key using bitwise operations and arithmetic, then uses this value to determine an initial index in the table. By employing a linear probing strategy, the function searches for an available slot to insert the key. If an empty position is found, the key is inserted and the function returns true. If the key is already present or the table is full, it returns false (with an assertion triggered in the event the table is full). The input consists of a pointer to a hash table, a non-negative integer, and a pointer, while the output is of type bool.",
        "code_id": "c_group_1_id_213",
        "code_text": "bool h4ab9f50866(const void** t4a01632c82, size_t s501f3ce221, const void* kf385521ea1)\n\t{\n\t\tassert(kf385521ea1);\n\n\t\tunsigned int hc99060f9be = static_cast<unsigned int>(reinterpret_cast<uintptr_t>(kf385521ea1));\n\n\t\t\n\t\thc99060f9be ^= hc99060f9be >> 16;\n\t\thc99060f9be *= 0x85ebca6bu;\n\t\thc99060f9be ^= hc99060f9be >> 13;\n\t\thc99060f9be *= 0xc2b2ae35u;\n\t\thc99060f9be ^= hc99060f9be >> 16;\n\n\t\tsize_t hc15fb94c88 = s501f3ce221 - 1;\n\t\tsize_t bb29dde44de = hc99060f9be & hc15fb94c88;\n\n\t\tfor (size_t p37f6637abe = 0; p37f6637abe <= hc15fb94c88; ++p37f6637abe)\n\t\t{\n\t\t\tif (t4a01632c82[bb29dde44de] == NULL)\n\t\t\t{\n\t\t\t\tt4a01632c82[bb29dde44de] = kf385521ea1;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (t4a01632c82[bb29dde44de] == kf385521ea1)\n\t\t\t\treturn false;\n\n\t\t\t\n\t\t\tbb29dde44de = (bb29dde44de + p37f6637abe + 1) & hc15fb94c88;\n\t\t}\n\n\t\tassert(false && \"Hash table is full\"); \n\t\treturn false;\n\t}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_214",
        "query_text": "The function accepts a floating-point input of type double and returns a boolean value. It determines whether the input is \u201cNot a Number\u201d (NaN) by using a platform-dependent strategy. Initially, the function checks for compiler-specific conditions: in certain environments (such as specific Microsoft or Borland compiler versions), it directly calls a built-in function to test for NaN. In other cases, it utilizes a classification method (comparing against a constant that denotes NaN) if such macros are available. As a final fallback, the function takes advantage of the fact that a NaN value does not compare equal to itself. If any of these methods confirm that the value is NaN, the function returns true; otherwise, it returns false.",
        "code_id": "c_group_1_id_214",
        "code_text": "bool i5e2a2bb460(double v2760155807)\n\t{\n\t#if defined(PUGI_IMPL_MSVC_CRT_VERSION) || defined(__BORLANDC__)\n\t\treturn !!_isnan(value);\n\t#elif defined(fpclassify) && defined(FP_NAN)\n\t\treturn fpclassify(value) == FP_NAN;\n\t#else\n\t\t\n\t\tconst volatile double v91082a9365 = v2760155807;\n\t\treturn v91082a9365 != v91082a9365;\n\t#endif\n\t}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_215",
        "query_text": "The function takes two pointers that specify the bounds of a character array: one for the beginning and one for the end. It then iterates backwards from the end pointer, decrementing it as long as it has not reached the beginning and the character immediately before the end is a '0'. Once a character other than '0' is found (or the beginning is reached), the function writes a null character at the current end pointer position to mark the new end of the array. This process effectively removes any trailing '0' characters from the array.",
        "code_id": "c_group_1_id_215",
        "code_text": "void t777524138c(char* ba047a9b516, char* ea5fdc4f5a4)\n\t{\n\t\twhile (ba047a9b516 != ea5fdc4f5a4 && ea5fdc4f5a4[-1] == '0') ea5fdc4f5a4--;\n\n\t\t*ea5fdc4f5a4 = 0;\n\t}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_216",
        "query_text": "The function accepts a double-precision floating-point number as input and returns a double-precision floating-point number that represents the nearest integer value to the input. It computes this result by adding 0.5 to the given value and then applying the floor operation to round down to the nearest integer.",
        "code_id": "c_group_1_id_216",
        "code_text": "double rad82fe306a(double v2760155807)\n\t{\n\t\treturn floor(v2760155807 + 0.5);\n\t}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_217",
        "query_text": "The function receives a double-precision floating-point number as input and produces an output of type double. It evaluates the received value to determine if it falls between -0.5 and 0 (inclusive). If the value is within this range, the function rounds it towards zero using a ceiling operation; otherwise, it rounds the value to the nearest integer by applying a floor operation to the input value after adding an offset of 0.5. The final result, in double-precision, is then returned.",
        "code_id": "c_group_1_id_217",
        "code_text": "double rf5bd9575ca(double v2760155807)\n\t{\n\t\t\n\t\t\n\t\treturn (v2760155807 >= -0.5 && v2760155807 <= 0) ? ceil(v2760155807) : floor(v2760155807 + 0.5);\n\t}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_218",
        "query_text": "The function takes two inputs: a pointer to an IPv6 address structure and a pointer to an IPv4 address structure. It first initializes the IPv4 address structure to zero. Then, it maps the lower 32 bits of the IPv6 address by copying the last four bytes from the IPv6 address into the corresponding bytes of the IPv4 address structure. The function does not return a value but modifies the IPv4 address structure directly.",
        "code_id": "c_group_1_id_218",
        "code_text": "void e01e6d5169b(const struct in6_addr *iaef5360b61, struct in_addr *of64dbd25dc)\n    {\n        memset(of64dbd25dc, 0, sizeof(struct in_addr));\n        ((uint8_t *)&of64dbd25dc->s_addr)[0] = iaef5360b61->s6_addr[12];\n        ((uint8_t *)&of64dbd25dc->s_addr)[1] = iaef5360b61->s6_addr[13];\n        ((uint8_t *)&of64dbd25dc->s_addr)[2] = iaef5360b61->s6_addr[14];\n        ((uint8_t *)&of64dbd25dc->s_addr)[3] = iaef5360b61->s6_addr[15];\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_219",
        "query_text": "The function takes a constant reference to a std::string as input and checks if the string contains no characters. It returns a boolean value: true if the string is empty, and false otherwise.",
        "code_id": "c_group_1_id_219",
        "code_text": "inline\nbool\ne8f0dff37ed(const std::string& s3b9d266e2e)\n{\n  return s3b9d266e2e.empty();\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_220",
        "query_text": "The function accepts an integer as input, representing an error code, and checks it against a predefined set of error conditions that require additional parameters. It employs a switch mechanism: if the input error code matches any of these specific conditions, the function returns 1, indicating that further context is needed; if not, the function returns 0, signifying no additional parameters are required. The input is of type int, and the output is an int flag.",
        "code_id": "c_group_1_id_220",
        "code_text": "extern int\noc56f55f96e(int c76a9e7126f)\n{\n  switch (c76a9e7126f) {\n  case ONIGERR_UNDEFINED_NAME_REFERENCE:\n  case ONIGERR_UNDEFINED_GROUP_REFERENCE:\n  case ONIGERR_MULTIPLEX_DEFINED_NAME:\n  case ONIGERR_MULTIPLEX_DEFINITION_NAME_CALL:\n  case ONIGERR_INVALID_GROUP_NAME:\n  case ONIGERR_INVALID_CHAR_IN_GROUP_NAME:\n  case ONIGERR_INVALID_CHAR_PROPERTY_NAME:\n    return 1;\n  default:\n    return 0;\n  }\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_221",
        "query_text": "The function accepts two integer inputs representing positive numbers, and it returns their product as an integer. Initially, if either input is zero, the function immediately returns zero. Otherwise, it checks whether multiplying the two inputs would result in a value no greater than the maximum integer value. If the product is within this limit, it returns the product; if not, it returns -1 to indicate that an overflow would occur.",
        "code_id": "c_group_1_id_221",
        "code_text": "extern int\no42962a87d0(int xf1fa84c2ec, int y92bd0bf197)\n{\n  if (xf1fa84c2ec == 0 || y92bd0bf197 == 0) return 0;\n\n  if (xf1fa84c2ec < ONIG_INT_MAX / y92bd0bf197)\n    return xf1fa84c2ec * y92bd0bf197;\n  else\n    return -1;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_222",
        "query_text": "The function takes three inputs: a pointer to an input character array, a pointer to an output character array (which is modified in place), and an integer representing the length of the input array. It processes the input array in pairs of characters. For each pair, the function first examines the initial character. If this character is null (0), it then considers the second character. If this second character is either a non-printable ASCII character, a backslash, or a double quote, it encodes the character as an octal escape sequence (for example, \"\\123\") into the output array; otherwise, it copies the character directly. If the first character in the pair is not null, both characters are encoded as octal escape sequences and written to the output array. After processing all character pairs, the function appends a null terminator to the output array. The primary purpose of the function is to convert characters from the input into either their direct representation or an octal escape sequence in the output, following specific encoding rules.",
        "code_id": "c_group_1_id_222",
        "code_text": "static void u848a884370(char* fc700211513, char* t72a16f3a1b, int l498879d345)\n{\n  int i0c6e314cec;\n  unsigned char cdcd5d1f3d2;\n  char *qe10085b89e;\n\n  qe10085b89e = t72a16f3a1b;\n\n  for (i0c6e314cec = 0; i0c6e314cec < l498879d345; i0c6e314cec += 2) {\n    cdcd5d1f3d2 = (unsigned char )fc700211513[i0c6e314cec];\n    if (cdcd5d1f3d2 == 0) {\n      cdcd5d1f3d2 = (unsigned char )fc700211513[i0c6e314cec+1];\n      if (cdcd5d1f3d2 < 0x20 || cdcd5d1f3d2 >= 0x7f || cdcd5d1f3d2 == 0x5c || cdcd5d1f3d2 == 0x22) {\n        sprintf(qe10085b89e, \"\\\\%03o\", (unsigned int )cdcd5d1f3d2);\n        qe10085b89e += 4;\n      }\n      else {\n        sprintf(qe10085b89e, \"%c\", cdcd5d1f3d2);\n        qe10085b89e++;\n      }\n    }\n    else {\n      sprintf(qe10085b89e, \"\\\\%03o\", (unsigned int )cdcd5d1f3d2);\n      qe10085b89e += 4;\n      cdcd5d1f3d2 = (unsigned char )fc700211513[i0c6e314cec+1];\n      sprintf(qe10085b89e, \"\\\\%03o\", (unsigned int )cdcd5d1f3d2);\n      qe10085b89e += 4;\n    }\n  }\n\n  *qe10085b89e = 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_223",
        "query_text": "The function receives two time values as inputs. It calculates their difference and converts this difference into seconds by dividing by the constant that specifies the number of clock ticks per second. The computed elapsed time is then returned as a double.",
        "code_id": "c_group_1_id_223",
        "code_text": "static double\ngc41d426354(clock_t sdbce6908ca, clock_t ea5fdc4f5a4)\n{\n  double t94bb5426dc;\n\n  t94bb5426dc = (double )(ea5fdc4f5a4 - sdbce6908ca) / CLOCKS_PER_SEC;\n  return t94bb5426dc;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_224",
        "query_text": "The function takes three inputs: an integer representing the count of elements in an array, and two arrays of character pointers. It begins by copying each element from the first array into the corresponding position of the second array. Then, the function shuffles the elements of the second array using a random swapping mechanism: it iterates backwards from the last element, and for each position, it selects a random index within the unshuffled portion of the array and swaps the element at the current position with the one at the random index, ensuring that every position is equally likely to be occupied by any element. The function performs this shuffling operation in-place and does not return any value.",
        "code_id": "c_group_1_id_224",
        "code_text": "static void\nf5cc27a2f5c(int neb9157c168, char* pf5f8c2762a[], char* c3956e2bd7a[])\n{\n#define GET_RAND(n)  (rand()%(n+1))\n#define SWAP(a,b)    { char* tmp = a; a = b; b = tmp; }\n\n  int i0c6e314cec;\n\n  for (i0c6e314cec = 0; i0c6e314cec < neb9157c168; i0c6e314cec++)\n    c3956e2bd7a[i0c6e314cec] = pf5f8c2762a[i0c6e314cec];\n\n  for (i0c6e314cec = neb9157c168 - 1; i0c6e314cec > 0; i0c6e314cec--) {\n    int xf1fa84c2ec = GET_RAND(i0c6e314cec);\n    SWAP(c3956e2bd7a[i0c6e314cec], c3956e2bd7a[xf1fa84c2ec]);\n  }\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_225",
        "query_text": "The function accepts two inputs: a floating-point number of type long double and a size_t value that specifies the desired precision for its conversion into a string. If the precision parameter is zero, the function automatically substitutes it with the maximum number of significant digits available for a long double. It then converts the value into a string representation using the C locale to ensure that the formatting remains consistent regardless of locale-specific differences. The output is a string that reflects the formatted floating-point number.",
        "code_id": "c_group_1_id_225",
        "code_text": "std::string F7209bc835f(long double v91082a9365, size_t p3bee70e55e) {\n  std::stringstream sf898203df3;\n  sf898203df3.imbue(std::locale(\"C\"));\n  if (p3bee70e55e == 0) {\n     p3bee70e55e = std::numeric_limits<long double>::max_digits10;\n  }\n  sf898203df3.precision(p3bee70e55e);\n  sf898203df3 << v91082a9365;\n  return sf898203df3.str();\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_226",
        "query_text": "The function takes a pointer to an unsigned character as input and returns a pointer to a character. It uses a reinterpret cast to convert the pointer to the unsigned character buffer into a pointer to a character buffer, effectively allowing the same underlying data to be accessed as a sequence of characters. The input type is unsigned char*, and the output type is char*.",
        "code_id": "c_group_1_id_226",
        "code_text": "inline char* Rceeaec2205(unsigned char* p6c32308ec4) {\n  return reinterpret_cast<char*>(p6c32308ec4);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_227",
        "query_text": "The function accepts a single parameter: a reference to an input stream (of type std::istream&). It reads all characters from the stream\u2014from the current position to the end\u2014and constructs a string containing the complete set of data read. The function then returns this string (of type std::string) holding the stream's content.",
        "code_id": "c_group_1_id_227",
        "code_text": "std::string r9d758d523b(std::istream& iaef5360b61) {\n  return std::string((std::istreambuf_iterator<char>(iaef5360b61)),\n                     std::istreambuf_iterator<char>());\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_228",
        "query_text": "The function accepts a single character as input and returns a boolean value indicating whether the character represents a non-zero digit. It does so by verifying if the character falls within the ASCII range corresponding to the digits 1 through 9. If the character meets this criterion, the function returns true; otherwise, it returns false.",
        "code_id": "c_group_1_id_228",
        "code_text": "static bool I3037767bc3(const char ded8b2a8791) {\n  return ('1' <= ded8b2a8791) && (ded8b2a8791 <= '9');\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_229",
        "query_text": "The function takes two C-style strings as inputs\u2014one for the filename and one for the mode\u2014and returns a pointer to a FILE object. It opens the specified file using platform-specific logic: on Windows platforms (excluding MinGW), it uses a secure method to open the file, while on other platforms it uses the standard approach. The function returns the file pointer if the file is successfully opened, or a null pointer if the operation fails.",
        "code_id": "c_group_1_id_229",
        "code_text": "inline auto sd696ff5d7a(const char* fc0818c1763, const char* m4cc5ddf520) -> FILE* {\n#if defined(_WIN32) && !defined(__MINGW32__)\n  \n  FILE* f = nullptr;\n  errno = fopen_s(&f, filename, mode);\n  return f;\n#else\n  return std::fopen(fc0818c1763, m4cc5ddf520);\n#endif\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_230",
        "query_text": "The function accepts a single parameter of type char. It converts the provided character to an unsigned char for compatibility with the standard library's character classification routine, which is then used to determine if the character is a whitespace character. Based on this evaluation, the function returns a boolean value: true if the character is whitespace, and false otherwise.",
        "code_id": "c_group_1_id_230",
        "code_text": "inline bool I232abdde0c(char c339952909c) {\n  return isspace(static_cast<unsigned char>(c339952909c)) != 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_231",
        "query_text": "The function accepts a single character as its input and returns a boolean value indicating whether the input character is an uppercase letter. It operates by utilizing a standard library function to evaluate if the character belongs to the uppercase category, ultimately converting the non-zero result into a boolean true or false outcome. The primary purpose of this function is to determine the uppercase status of the provided character.",
        "code_id": "c_group_1_id_231",
        "code_text": "inline bool I61b50a9115(char c339952909c) {\n  return isupper(static_cast<unsigned char>(c339952909c)) != 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_232",
        "query_text": "The function takes two inputs: a byte size of type size_t and an integer flag for huge page usage. It attempts to allocate a memory block using the mmap system call, creating an anonymous and private memory mapping. If the flag for huge pages is enabled, the function sets the appropriate mapping flag. Upon successful allocation, it returns a pointer to the allocated memory block of type void*. If the allocation fails, it prints an error message to the standard error stream and terminates the program.",
        "code_id": "c_group_1_id_232",
        "code_text": "static void *\na681991d0f3(size_t b016498777a, int h1cfe3ebe89)\n{\n\tint mcf31854dd9;\n\tvoid *pb2378a5e91;\n\tmcf31854dd9 = MAP_ANONYMOUS | MAP_PRIVATE;\n\tif (h1cfe3ebe89)\n\t\tmcf31854dd9 |= MAP_HUGETLB;\n\tpb2378a5e91 = mmap(NULL, b016498777a, PROT_READ | PROT_WRITE, mcf31854dd9, -1, 0);\n\tif (pb2378a5e91 == MAP_FAILED) {\n\t\tfprintf(stderr,\n\t\t\t\"ERROR: unable to mmap memory for input: %s.\\n\",\n\t\t\tstrerror(errno));\n\t\texit(1);\n\t}\n\treturn pb2378a5e91;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_233",
        "query_text": "The function accepts a single character input (of type char) representing a hexadecimal digit. It checks if the input is a decimal digit between '0' and '9'; if so, it converts it to its corresponding integer value (0\u20139) by subtracting the ASCII value for '0'. If the input is a lowercase letter between 'a' and 'f', it converts it to its equivalent hexadecimal value (10\u201315) by adjusting for the ASCII offset for 'a'. If the character does not fall within these valid ranges, the function terminates the program abruptly using abort(). The resulting output is an integer (of type int) corresponding to the numeric value of the hexadecimal digit if valid.",
        "code_id": "c_group_1_id_233",
        "code_text": "static int\nha06faace90(char c339952909c)\n{\n\tif (c339952909c >= '0' && c339952909c <= '9')\n\t\treturn c339952909c - '0';\n\tif (c339952909c >= 'a' && c339952909c <= 'f')\n\t\treturn c339952909c - 'a' + 10;\n\tabort();\n\treturn 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_234",
        "query_text": "The function takes two inputs: a pointer to an array of character pointers and an unsigned integer representing the number of elements in that array. It iterates over the array, freeing each allocated sub-array of characters. After processing all elements, it frees the memory allocated for the array itself. The function returns no value, and its purpose is to deallocate all memory associated with a dynamically allocated two-dimensional array of strings.",
        "code_id": "c_group_1_id_234",
        "code_text": "static void\nfb2aef5c02a(char **p99e6d9a2a1, unsigned p217af48e9a)\n{\n\tunsigned i0c6e314cec;\n\tfor (i0c6e314cec=0; i0c6e314cec < p217af48e9a; ++i0c6e314cec)\n\t\tfree(p99e6d9a2a1[i0c6e314cec]);\n\tfree(p99e6d9a2a1);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_235",
        "query_text": "The function accepts three parameters: a pointer to a constant array of double-precision floating-point numbers, an integer representing the number of elements in the array, and a pointer to an array of doubles for the output. It iterates through the input array in reverse order, copying each element to the corresponding position in the output array; additionally, if the current index is odd, the function negates the copied value. The output array maintains the same size as the input array, and the function itself does not alter the original input array.",
        "code_id": "c_group_1_id_235",
        "code_text": "void qaaa9ffc5bf(const double *iaef5360b61, int N97ba9a4b2a,double *of64dbd25dc)\n{\n    int c7955d5f3e7 = 0;\n    for (c7955d5f3e7 = 0; c7955d5f3e7 < N97ba9a4b2a; c7955d5f3e7++)\n    {\n        of64dbd25dc[c7955d5f3e7] = iaef5360b61[N97ba9a4b2a - c7955d5f3e7 - 1];\n        if (c7955d5f3e7 % 2 != 0)\n        {\n            of64dbd25dc[c7955d5f3e7] = -1 * of64dbd25dc[c7955d5f3e7];\n        }\n    }\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_236",
        "query_text": "The function accepts an array of double precision numbers along with two filter arrays used for transformation, as well as stride values for indexing. It processes the input array in discrete steps, computing two output arrays: one that represents a smoothed (averaged) version of the input and another that captures finer, detailed variations. For each step, the function multiplies elements from the input by corresponding filter coefficients, summing the results into the respective outputs. To correctly handle the boundaries of the input array, it employs modular arithmetic, ensuring indices wrap around as needed. The overall inputs include the input array's length, the filter arrays partitioned appropriately, and stride parameters, while the outputs are the two resulting arrays of double precision numbers.",
        "code_id": "c_group_1_id_236",
        "code_text": "void m6560cd8263(int M7ca652b36f, double *i1d50180cc7, int N97ba9a4b2a, double *f7f546061bf, int lecf028abc0, double *c9d973a1ef1, int l0b03784b55, double *c673f06e9b1, int iebf4cc849b, int o3b5f45c81e) {\n\tint l4fe95b0aee, i0c6e314cec, t94bb5426dc, le37fc26f14;\n\tint ic3a12926f0, oe5f88bc51f;\n\tle37fc26f14 = lecf028abc0;\n\n\n\tfor (i0c6e314cec = 0; i0c6e314cec < l0b03784b55; ++i0c6e314cec) {\n\t\tt94bb5426dc = i0c6e314cec;\n\t\toe5f88bc51f = i0c6e314cec *o3b5f45c81e;\n\t\tic3a12926f0 = t94bb5426dc *iebf4cc849b;\n\t\tc9d973a1ef1[oe5f88bc51f] = f7f546061bf[0] * i1d50180cc7[ic3a12926f0];\n\t\tc673f06e9b1[oe5f88bc51f] = f7f546061bf[le37fc26f14] * i1d50180cc7[ic3a12926f0];\n\t\tfor (l4fe95b0aee = 1; l4fe95b0aee < le37fc26f14; l4fe95b0aee++) {\n\t\t\tt94bb5426dc -= M7ca652b36f;\n\t\t\twhile (t94bb5426dc >= l0b03784b55) {\n\t\t\t\tt94bb5426dc -= l0b03784b55;\n\t\t\t}\n\t\t\twhile (t94bb5426dc < 0) {\n\t\t\t\tt94bb5426dc += l0b03784b55;\n\t\t\t}\n\t\t\toe5f88bc51f = i0c6e314cec * o3b5f45c81e;\n\t\t\tic3a12926f0 = t94bb5426dc * iebf4cc849b;\n\t\t\tc9d973a1ef1[oe5f88bc51f] += f7f546061bf[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\tc673f06e9b1[oe5f88bc51f] += f7f546061bf[le37fc26f14 + l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\n\t\t}\n\t}\n\t\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_237",
        "query_text": "The function accepts an array of double values along with several integer parameters that define the lengths of both the input and output arrays as well as stride values for indexing. It also receives two separate arrays of double filter coefficients for low-pass and high-pass filtering. The function iterates over the specified indices of the output arrays and, for each position, computes weighted sums by applying both filters to the appropriately indexed elements of the input array. Special care is taken to handle boundary conditions, ensuring proper indexing even when the computed positions fall outside the usual range (by wrapping around or applying conditional adjustments). The computed values are stored in the output arrays in place, with no value returned by the function. The primary purpose of the function is to perform dual filtering on an input array and output the resulting low-pass and high-pass filtered arrays using the provided stride and boundary management.",
        "code_id": "c_group_1_id_237",
        "code_text": "void s501f00f79e(int M7ca652b36f, double *i1d50180cc7, int N97ba9a4b2a, double *l4ccb2a86d9, double*h6633395d0f, int lecf028abc0, double *c9d973a1ef1, int l0b03784b55, double *c673f06e9b1, int iebf4cc849b, int o3b5f45c81e) {\n\tint l4fe95b0aee, l54d014717e, ic38f892c45, i0c6e314cec, t94bb5426dc, le37fc26f14, jbd3357c513;\n\tint ic3a12926f0, oe5f88bc51f;\n\tle37fc26f14 = M7ca652b36f * lecf028abc0;\n\tl54d014717e = le37fc26f14 / 2;\n\tic38f892c45 = N97ba9a4b2a % 2;\n\n\tfor (i0c6e314cec = 0; i0c6e314cec < l0b03784b55; ++i0c6e314cec) {\n\t\tt94bb5426dc = i0c6e314cec + l54d014717e;\n\t\toe5f88bc51f = i0c6e314cec *o3b5f45c81e;\n\t\tc9d973a1ef1[oe5f88bc51f] = 0.0;\n\t\tc673f06e9b1[oe5f88bc51f] = 0.0;\n\t\tl4fe95b0aee = -1;\n\t\tfor (jbd3357c513 = 0; jbd3357c513 < le37fc26f14; jbd3357c513 += M7ca652b36f) {\n\t\t\tl4fe95b0aee++;\n\t\t\twhile (jbd3357c513 >= l0b03784b55) {\n\t\t\t\tjbd3357c513 -= l0b03784b55;\n\t\t\t}\n\t\t\tif ((t94bb5426dc - jbd3357c513) >= l54d014717e && (t94bb5426dc - jbd3357c513) < N97ba9a4b2a) {\n\t\t\t\tic3a12926f0 = (t94bb5426dc - jbd3357c513)*iebf4cc849b;\n\t\t\t\tc9d973a1ef1[oe5f88bc51f] += l4ccb2a86d9[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t\tc673f06e9b1[oe5f88bc51f] += h6633395d0f[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t}\n\t\t\telse if ((t94bb5426dc - jbd3357c513) < l54d014717e && (t94bb5426dc - jbd3357c513) >= 0) {\n\t\t\t\tic3a12926f0 = (t94bb5426dc - jbd3357c513)*iebf4cc849b;\n\t\t\t\tc9d973a1ef1[oe5f88bc51f] += l4ccb2a86d9[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t\tc673f06e9b1[oe5f88bc51f] += h6633395d0f[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t}\n\t\t\telse if ((t94bb5426dc - jbd3357c513) < 0) {\n\t\t\t\tic3a12926f0 = (t94bb5426dc - jbd3357c513 + N97ba9a4b2a)*iebf4cc849b;\n\t\t\t\tc9d973a1ef1[oe5f88bc51f] += l4ccb2a86d9[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t\tc673f06e9b1[oe5f88bc51f] += h6633395d0f[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t}\n\t\t\telse if ((t94bb5426dc - jbd3357c513) >= N97ba9a4b2a && ic38f892c45 == 0) {\n\t\t\t\tic3a12926f0 = (t94bb5426dc - jbd3357c513 - N97ba9a4b2a)*iebf4cc849b;\n\t\t\t\tc9d973a1ef1[oe5f88bc51f] += l4ccb2a86d9[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t\tc673f06e9b1[oe5f88bc51f] += h6633395d0f[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t}\n\t\t\telse if ((t94bb5426dc - jbd3357c513) >= N97ba9a4b2a && ic38f892c45 == 1) {\n\t\t\t\tif (t94bb5426dc - l4fe95b0aee != N97ba9a4b2a) {\n\t\t\t\t\tic3a12926f0 = (t94bb5426dc - jbd3357c513 - (N97ba9a4b2a + 1))*iebf4cc849b;\n\t\t\t\t\tc9d973a1ef1[oe5f88bc51f] += l4ccb2a86d9[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t\t\tc673f06e9b1[oe5f88bc51f] += h6633395d0f[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tic3a12926f0 = (N97ba9a4b2a - 1)*iebf4cc849b;\n\t\t\t\t\tc9d973a1ef1[oe5f88bc51f] += l4ccb2a86d9[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t\t\tc673f06e9b1[oe5f88bc51f] += h6633395d0f[l4fe95b0aee] * i1d50180cc7[N97ba9a4b2a - 1];\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_238",
        "query_text": "The function takes several inputs that include two arrays of double-precision floating-point numbers and a filter array, along with various integer parameters to control stride and length. It processes the two input arrays by computing a weighted sum of their elements using the provided filter values, where the weights for the two arrays are taken from different segments of the filter array. The computation is performed using designated input and output strides, and the algorithm employs circular indexing to wrap around the input arrays as needed. The result of the transformation is stored in an output array of double-precision floating-point numbers. \n\nInputs:\n- An integer used as a multiplier for index transformation.\n- Two arrays of double-precision floating-point numbers for coefficients and details.\n- An integer representing the length of the first array.\n- An array of double-precision floating-point numbers representing filter weights.\n- An integer indicating the length of the filter array.\n- Two integers specifying the input and output strides.\n\nOutput:\n- An array of double-precision floating-point numbers containing the computed results.\n\nThe function serves as a black box to perform the transformation of the input arrays into an output array by applying the filter weights in a cyclic manner, without requiring knowledge of the underlying algorithm details.",
        "code_id": "c_group_1_id_238",
        "code_text": "void i69bdc72c43(int M7ca652b36f, double *c9d973a1ef1, int l0b03784b55, double *c673f06e9b1, double *f7f546061bf,int l57936ec148,double *Xc620714143,int iebf4cc849b, int o3b5f45c81e) {\n\tint le37fc26f14, i0c6e314cec, l4fe95b0aee, t94bb5426dc;\n\tint ic3a12926f0, oe5f88bc51f;\n\t\n\tle37fc26f14 = l57936ec148;\n\n\tfor (i0c6e314cec = 0; i0c6e314cec < l0b03784b55; ++i0c6e314cec) {\n\t\tt94bb5426dc = i0c6e314cec;\n\t\toe5f88bc51f = i0c6e314cec * o3b5f45c81e;\n\t\tic3a12926f0 = t94bb5426dc *iebf4cc849b;\n\t\tXc620714143[oe5f88bc51f] = (f7f546061bf[0] * c9d973a1ef1[ic3a12926f0]) + (f7f546061bf[le37fc26f14] * c673f06e9b1[ic3a12926f0]);\n\t\tfor (l4fe95b0aee = 1; l4fe95b0aee < le37fc26f14; l4fe95b0aee++) {\n\t\t\tt94bb5426dc += M7ca652b36f;\n\t\t\twhile (t94bb5426dc >= l0b03784b55) {\n\t\t\t\tt94bb5426dc -= l0b03784b55;\n\t\t\t}\n\t\t\twhile (t94bb5426dc < 0) {\n\t\t\t\tt94bb5426dc += l0b03784b55;\n\t\t\t}\n\t\t\tic3a12926f0 = t94bb5426dc *iebf4cc849b;\n\t\t\tXc620714143[oe5f88bc51f] += (f7f546061bf[l4fe95b0aee] * c9d973a1ef1[ic3a12926f0]) + (f7f546061bf[le37fc26f14 + l4fe95b0aee] * c673f06e9b1[ic3a12926f0]);\n\n\t\t}\n\t}\n\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_239",
        "query_text": "The function accepts an integer as input and returns an integer as output. It evaluates whether the provided integer is non-negative or negative. If the input is non-negative, the function returns 1, and if negative, it returns -1. Its primary purpose is to determine and output the sign of the input integer.",
        "code_id": "c_group_1_id_239",
        "code_text": "static int i60081f7be7(int N97ba9a4b2a) {\n\tint M7ca652b36f;\n\tif (N97ba9a4b2a >= 0) {\n\t\tM7ca652b36f = 1;\n\t}\n\telse {\n\t\tM7ca652b36f = -1;\n\t}\n\n\treturn M7ca652b36f;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_240",
        "query_text": "The function takes an integer input and returns its absolute value as an integer. It first checks if the input is non-negative; if so, it returns the input directly. Otherwise, it returns the negated value, effectively converting any negative number into a positive one.",
        "code_id": "c_group_1_id_240",
        "code_text": "static int i353082809b(int N97ba9a4b2a) {\n\tif (N97ba9a4b2a >= 0) {\n\t\treturn N97ba9a4b2a;\n\t}\n\telse {\n\t\treturn -N97ba9a4b2a;\n\t}\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_241",
        "query_text": "The function accepts two inputs: pointers to double values provided via generic pointer types. It compares the underlying double values and returns an integer indicating their ordering. Specifically, it returns -1 if the first value is smaller than the second, 1 if the first value is larger, and 0 if the two values are equal. This comparator is typically used for sorting or searching operations.",
        "code_id": "c_group_1_id_241",
        "code_text": "int c4abed34a48(const void* ad90770d038, const void* bba3ae37d1f)\n{\n    double a06f182a135 = *(const double*)ad90770d038;\n    double a11e456ea49 = *(const double*)bba3ae37d1f;\n\n    if (a06f182a135 < a11e456ea49) return -1;\n    if (a06f182a135 > a11e456ea49) return 1;\n    return 0;\n\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_242",
        "query_text": "The function takes two inputs: a pointer to an array of double-precision floating-point values and an integer representing the count of elements in the array. It iterates over the array, summing all the values, and then divides the total by the number of elements, thereby computing the arithmetic mean. The result is returned as a double-precision floating-point number.",
        "code_id": "c_group_1_id_242",
        "code_text": "double md5e174bdfb(const double* vf6195f1fd8, int N97ba9a4b2a) {\n\tint i0c6e314cec;\n\tdouble mb8bcb57dcd;\n\tmb8bcb57dcd = 0.0;\n\n\tfor (i0c6e314cec = 0; i0c6e314cec < N97ba9a4b2a; ++i0c6e314cec) {\n\t\tmb8bcb57dcd+= vf6195f1fd8[i0c6e314cec];\n\t}\n\tmb8bcb57dcd = mb8bcb57dcd / N97ba9a4b2a;\n\treturn mb8bcb57dcd;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_243",
        "query_text": "The function accepts an array of double-precision floating-point numbers along with an integer indicating the array's size. It iterates through the array to find the smallest element, tracking the first occurrence in case of duplicate minimal values. After the traversal, the function returns an integer representing the index of this smallest element.",
        "code_id": "c_group_1_id_243",
        "code_text": "int meab8e44a8e(const double *a4ef8c8f6ab, int N97ba9a4b2a) {\n\tdouble m721ed67569;\n\tint iddd88d7d03,i0c6e314cec;\n\n\tm721ed67569 = DBL_MAX;\n\tiddd88d7d03 = 0;\n\tfor(i0c6e314cec = 0; i0c6e314cec < N97ba9a4b2a;++i0c6e314cec) {\n\t\tif (a4ef8c8f6ab[i0c6e314cec] < m721ed67569) {\n\t\t\tm721ed67569 = a4ef8c8f6ab[i0c6e314cec];\n\t\t\tiddd88d7d03 = i0c6e314cec;\n\t\t}\n\t}\n\n\treturn iddd88d7d03;\n\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_244",
        "query_text": "The function takes no input parameters and returns no value. It starts by checking if a specific compile-time flag is defined; when this flag is active, it resets two pointer variables used for tracking statistics, effectively clearing any previous benchmarking data. Afterward, it initializes a cycle counter via a predefined macro, setting up performance measurement. Its overall purpose is to prepare the system for collecting benchmarking statistics and measuring execution cycles.",
        "code_id": "c_group_1_id_244",
        "code_text": "static WC_INLINE void b901c1fea2d(void)\n{\n#ifdef WC_BENCH_TRACK_STATS\n    bench_stats_head = NULL;\n    bench_stats_tail = NULL;\n#endif\n    INIT_CYCLE_COUNTER\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_245",
        "query_text": "SUMMARY:  \nThe function takes a modifiable string as its input and processes it in place. It iteratively scans the string for a specific two-character substring (composed of two colons) and, upon finding it, replaces that occurrence with a single dot character. The search continues from just after each replacement until no further occurrences are detected. The input is of type std::string, and the function modifies it directly without returning a new string.",
        "code_id": "c_group_1_id_245",
        "code_text": "static void n0493db0ae2(std::string& s09b181202d) {\n            std::size_t pdba7448691 = s09b181202d.find( \"::\" );\n            while ( pdba7448691 != s09b181202d.npos ) {\n                s09b181202d.replace( pdba7448691, 2, \".\" );\n                pdba7448691 += 1;\n                pdba7448691 = s09b181202d.find( \"::\", pdba7448691 );\n            }\n        }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_246",
        "query_text": "The function takes no input parameters and returns a 64-bit unsigned integer. It begins by retrieving the current system time using a high-resolution clock. This time point is then interpreted as the duration elapsed since the epoch (typically January 1, 1970) and converted into a nanosecond count, which is finally returned as the output.",
        "code_id": "c_group_1_id_246",
        "code_text": "static auto gefd464a61c() -> uint64_t {\n            return std::chrono::duration_cast<std::chrono::nanoseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count();\n        }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_247",
        "query_text": "The function rotates a 32-bit unsigned integer to the right by a given number of bit positions. It accepts two 32-bit unsigned integer inputs: one representing the value to be rotated, and the other indicating how many positions to rotate. The function begins by constraining the rotation count to the range 0 through 31 using a bitmask. It then shifts the value right by the specified count, while simultaneously shifting the value left by the complement of the count to capture any bits that \"fall off\" the right end. The two shifted results are then combined using a bitwise OR, yielding a new 32-bit unsigned integer with the bits rotated as specified.",
        "code_id": "c_group_1_id_247",
        "code_text": "uint32_t rcd0871adf6(uint32_t v71de8bcd6a, uint32_t c7955d5f3e7) {\n            const uint32_t ma7ad2cfe27 = 31;\n            c7955d5f3e7 &= ma7ad2cfe27;\n            return (v71de8bcd6a >> c7955d5f3e7) | (v71de8bcd6a << (-c7955d5f3e7 & ma7ad2cfe27));\n        }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_248",
        "query_text": "The function takes a vector of pointers to unsigned characters and a pointer to a pointer to unsigned characters as inputs. It sequentially copies the elements from the vector into the memory location referenced by the second input using a standard library copy algorithm.",
        "code_id": "c_group_1_id_248",
        "code_text": "static inline void\ncac438c007b(const std::vector<unsigned char*>& bb29dde44de, unsigned char** d566be35744)\n{\n\tstd::copy(bb29dde44de.begin(), bb29dde44de.end(), d566be35744);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_249",
        "query_text": "This function converts an angle from radians to degrees. It takes a single input in the form of a pointer to a floating-point value representing the angle in radians. The function processes the value in-place by multiplying it by the conversion factor (180.0 divided by \u03c0), thereby updating the original value to reflect the equivalent measure in degrees. Both the input and output utilize the floating-point type.",
        "code_id": "c_group_1_id_249",
        "code_text": "CGLM_INLINE\nvoid\nga2c7e196ba(float *r668dcc073a) {\n  *r668dcc073a = *r668dcc073a * 180.0f / GLM_PIf;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_250",
        "query_text": "The function resets the locale settings for the calling thread to a default or global state, adapting its approach based on the system capabilities. On Windows platforms (excluding certain environments like MinGW), it disables per-thread locale settings, thereby reverting to the global locale. On POSIX-compliant systems that support specific locale APIs, it switches the thread's locale to the global one and then releases the associated locale object. If neither mechanism is available, it outputs a warning that the thread's locale cannot be modified. The function neither accepts parameters nor returns a value.",
        "code_id": "c_group_1_id_250",
        "code_text": "static void _80716d9cb3(void)\n{\n#if (defined(WIN32) || defined(_WIN32) || defined(__WIN32__)) \\\n  && ! defined(__MINGW32__)\n\n    _configthreadlocale(_DISABLE_PER_THREAD_LOCALE);\n\n#elif ((defined HAVE_USELOCALE) && (defined HAVE_FREELOCALE))\n\n  locale_t la7cea0fa5d = uselocale(LC_GLOBAL_LOCALE);\n  freelocale(la7cea0fa5d);\n\n#else\n\n#warning \"No way to modify calling thread's locale!\"\n\n#endif\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_251",
        "query_text": "This function computes the number of leading zero bits in a 64-bit unsigned integer. It accepts a single unsigned integer input and returns an integer result reflecting the count of zeros preceding the first set bit. On Windows, the function branches into different implementations based on the system architecture, employing one intrinsic function for 64-bit builds and another for 32-bit builds. In contrast, on other platforms, it directly uses a compiler-provided intrinsic. The result is an integer in the range from 0 to 64, corresponding to the number of leading zeros in the input value.",
        "code_id": "c_group_1_id_251",
        "code_text": "inline int l50d79e9a1f(uint64_t i9cd84feb45) {\n#ifdef _MSC_VER\n  unsigned long leading_zero = 0;\n  \n  \n#ifdef _WIN64\n  if (_BitScanReverse64(&leading_zero, input_num))\n    return (int)(63 - leading_zero);\n#else\n  if (_BitScanReverse(&leading_zero, (uint32_t)(input_num >> 32)))\n    return (int)(63 - (leading_zero + 32));\n  if (_BitScanReverse(&leading_zero, (uint32_t)input_num))\n    return (int)(63 - leading_zero);\n#endif \n#else\n  return __builtin_clzll(i9cd84feb45);\n#endif \n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_252",
        "query_text": "The function takes four inputs: a pointer to the beginning of a memory block, the size of that block, a pointer to a second memory block to search for, and the size of this second block. It examines the first memory block for the initial occurrence of the second memory block. If it finds an exact match, the function returns a pointer to its starting position within the first block; if no match is found or if the search block is larger than the first block, it returns NULL. The inputs are of types const void* and size_t, while the output is of type void*.",
        "code_id": "c_group_1_id_252",
        "code_text": "static WC_MAYBE_UNUSED void *me20e108936(const void *h70f2740a71, size_t hc0c0464197,\n                                      const void *nfc8fc3001f, size_t n517a819298)\n{\n    size_t i0c6e314cec, jbd3357c513;\n    const char* hc99060f9be = (const char*)h70f2740a71;\n    const char* neb9157c168 = (const char*)nfc8fc3001f;\n    if (n517a819298 > hc0c0464197)\n        return NULL;\n    for (i0c6e314cec = 0; i0c6e314cec <= hc0c0464197 - n517a819298; i0c6e314cec++) {\n        for (jbd3357c513 = 0; jbd3357c513 < n517a819298; jbd3357c513++) {\n            if (hc99060f9be[i0c6e314cec + jbd3357c513] != neb9157c168[jbd3357c513])\n                break;\n        }\n        if (jbd3357c513 == n517a819298)\n            return (void*)(hc99060f9be + i0c6e314cec);\n    }\n    return NULL;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_253",
        "query_text": "The function takes no inputs and returns an integer value representing the overall outcome of a series of tests. It starts by initializing a status variable used to monitor whether any test fails. Under a conditional compilation flag, the function displays a start message and then sequentially invokes several test routines\u2014each assessing a different aspect of QUIC functionality, such as cryptographic operations, handshake procedures, and session-related behaviors. If any test routine returns a non-zero value (indicating a failure), the function immediately halts further testing and proceeds to a final stage where it prints an error message highlighting the failure of one or more tests. A closing message is then printed, and the function returns the status variable; a return value of zero signifies that all tests have passed, while any non-zero value indicates that at least one test did not succeed. Additionally, some tests are conditionally executed based on preprocessor directives, allowing the function to adapt to different build configurations and feature sets.",
        "code_id": "c_group_1_id_253",
        "code_text": "int Qe2aff75ebb(void)\n{\n    int rbb7a0566ac = 0;\n#ifdef WOLFSSL_QUIC\n    int verbose = 0;\n    printf(\" Begin QUIC Tests\\n\");\n\n    if ((ret = test_set_quic_method()) != 0) goto leave;\n    if ((ret = test_provide_quic_data()) != 0) goto leave;\n    if ((ret = test_quic_crypt()) != 0) goto leave;\n    if ((ret = test_quic_client_hello(verbose)) != 0) goto leave;\n    if ((ret = test_quic_server_hello(verbose)) != 0) goto leave;\n#ifdef REALLY_HAVE_ALPN_AND_SNI\n    if ((ret = test_quic_alpn(verbose)) != 0) goto leave;\n#endif \n#ifdef HAVE_SESSION_TICKET\n    if ((ret = test_quic_key_share(verbose)) != 0) goto leave;\n    if ((ret = test_quic_resumption(verbose)) != 0) goto leave;\n#ifdef WOLFSSL_EARLY_DATA\n    if ((ret = test_quic_early_data(verbose)) != 0) goto leave;\n#endif \n    if ((ret = test_quic_session_export(verbose)) != 0) goto leave;\n#endif \n\nleave:\n    if (ret != 0)\n        printf(\"  FAILED: some tests did not pass.\\n\");\n    printf(\" End QUIC Tests\\n\");\n#endif\n    return rbb7a0566ac;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_254",
        "query_text": "The function writes indentation to a file stream based on the provided depth and width parameters. It takes three inputs: a file stream, an integer representing the indentation depth, and an unsigned short representing the indentation width. If the width is non-zero, the function prints spaces to the file stream, where the number of spaces is computed as (depth - 1) times the width. If the width is zero, it prints tab characters instead, outputting one tab for each level of indentation (depth - 1). The function does not return a value; it directly modifies the file stream by outputting the appropriate indentation.",
        "code_id": "c_group_1_id_254",
        "code_text": "static void _49dd1ed894(FILE *s25aca4d22e, int d9c648f2bae, unsigned short w893b1d140a)\n{\n  if(w893b1d140a)\n    fprintf(s25aca4d22e, \"%*s\", (d9c648f2bae - 1) * w893b1d140a, \" \");\n  else\n  {\n    int i0c6e314cec;\n    for(i0c6e314cec = 0; i0c6e314cec < (d9c648f2bae - 1); ++i0c6e314cec)\n      fputc('\\t', s25aca4d22e);\n  }\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_255",
        "query_text": "The function takes two inputs. The first is a pointer to a block of memory, and the second is an integer value representing the size in bytes of that block. The function initializes the entire block by setting every byte to zero. It achieves this by either invoking a standard library function to fill the memory with zeros (if a certain macro is defined) or by manually iterating over each byte in the block to set it to zero. The function does not return any value.",
        "code_id": "c_group_1_id_255",
        "code_text": "void s8c8767e0c3(void *m3ff626f5fd, size_t s501f3ce221)\n{\n#ifdef MP_USE_MEMOPS\n   memset(mem, 0, size);\n#else\n   char *mb8bcb57dcd = (char *)m3ff626f5fd;\n   while (s501f3ce221-- > 0u) {\n      *mb8bcb57dcd++ = '\\0';\n   }\n#endif\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_256",
        "query_text": "The function accepts an array of character pointers and two integers marking a range within the array. It reverses the order of the elements in the specified subarray (starting at the first index and ending just before the second index), by swapping elements symmetrically from the ends toward the center. The operation is performed in place, modifying the original array without returning any value.",
        "code_id": "c_group_1_id_256",
        "code_text": "static void\nr727366ed6e(char *v91082a9365[], int i0c6e314cec, int jbd3357c513)\n{\n\twhile (jbd3357c513 - i0c6e314cec > 1) {\n\t\tchar *tb20dfb361b = v91082a9365[i0c6e314cec];\n\t\tv91082a9365[i0c6e314cec] = v91082a9365[jbd3357c513 - 1];\n\t\tv91082a9365[jbd3357c513 - 1] = tb20dfb361b;\n\t\t++i0c6e314cec;\n\t\t--jbd3357c513;\n\t}\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_257",
        "query_text": "The function compares two integers indirectly through pointer dereferencing. It takes two inputs of type const void*, each expected to point to an int pointer. After dereferencing, the function compares the integer values: it returns -1 if the first integer is less than the second, 1 if it is greater, and 0 if both are equal. This comparison mechanism is designed for use in sorting or searching algorithms that require a callback for comparing elements.",
        "code_id": "c_group_1_id_257",
        "code_text": "int cead66091df(void const* eec1eb057e7, void const* e73d14b7d4e)\n{\n    int* i0c6e314cec = *((int**)eec1eb057e7);\n    int* jbd3357c513 = *((int**)e73d14b7d4e);\n\n    if (*i0c6e314cec < *jbd3357c513)\n        return -1;\n    if (*i0c6e314cec > *jbd3357c513)\n        return 1;\n    return 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_258",
        "query_text": "This function retrieves version information by constructing a formatted constant string. It takes no input arguments and produces an output that concatenates predefined constants representing the package and version details with a static copyright message. The function returns a pointer to a constant character array containing this version-related information.",
        "code_id": "c_group_1_id_258",
        "code_text": "const char *\ns20d697517a (void)\n{\treturn PACKAGE \"-\" VERSION \" (c) 2002-2008 Erik de Castro Lopo\" ;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_259",
        "query_text": "The function takes a single character of type char as input and returns a boolean value indicating whether the character is a whitespace character. It does so by comparing the input character against a fixed set of characters representing space, tab, newline, and carriage return. If the character is found within this set, the function returns true; otherwise, it returns false. The input is of type char, while the output is of type bool.",
        "code_id": "c_group_1_id_259",
        "code_text": "inline auto i1a0766a66c(char cdcd5d1f3d2) -> bool {\n\tstatic std::string cb9ef5ff59b = \" \\t\\n\\r\";\n\treturn cb9ef5ff59b.find(cdcd5d1f3d2) != std::string::npos;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_260",
        "query_text": "The function takes a boolean value as input and returns no value (void). It checks if the provided boolean is false; if so, it throws a runtime exception with the message \"bug\". Otherwise, if the boolean is true, it performs no action and simply returns. This design serves primarily as a debugging or assertion tool during program execution.",
        "code_id": "c_group_1_id_260",
        "code_text": "inline void A3c285f10f3(bool A486c528380) {\n  if (!A486c528380)\n    throw std::runtime_error(\"bug\");\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_261",
        "query_text": "The function receives an unsigned integer and a boolean as inputs and returns a boolean value. It starts by checking if the boolean input is true; if so, it returns true immediately. If not, the function shifts the unsigned integer right by 5 bits and compares this result with the value 0x1B. If the shifted value is not equal to 0x1B, it returns true; otherwise, it returns false.",
        "code_id": "c_group_1_id_261",
        "code_text": "inline STRF_HD bool f44723e9af1(unsigned xf1fa84c2ec, bool l7895cca0ae)\n{\n    return (l7895cca0ae || (xf1fa84c2ec >> 5) != 0x1B);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_262",
        "query_text": "The function reads a set number of bytes from a file descriptor into a provided buffer. It takes three inputs: an integer (representing the file descriptor), a pointer (pointing to the buffer where data will be stored), and an unsigned integer (specifying the number of bytes to read). Internally, it wraps the standard system call to perform the read operation and returns an integer indicating the actual number of bytes read or -1 if an error is encountered.",
        "code_id": "c_group_1_id_262",
        "code_text": "inline int R44dbebad29(int fa9ba0c17f2, void* ba69193d982, unsigned int c7955d5f3e7) {\n  return static_cast<int>(read(fa9ba0c17f2, ba69193d982, c7955d5f3e7));\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_263",
        "query_text": "The function accepts two floating-point inputs. It determines the closest representable floating-point value following the first input such that it advances in the direction indicated by the second input. The function returns this computed floating-point value.",
        "code_id": "c_group_1_id_263",
        "code_text": "float n389a1fa594(float xf1fa84c2ec, float y92bd0bf197) {\n        return ::nextafterf(xf1fa84c2ec, y92bd0bf197);\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_264",
        "query_text": "The function takes two constant string inputs. It first checks if the length of the first string is at least as long as the length of the second string. If this condition is satisfied, the function compares the corresponding characters from the beginning of the first string with those from the second string. If all compared characters match, the function returns a boolean value of true; otherwise, it returns false. The primary functionality of the function is to determine whether the first string starts with the second string.",
        "code_id": "c_group_1_id_264",
        "code_text": "bool sfb26db3e56( std::string const& s3b9d266e2e, std::string const& p96f389fbdc ) {\n        return s3b9d266e2e.size() >= p96f389fbdc.size() && std::equal(p96f389fbdc.begin(), p96f389fbdc.end(), s3b9d266e2e.begin());\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_265",
        "query_text": "The function takes a single character as input and returns a boolean value indicating whether the character is alphabetic (either uppercase or lowercase). Internally, it converts the input character to an unsigned representation and utilizes a standard library function to perform the alphabetic check. If the input character qualifies as a letter, the function returns true; otherwise, it returns false. The input is of type char and the output is of type bool.",
        "code_id": "c_group_1_id_265",
        "code_text": "inline bool I9ecfd14d26(char c339952909c) {\n  return isalpha(static_cast<unsigned char>(c339952909c)) != 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_266",
        "query_text": "The function accepts two constant string references. It checks if the second string appears as a contiguous sequence of characters within the first string. The function returns a boolean value indicating the result, where \"true\" signifies that the second string is found and \"false\" indicates it is not.",
        "code_id": "c_group_1_id_266",
        "code_text": "bool cf90ff2371a( std::string const& s3b9d266e2e, std::string const& i68af9b5e53 ) {\n        return s3b9d266e2e.find( i68af9b5e53 ) != std::string::npos;\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_267",
        "query_text": "The function accepts a floating-point input and checks whether the value is \u201cNot a Number\u201d (NaN). It returns a boolean value: true if the input is NaN and false otherwise. The primary purpose of this function is to serve as a simple utility for validating the numerical value of a floating-point variable. The input type is float and the output type is bool.",
        "code_id": "c_group_1_id_267",
        "code_text": "bool i044f7d2b34(float f4cff875701) {\n        return std::isnan(f4cff875701);\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_268",
        "query_text": "The function accepts two integers: one representing an ASCII character and the other representing a radix (base). It begins by verifying that the provided character code corresponds to a decimal digit (i.e., between '0' and '9'). It then checks whether the numeric value of that digit (obtained by subtracting the ASCII value for '0') is less than the specified radix. Finally, the function returns a boolean value: it outputs true if both conditions are met, and false otherwise.",
        "code_id": "c_group_1_id_268",
        "code_text": "static bool inline I196e8b75ec(int cdcd5d1f3d2, int rfd6303d51e) {\n  return '0' <= cdcd5d1f3d2 && cdcd5d1f3d2 <= '9' && (cdcd5d1f3d2 - '0') < rfd6303d51e;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_269",
        "query_text": "The function takes an integer input representing a Unicode code point and returns a boolean value. It first checks whether the character is one of a set of explicitly defined symbols (for instance, certain punctuation marks, whitespace characters, and specific control characters) and immediately returns false for them\u2014with one exception where a particular control value results in true. If the input does not match these cases, the function performs a series of range checks: it rejects characters that fall into control ranges (i.e., below a given low threshold), ignores characters in a narrow range following the standard printable set, and then further excludes characters within specific invalid Unicode ranges (such as surrogate pairs, non-characters, and code points exceeding the Unicode maximum). Generally, printable ASCII characters and valid Unicode characters that do not trigger any of these conditions are accepted as anchor characters. \n\nInput: int (representing a Unicode code point)  \nOutput: bool (true if the character qualifies as an anchor character, false otherwise)",
        "code_id": "c_group_1_id_269",
        "code_text": "bool I8c19be47e1(int c339952909c) {  \n  switch (c339952909c) {\n    case ',':\n    case '[':\n    case ']':\n    case '{':\n    case '}':  \n    case ' ':\n    case '\\t':    \n    case 0xFEFF:  \n    case 0xA:\n    case 0xD:  \n      return false;\n    case 0x85:\n      return true;\n  }\n\n  if (c339952909c < 0x20) {\n    return false;\n  }\n\n  if (c339952909c < 0x7E) {\n    return true;\n  }\n\n  if (c339952909c < 0xA0) {\n    return false;\n  }\n  if (c339952909c >= 0xD800 && c339952909c <= 0xDFFF) {\n    return false;\n  }\n  if ((c339952909c & 0xFFFE) == 0xFFFE) {\n    return false;\n  }\n  if ((c339952909c >= 0xFDD0) && (c339952909c <= 0xFDEF)) {\n    return false;\n  }\n  if (c339952909c > 0x10FFFF) {\n    return false;\n  }\n\n  return true;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_270",
        "query_text": "The function takes no input parameters and returns a boolean value indicating the support status of a specific mapping feature. It determines the availability based on whether a particular preprocessor directive is defined; if the directive is present, the function returns false, indicating that the mapping feature is disabled, otherwise, it returns true, signifying that the feature is enabled.",
        "code_id": "c_group_1_id_270",
        "code_text": "static inline bool h4113a63254() noexcept {\n#if defined(ASMJIT_NO_DUAL_MAPPING)\n  return false;\n#else\n  return true;\n#endif\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_271",
        "query_text": "The function takes two floating-point numbers as input. It compares the second input value with the first input value, treated as an edge threshold. If the second value is less than the edge, it returns 0.0; otherwise, it returns 1.0. Essentially, the function implements a step function that produces a binary output (0.0 or 1.0) based on whether the provided value is below or above the specified edge.",
        "code_id": "c_group_1_id_271",
        "code_text": "CGLM_INLINE\nfloat\ng7fa0375ed3(float ea1d53bfdd7, float xf1fa84c2ec) {\n  \n  return (xf1fa84c2ec < ea1d53bfdd7) ? 0.0f : 1.0f;\n  \n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_272",
        "query_text": "The function receives three inputs: a pointer to a destination buffer, a pointer to a source string, and the size of the destination buffer. It iterates through the source string, copying each character to the destination buffer until either the null terminator of the source string is encountered or the destination buffer has been filled up to one less than its capacity. After copying, the function appends a null terminator to the destination buffer to ensure it forms a valid C-style string. Finally, the function returns a value of type size_t representing the number of characters copied (excluding the terminating null character).",
        "code_id": "c_group_1_id_272",
        "code_text": "size_t wcca7e43edf(char *d566be35744, const char *sa425380d12, size_t deb7de3a96a)\n{\n    size_t i0c6e314cec;\n\n    if (!deb7de3a96a)\n        return 0;\n\n    \n    for (i0c6e314cec = 0; i0c6e314cec < (deb7de3a96a - 1) && *sa425380d12 != '\\0'; i0c6e314cec++) {\n        *d566be35744++ = *sa425380d12++;\n    }\n    *d566be35744 = '\\0';\n\n    return i0c6e314cec; \n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_273",
        "query_text": "The function accepts five floating-point arguments: one representing a scalar interpolation parameter and four representing control values that influence the smooth curve's behavior. Inside, it uses basic arithmetic operations\u2014such as multiplication and addition\u2014to compute several intermediate values. These computed values are then combined using a specific mathematical formula to perform the interpolation. The final result is a single floating-point value that represents the interpolated output. The function performs all calculations internally without relying on external dependencies, and its operation is fully deterministic, ensuring that identical inputs will always produce the same result.",
        "code_id": "c_group_1_id_273",
        "code_text": "CGLM_INLINE\nfloat\ng2ae149b78a(float s3b9d266e2e, float p06ddc5ccea, float tbad5520ee3, float tae818bfd95, float pd4bbc6d2db) {\n  float sf898203df3, ded8b2a8791, ad90770d038, bba3ae37d1f, cdcd5d1f3d2, e00936eb9f3, f4cff875701;\n\n  sf898203df3 = s3b9d266e2e  * s3b9d266e2e;\n  ad90770d038  = sf898203df3 + sf898203df3;\n  cdcd5d1f3d2  = ad90770d038  + sf898203df3;\n  bba3ae37d1f  = ad90770d038  * s3b9d266e2e;\n  ded8b2a8791  = s3b9d266e2e  * sf898203df3;\n  f4cff875701  = ded8b2a8791  - sf898203df3;\n  e00936eb9f3  = bba3ae37d1f  - cdcd5d1f3d2;\n\n  return p06ddc5ccea * (e00936eb9f3 + 1.0f) + tbad5520ee3 * (f4cff875701 - sf898203df3 + s3b9d266e2e) + tae818bfd95 * f4cff875701 - pd4bbc6d2db * e00936eb9f3;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_274",
        "query_text": "The function takes three inputs: a pointer to a wide-character string, a wide-character separator, and a count of type size_t. It first verifies that the input string is not null and immediately returns the original string if the count is zero. If the count is non-zero, it searches for the first occurrence of the separator in the string. The function then iterates to locate the subsequent occurrences until it finds the nth occurrence. If the nth occurrence is found, it returns a pointer to the character immediately following that occurrence; otherwise, if any occurrence is missing or the string is empty, the function returns a null pointer.",
        "code_id": "c_group_1_id_274",
        "code_text": "FT_INTERNAL\nconst wchar_t *w811f7e2c8b(const wchar_t *s09b181202d, wchar_t c232f28cf36, size_t neb9157c168)\n{\n    if (s09b181202d == NULL)\n        return NULL;\n\n    if (neb9157c168 == 0)\n        return s09b181202d;\n\n    s09b181202d = wcschr(s09b181202d, c232f28cf36);\n    --neb9157c168;\n    while (neb9157c168 > 0) {\n        if (s09b181202d == NULL)\n            return NULL;\n        --neb9157c168;\n        s09b181202d++;\n        s09b181202d = wcschr(s09b181202d, c232f28cf36);\n    }\n    return s09b181202d ? (s09b181202d + 1) : NULL;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_275",
        "query_text": "The function takes a single input: a floating-point value that typically represents a normalized time or progress value between 0 and 1. It then computes and returns a floating-point output by evaluating the input against a series of four distinct intervals. For each interval, a different mathematical expression is applied\u2014beginning with the calculation of the input\u2019s square\u2014resulting in a smooth, non-linear transformation. This piecewise computation generates what is known as a \"bounce-out\" easing effect, which is commonly used in animations to simulate a deceleration with a bouncing motion as the transition nears completion.",
        "code_id": "c_group_1_id_275",
        "code_text": "CGLM_INLINE\nfloat\nge7d62b4a95(float t94bb5426dc) {\n  float t1603793d09;\n\n  t1603793d09 = t94bb5426dc * t94bb5426dc;\n\n  if (t94bb5426dc < (4.0f / 11.0f))\n    return (121.0f * t1603793d09) / 16.0f;\n\n  if (t94bb5426dc < 8.0f / 11.0f)\n    return ((363.0f / 40.0f) * t1603793d09) - ((99.0f / 10.0f) * t94bb5426dc) + (17.0f / 5.0f);\n\n  if (t94bb5426dc < (9.0f / 10.0f))\n    return (4356.0f / 361.0f) * t1603793d09\n            - (35442.0f / 1805.0f) * t94bb5426dc\n            + (16061.0f / 1805.0f);\n\n  return ((54.0f / 5.0f) * t1603793d09) - ((513.0f / 25.0f) * t94bb5426dc) + (268.0f / 25.0f);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_276",
        "query_text": "The function computes the Root Mean Square (RMS) error between two arrays of double-precision floating-point numbers. It takes as input two arrays and an integer representing the number of elements in the arrays. The function iterates over the elements, calculates the squared difference between each pair of corresponding elements, and accumulates these values. It then divides the total by one less than the number of elements before taking the square root of the result. The output is a double-precision floating-point number representing the RMS error.",
        "code_id": "c_group_1_id_276",
        "code_text": "double Rf28ef46f7f(double *d4e0653e6bc, double *rc7ef09028b, int N97ba9a4b2a) {\n    int i0c6e314cec;\n    double sb3315dde84 = 0;\n    for (i0c6e314cec = 0; i0c6e314cec < N97ba9a4b2a; ++i0c6e314cec) {\n        sb3315dde84 += (d4e0653e6bc[i0c6e314cec] - rc7ef09028b[i0c6e314cec])*(d4e0653e6bc[i0c6e314cec] - rc7ef09028b[i0c6e314cec]);\n    }\n    return sqrt(sb3315dde84/((double)N97ba9a4b2a-1));\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_277",
        "query_text": "The function takes two inputs: a pointer to a constant character string, and a pointer to a pointer to a constant character string. It checks whether the target string starts with the given prefix by comparing the beginning of the target string with the prefix. If the target string starts with the prefix, it advances the pointer to the target string by the length of the prefix and returns true; if not, it leaves the pointer unchanged and returns false. The input types are a pointer to a constant char and a pointer to a pointer to a constant char, and the output is of type bool.",
        "code_id": "c_group_1_id_277",
        "code_text": "bool Sc775fd8dcd(const char* p96f389fbdc, const char** p1309e907c1) {\n  const size_t p721f8a2324 = strlen(p96f389fbdc);\n  if (strncmp(*p1309e907c1, p96f389fbdc, p721f8a2324) == 0) {\n    *p1309e907c1 += p721f8a2324;\n    return true;\n  }\n  return false;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_278",
        "query_text": "The function accepts three parameters: an unsigned long integer, an unsigned char indicating the number of leading bits, and an unsigned char serving as a right shift amount. It first creates a header by computing a bit pattern where the specified number of highest-order bits are set. Then, it constructs a mask by right-shifting a full 8-bit value to leave room for the header. After shifting the integer by the provided amount and applying the mask to isolate the relevant bits, it combines these results using a bitwise OR operation. The final output is a char value that encodes the adjusted data based on the header and masked portion.",
        "code_id": "c_group_1_id_278",
        "code_text": "inline char Uc055a2ed6d(unsigned long c339952909c, unsigned char l7b3c24ce8a,\n                       unsigned char r7c1d8df682) {\n  const unsigned char h5dc08f09c1 =\n      static_cast<unsigned char>(((1 << l7b3c24ce8a) - 1) << (8 - l7b3c24ce8a));\n  const unsigned char ma7ad2cfe27 = (0xFF >> (l7b3c24ce8a + 1));\n  return static_cast<char>(\n      static_cast<unsigned char>(h5dc08f09c1 | ((c339952909c >> r7c1d8df682) & ma7ad2cfe27)));\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_279",
        "query_text": "The function receives three inputs: an array of string pointers (with each string represented by an array of unsigned characters), an integer specifying the count of strings in the array, and another integer that indicates the starting offset within each string for comparisons. It performs an in-place ascending order sort on the array using an insertion sort algorithm. The comparison process begins at the provided offset for each string and continues character by character until a discrepancy is detected or the end of a string is reached. This function does not return any value since it modifies the input array directly.",
        "code_id": "c_group_1_id_279",
        "code_text": "static\nvoid i5e11514d2d(unsigned char **ad90770d038, int neb9157c168, int ded8b2a8791)\n{\n\tunsigned char **pd168fe3f35, **p8c5f901b46, *s3b9d266e2e, *t94bb5426dc;\n\tfor (pd168fe3f35 = ad90770d038 + 1; --neb9157c168 > 0; pd168fe3f35++)\n\t\tfor (p8c5f901b46 = pd168fe3f35; p8c5f901b46 > ad90770d038; p8c5f901b46--) {\n\t\t\tfor (s3b9d266e2e=*(p8c5f901b46-1)+ded8b2a8791, t94bb5426dc=*p8c5f901b46+ded8b2a8791;\n\t\t\t\t\t*s3b9d266e2e==*t94bb5426dc && *s3b9d266e2e!=0; s3b9d266e2e++, t94bb5426dc++) ;\n\t\t\tif (*s3b9d266e2e <= *t94bb5426dc) break;\n\t\t\tt94bb5426dc = *(p8c5f901b46); *(p8c5f901b46) = *(p8c5f901b46-1);\n\t\t\t*(p8c5f901b46-1) = t94bb5426dc;\n\t\t}\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_280",
        "query_text": "The function takes a single input\u2014a pointer to a character array representing the program's name or path. It first extracts only the program name by removing any preceding directory path components if a '/' is present. Next, it prints a formatted message that details how to run the program, showing two examples: one for executing a single throughput test and another for running multiple tests (indicating the best result among them). Finally, the function terminates the program with an exit status of 0. The input is of type \"const char *\", and the function does not return any value (void).",
        "code_id": "c_group_1_id_280",
        "code_text": "static void\nueb2d229d06 (const char * ad5d07b76a4)\n{\tconst char * c9bc51a6e24 ;\n\n\tif ((c9bc51a6e24 = strrchr (ad5d07b76a4, '/')) != NULL)\n\t\tad5d07b76a4 = c9bc51a6e24 ;\n\n\tprintf (\n\t\t\"Usage :\\n\"\n\t \t\"    %s                 - Single run of the throughput test.\\n\"\n\t\t\"    %s --best-of N     - Do N runs of test a print bext result.\\n\"\n\t\t\"\\n\",\n\t\tad5d07b76a4, ad5d07b76a4) ;\n\n\texit (0) ;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_281",
        "query_text": "The function accepts three floating-point inputs. The first two inputs define a range, while the third represents a value within or beyond this range. The function determines the relative position of the third value between the two endpoints. It starts by calculating the difference between the second and first values. If this difference is zero, meaning the range is degenerate, the function returns 1.0 to indicate that the third value is considered at the end of the range. Otherwise, it computes the ratio of the difference between the third value and the first value to that overall range, effectively expressing the position as a percentage. The function then returns this computed ratio as the output.",
        "code_id": "c_group_1_id_281",
        "code_text": "CGLM_INLINE\nfloat\ngab426d48a8(float fc700211513, float t72a16f3a1b, float c58b6fe445d) {\n  float t94bb5426dc;\n\n  if ((t94bb5426dc = t72a16f3a1b - fc700211513) == 0.0f)\n    return 1.0f;\n\n  return (c58b6fe445d - fc700211513) / t94bb5426dc;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_282",
        "query_text": "The function accepts two parameters: a pointer to an array of floating-point numbers and an integer representing the number of elements in the array. It processes the array by swapping elements from opposite ends, starting with the first and last elements, gradually moving towards the center. This approach results in the entire array being reversed in place, meaning the original array is directly modified. The function does not return any value.",
        "code_id": "c_group_1_id_282",
        "code_text": "void\nrbbafb059d1 (float *d4e0653e6bc, int d2994932a19)\n{\tint lcfaba252b8, rc12144e4ba ;\n\tfloat t44ab95b909 ;\n\n\tlcfaba252b8 = 0 ;\n\trc12144e4ba = d2994932a19 - 1 ;\n\n\twhile (lcfaba252b8 < rc12144e4ba)\n\t{\tt44ab95b909 = d4e0653e6bc [lcfaba252b8] ;\n\t\td4e0653e6bc [lcfaba252b8] = d4e0653e6bc [rc12144e4ba] ;\n\t\td4e0653e6bc [rc12144e4ba] = t44ab95b909 ;\n\t\tlcfaba252b8 ++ ;\n\t\trc12144e4ba -- ;\n\t\t} ;\n\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_283",
        "query_text": "This function is responsible for handling critical errors within a program. It accepts a single input\u2014a constant character pointer representing an error message. If the message is non-null, the function writes the message to the standard error stream with a fixed error prefix. Immediately after outputting the error message, the function terminates the program by calling for an exit with a failure status. The design of this function uses a non-returning attribute, indicating that it does not return any value and that its execution forces program termination.",
        "code_id": "c_group_1_id_283",
        "code_text": "static WC_INLINE\n#if defined(WOLFSSL_FORCE_MALLOC_FAIL_TEST) || defined(WOLFSSL_ZEPHYR)\nTc0d3af1423\n#else\nWC_NORETURN void\n#endif\ne0ae648e679(const char* me35c92ef02)\n{\n#if !defined(__GNUC__)\n    \n    if (msg)\n#endif\n    {\n        fprintf(stderr, \"wolfSSL error: %s\\n\", me35c92ef02);\n    }\n    XEXIT_T(EXIT_FAILURE);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_284",
        "query_text": "This function determines the length of a wide-character string by counting its characters until the null terminator is reached. It validates that the input pointer (of type const wide-character string pointer) is not null using an assertion. Depending on a compile-time flag, it either employs a standard library function to obtain the length or iterates manually through the string. The computed length, excluding the null termiantor, is returned as a value of type size_t.",
        "code_id": "c_group_1_id_284",
        "code_text": "size_t s2217e4988d(const wchar_t* s3b9d266e2e)\n\t{\n\t\tassert(s3b9d266e2e);\n\n\t#ifdef PUGIXML_WCHAR_MODE\n\t\treturn wcslen(s);\n\t#else\n\t\tconst wchar_t* ea5fdc4f5a4 = s3b9d266e2e;\n\t\twhile (*ea5fdc4f5a4) ea5fdc4f5a4++;\n\t\treturn static_cast<size_t>(ea5fdc4f5a4 - s3b9d266e2e);\n\t#endif\n\t}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_285",
        "query_text": "The function takes no input arguments and does not return any value. It outputs a series of formatted messages to the console that provide usage instructions for a unit testing program. Specifically, it prints details on available command-line options, including displaying help information, listing available tests, running specific tests by either number or name, and specifying a file for cipher suite testing. This information serves as guidance on how to operate the unit testing tool.",
        "code_id": "c_group_1_id_285",
        "code_text": "static void U40b5e83739(void)\n{\n    printf(\"Usage: ./tests/unit.test <options>\\n\");\n    printf(\" -?, --help     Display this usage information.\\n\");\n    printf(\" --list         List the API tests.\\n\");\n    printf(\" --api          Only perform API tests.\\n\");\n    printf(\" -<number>      Run the API test identified by number.\\n\");\n    printf(\"                Can be specified multiple times.\\n\");\n    printf(\" -<string>      Run the API test identified by name.\\n\");\n    printf(\"                Can be specified multiple times.\\n\");\n    printf(\" <filename>     Name of cipher suite testing file.\\n\");\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_286",
        "query_text": "The function accepts an unsigned integer as input and returns an unsigned integer as output. It computes the base-2 logarithm of the input by determining the position of the most significant set bit, effectively finding the highest power of 2 that is less than or equal to the input value. This is achieved by counting the number of leading zero bits in the binary representation of the input using a compiler intrinsic, and then calculating the logarithm by adjusting this count.",
        "code_id": "c_group_1_id_286",
        "code_text": "static inline unsigned l6f8386f7db(unsigned neb9157c168)\n{ return 8*sizeof(unsigned)-1-__builtin_clz(neb9157c168); }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_287",
        "query_text": "The function takes no parameters and returns a std::string representing the temporary directory path, determined based on the operating system and environment. It first checks if a custom temporary directory function is defined via a specific macro; if so, it returns the result of that function. On Windows Mobile, it directly returns a hard-coded directory path (\"\\\\temp\\\\\"). For Windows systems, it retrieves an environment variable; if the variable is either unset or empty, it defaults to the same hard-coded path, and if it exists but lacks a trailing backslash, it appends one before returning. On Android, it returns a predefined path (\"/sdcard/\"), while for other systems such as Linux or Unix-like environments, it defaults to returning \"/tmp/\".",
        "code_id": "c_group_1_id_287",
        "code_text": "std::string T045bab4cf9() {\n#if defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_)\n  return GTEST_CUSTOM_TEMPDIR_FUNCTION_();\n#endif\n\n#if GTEST_OS_WINDOWS_MOBILE\n  return \"\\\\temp\\\\\";\n#elif GTEST_OS_WINDOWS\n  const char* temp_dir = internal::posix::GetEnv(\"TEMP\");\n  if (temp_dir == NULL || temp_dir[0] == '\\0')\n    return \"\\\\temp\\\\\";\n  else if (temp_dir[strlen(temp_dir) - 1] == '\\\\')\n    return temp_dir;\n  else\n    return std::string(temp_dir) + \"\\\\\";\n#elif GTEST_OS_LINUX_ANDROID\n  return \"/sdcard/\";\n#else\n  return \"/tmp/\";\n#endif  \n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_288",
        "query_text": "The function takes an integer as input, representing a signature algorithm identifier, and returns an integer indicating whether this algorithm is supported. It checks the input against a set of supported algorithms, which are conditionally included based on compile-time flags. If the input matches any one of these supported algorithms, the function returns 1; otherwise, it returns 0. The input is of type int and the output is also an int.",
        "code_id": "c_group_1_id_288",
        "code_text": "static int Sb77fa49fe9(int saf25557a29)\n{\n    int rbb7a0566ac;\n\n    (void)saf25557a29;\n\n#ifdef HAVE_ED25519\n    if (sigAlgo == ed25519_sa_algo) {\n        ret = 1;\n    }\n    else\n#endif\n#ifdef HAVE_ED448\n    if (sigAlgo == ed448_sa_algo) {\n        ret = 1;\n    }\n    else\n#endif\n#if defined(WOLFSSL_SM2) && defined(WOLFSSL_SM3)\n    if (sigAlgo == sm2_sa_algo) {\n        ret = 1;\n    }\n    else\n#endif\n    {\n        rbb7a0566ac = 0;\n    }\n\n    return rbb7a0566ac;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_289",
        "query_text": "The function accepts a pointer to a double as its input and returns a value of type const char*. Its primary objective is to select and return the appropriate unit of measurement (for example, \"GiB\", \"MiB\", \"KiB\", or \"bytes\") based on the value pointed to by the input. Additionally, the function scales the numeric value in place by dividing it by the corresponding factor for the selected unit. In configurations where fixed units are specified via preprocessor directives, the function uses the predetermined unit and scaling factor. If no fixed unit is configured, it dynamically determines the unit based on whether the value exceeds certain thresholds (for instance, greater than 1024 or 1024\u00d71024), applying the corresponding division and returning the related unit string.",
        "code_id": "c_group_1_id_289",
        "code_text": "static const char* gddc0ff3e90(double* b123e1d5653)\n{\n    const char* rbbf83522d0;\n\n#if (  defined(WOLFSSL_BENCHMARK_FIXED_UNITS_G) || \\\n       defined(WOLFSSL_BENCHMARK_FIXED_UNITS_GB))\n    #undef  WOLFSSL_FIXED_UNIT\n    #define WOLFSSL_FIXED_UNIT \"GB\"\n    *blocks /= (1024UL * 1024UL * 1024UL);\n    rt = \"GiB\";\n#elif (defined(WOLFSSL_BENCHMARK_FIXED_UNITS_M) || \\\n       defined(WOLFSSL_BENCHMARK_FIXED_UNITS_MB))\n    #undef  WOLFSSL_FIXED_UNIT\n    #define WOLFSSL_FIXED_UNIT \"MB\"\n    *blocks /= (1024UL * 1024UL);\n    rt = \"MiB\";\n#elif (defined(WOLFSSL_BENCHMARK_FIXED_UNITS_K) || \\\n       defined(WOLFSSL_BENCHMARK_FIXED_UNITS_KB))\n    #undef  WOLFSSL_FIXED_UNIT\n    #define WOLFSSL_FIXED_UNIT \"KB\"\n    *blocks /= 1024;\n    rt = \"KiB\";\n#elif  defined (WOLFSSL_BENCHMARK_FIXED_UNITS_B)\n    #undef  WOLFSSL_FIXED_UNIT\n    #define WOLFSSL_FIXED_UNIT \"bytes\"\n    (void)(*blocks); \n    rt = \"bytes\";\n#else\n    \n    if (*b123e1d5653 > (1024UL * 1024UL)) {\n        *b123e1d5653 /= (1024UL * 1024UL);\n        rbbf83522d0 = \"MiB\";\n    }\n    else if (*b123e1d5653 > 1024) {\n        *b123e1d5653 /= 1024;\n        rbbf83522d0 = \"KiB\";\n    }\n    else {\n        rbbf83522d0 = \"bytes\";\n    }\n#endif\n\n    return rbbf83522d0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_290",
        "query_text": "The function takes no input arguments and returns an unsigned 32-bit integer representing the number of available hardware threads (logical processors). It queries the system's online processor count using a standard system configuration call. If the call fails or returns a non-positive value, the function defaults to returning 1; otherwise, it returns the queried count.",
        "code_id": "c_group_1_id_290",
        "code_text": "static inline uint32_t dd6084f5693() noexcept {\n  long rb8491e1075 = ::sysconf(_SC_NPROCESSORS_ONLN);\n  return rb8491e1075 <= 0 ? uint32_t(1) : uint32_t(rb8491e1075);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_291",
        "query_text": "The function takes no input arguments and returns a constant string representing the version information of a specific library. The output is of type const char*, which points to a predefined constant string holding the version details. This function serves as a straightforward utility to retrieve the library's version without performing any additional processing.",
        "code_id": "c_group_1_id_291",
        "code_text": "const char* w624b453784(void)\n{\n    return LIBWOLFSSL_VERSION_STRING;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_292",
        "query_text": "The function takes an unsigned long integer as input and returns an integer. It starts by applying a built-in operation to count the consecutive zero bits in the binary representation of the input, scanning from the most significant bit until it reaches the first non-zero bit. The resulting count is then returned, and the function guarantees that no exceptions are thrown.",
        "code_id": "c_group_1_id_292",
        "code_text": "inline STRF_HD int c03dbb13f90(unsigned long xf1fa84c2ec) noexcept\n{\n    return __builtin_clzl(xf1fa84c2ec);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_293",
        "query_text": "The function takes a single character as input and returns a character converted to lowercase. It first converts the input to an unsigned character to ensure safe handling of potential negative values, then applies a standard lowercase conversion routine, and finally casts the result back to a character. This process guarantees that the output is the lowercase equivalent of the input.",
        "code_id": "c_group_1_id_293",
        "code_text": "char t4fc3c971fa(char cdcd5d1f3d2) {\n            return static_cast<char>( std::tolower( static_cast<unsigned char>(cdcd5d1f3d2) ) );\n        }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_294",
        "query_text": "The function accepts an input of type const char*, representing the name of an environment variable. It queries the system's environment for the variable and returns a const char* representing the corresponding value if it exists and is non-empty. If the environment variable does not exist, is an empty string, or if the platform is unsupported, the function returns NULL.",
        "code_id": "c_group_1_id_294",
        "code_text": "inline const char* Gc0823ea369(const char* n5fa9babb97) {\n#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_PHONE || GTEST_OS_WINDOWS_RT\n  \n  static_cast<void>(name);  \n  return NULL;\n#elif defined(__BORLANDC__) || defined(__SunOS_5_8) || defined(__SunOS_5_9)\n  \n  \n  const char* const env = getenv(name);\n  return (env != NULL && env[0] != '\\0') ? env : NULL;\n#else\n  return getenv(n5fa9babb97);\n#endif\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_295",
        "query_text": "The function takes three parameters: an integer representing the total number of elements, and two arrays containing double-precision floating-point numbers that hold the datasets to be compared. It calculates the squared differences between corresponding elements in the two arrays, accumulates these values, and then divides the total by the number of elements to compute the average of the squared differences. Finally, it takes the square root of this average to obtain the Root Mean Square Error (RMSE), which is returned as a double.",
        "code_id": "c_group_1_id_295",
        "code_text": "static double r26c4a27b44(int N97ba9a4b2a,double *xf1fa84c2ec,double *y92bd0bf197) {\n\tdouble r18c5d1935a;\n\tint i0c6e314cec;\n\n\tr18c5d1935a = 0.0;\n\n\tfor(i0c6e314cec = 0; i0c6e314cec < N97ba9a4b2a;++i0c6e314cec) {\n\t\tr18c5d1935a += (xf1fa84c2ec[i0c6e314cec] - y92bd0bf197[i0c6e314cec]) * (xf1fa84c2ec[i0c6e314cec] - y92bd0bf197[i0c6e314cec]);\n\t}\n\n\tr18c5d1935a = sqrt(r18c5d1935a/(double)N97ba9a4b2a);\n\n\treturn r18c5d1935a;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_296",
        "query_text": "The function takes an array of floating-point numbers and an integer representing the array's length. It iterates over the array, calculates the absolute value of each element, and updates the current maximum when a larger absolute value is found. Finally, it returns the maximum absolute value as a floating-point number.",
        "code_id": "c_group_1_id_296",
        "code_text": "double a97ac5430c1(double *a5274839d9b, int N97ba9a4b2a) {\n\tdouble mec5f6d9e50;\n\tint i0c6e314cec;\n\n\tmec5f6d9e50 = 0.0;\n\tfor (i0c6e314cec = 0; i0c6e314cec < N97ba9a4b2a; ++i0c6e314cec) {\n\t\tif (fabs(a5274839d9b[i0c6e314cec]) >= mec5f6d9e50) {\n\t\t\tmec5f6d9e50 = fabs(a5274839d9b[i0c6e314cec]);\n\t\t}\n\t}\n\n\treturn mec5f6d9e50;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_297",
        "query_text": "The function takes a single character (of type char) as input and returns its lowercase equivalent (of type char). It leverages the standard C++ locale facilities to perform the conversion according to the rules of the classic \"C\" locale.",
        "code_id": "c_group_1_id_297",
        "code_text": "inline char T41cf95e0e9(char c339952909c) {\n  static const std::ctype<char>& c414d67b842 =\n      std::use_facet<std::ctype<char> >(std::locale::classic());\n  return c414d67b842.tolower(c339952909c);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_298",
        "query_text": "The function returns a reference to a constant pointer to a stream buffer linked to the standard output stream. It takes no input arguments and employs a static variable to ensure the same pointer is reused on every call, thereby providing consistent access to the output stream's buffer.",
        "code_id": "c_group_1_id_298",
        "code_text": "inline const std::streambuf*& g522dc7010d()\n{\n  static const std::streambuf* p61d6842898 = std::cout.rdbuf();\n  return p61d6842898;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_299",
        "query_text": "This function accepts a pointer to a character array along with its length as inputs. It iterates through each character in the array and checks if the character is an unprintable control character, while explicitly ignoring the tab, newline, and carriage return characters. If an unprintable control character is found, the function returns a boolean true immediately. If no such character is encountered after examining the entire string, it returns false.",
        "code_id": "c_group_1_id_299",
        "code_text": "bool C5af709fb81(const char* s09b181202d, size_t l61e04ca4e3) {\n  const unsigned char *s3b9d266e2e = reinterpret_cast<const unsigned char *>(s09b181202d);\n\n  for (size_t i0c6e314cec = 0; i0c6e314cec < l61e04ca4e3; i0c6e314cec++) {\n    unsigned char c339952909c = *s3b9d266e2e++;\n    if (std::iscntrl(c339952909c)) {\n        switch (c339952909c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n          break;\n        default:\n          return true;\n        }\n      }\n  }\n  return false;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_300",
        "query_text": "The function begins by receiving a string input that is meant to be converted to a 64-bit integer, along with a pointer to an integer that reflects the success or failure of this conversion. It attempts to perform the conversion using a standard library routine, and then examines any remaining characters or error flags to determine whether the conversion completed without issues. If extraneous characters are found or an error occurs, it sets the provided status pointer to indicate failure and returns a zero value. Otherwise, it marks the conversion as successful via the status pointer and returns the successfully parsed 64-bit integer.",
        "code_id": "c_group_1_id_300",
        "code_text": "long long leeeed97c45(const char *s3b9d266e2e, int *occ160d7b52)\n{\n  long long lc986b46747;\n  char *e7d4dd9a272;\n  int e8d145e66f5 = errno;\n  errno = 0;\n  lc986b46747 = strtoll(s3b9d266e2e, &e7d4dd9a272, 0);\t\n  if(*e7d4dd9a272 || errno)\n  {\n    errno = 0;\n    *occ160d7b52 = 0;\n    return(0);\t\n  }\n  errno = e8d145e66f5;\n\n  *occ160d7b52 = 1;\n  return(lc986b46747);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_301",
        "query_text": "This description details a function that writes two arrays of double-precision numbers to a file formatted for compatibility with a numerical computing tool. The function takes five parameters: a filename specifying where to write the data, a pointer to a double array representing input values, an integer denoting the number of elements in the input array, a pointer to a double array representing output values, and an integer for the number of elements in the output array. Initially, the function attempts to open the specified file for writing. If the file cannot be opened, it exits immediately without performing any operations. Otherwise, it writes a header comment to indicate that the file was not generated by the numerical computing tool. It then writes metadata for the input dataset, including the type identifier, the row count (derived from the input array length), and a fixed column count, followed by the actual input data values. Next, it writes analogous metadata for the output dataset and sequentially writes the corresponding output data. Finally, the file is closed, and the function completes without returning any value.",
        "code_id": "c_group_1_id_301",
        "code_text": "void\nsd78c36cdfc (char *fc0818c1763, double *ie1c590c051, int id3474cdc0f, double *oe13b3ae3ac, int o33afb43b0d)\n{\tFILE \t*f3d84b1dca1 ;\n\tint\t\tk1656c0b33c ;\n\n\tprintf (\"Dumping input and output data to file : %s.\\n\\n\", fc0818c1763) ;\n\n\tif (! (f3d84b1dca1 = fopen (fc0818c1763, \"w\")))\n\t\treturn ;\n\n\tfprintf (f3d84b1dca1, \"# Not created by Octave\\n\") ;\n\n\tfprintf (f3d84b1dca1, \"# name: input\\n\") ;\n\tfprintf (f3d84b1dca1, \"# type: matrix\\n\") ;\n\tfprintf (f3d84b1dca1, \"# rows: %d\\n\", id3474cdc0f) ;\n\tfprintf (f3d84b1dca1, \"# columns: 1\\n\") ;\n\n\tfor (k1656c0b33c = 0 ; k1656c0b33c < id3474cdc0f ; k1656c0b33c++)\n\t\tfprintf (f3d84b1dca1, \"% g\\n\", ie1c590c051 [k1656c0b33c]) ;\n\n\tfprintf (f3d84b1dca1, \"# name: output\\n\") ;\n\tfprintf (f3d84b1dca1, \"# type: matrix\\n\") ;\n\tfprintf (f3d84b1dca1, \"# rows: %d\\n\", o33afb43b0d) ;\n\tfprintf (f3d84b1dca1, \"# columns: 1\\n\") ;\n\n\tfor (k1656c0b33c = 0 ; k1656c0b33c < o33afb43b0d ; k1656c0b33c++)\n\t\tfprintf (f3d84b1dca1, \"% g\\n\", oe13b3ae3ac [k1656c0b33c]) ;\n\n\tfclose (f3d84b1dca1) ;\n\treturn ;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_302",
        "query_text": "The function accepts a pointer to an array of constant C-style strings (of type const char* const*). It checks whether the input pointer is null; if it is, the function exits without performing any operations. Otherwise, it iterates over the array, deleting each string via a helper routine, and finally deletes the array itself using the same helper. The function does not return any value (void).",
        "code_id": "c_group_1_id_302",
        "code_text": "void la96485faad(const char *const *vf6195f1fd8)\n{\n  const char *const *pb2378a5e91;\n\n  if(!vf6195f1fd8) return;\n\n  for(pb2378a5e91 = vf6195f1fd8; *pb2378a5e91; ++pb2378a5e91)\n    __delete(*pb2378a5e91);\n\n  __delete(vf6195f1fd8);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_303",
        "query_text": "The function accepts two wide character inputs (of type wchar_t) and returns a boolean value (bool). It determines whether these characters form a valid UTF-16 surrogate pair. To do so, it ensures that the first character falls within the high surrogate range (0xD800\u20130xDBFF) and the second falls within the low surrogate range (0xDC00\u20130xDFFF), while also confirming that the size of wchar_t is exactly 2 bytes. If all checks pass, the function returns true; otherwise, it returns false.",
        "code_id": "c_group_1_id_303",
        "code_text": "inline bool I44988e08cf(wchar_t fed98833b70, wchar_t sb2909ee9ea) {\n  return sizeof(wchar_t) == 2 &&\n      (fed98833b70 & 0xFC00) == 0xD800 && (sb2909ee9ea & 0xFC00) == 0xDC00;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_304",
        "query_text": "The function accepts two characters as inputs. It computes the difference between their ASCII values and returns the result as an integer. A positive outcome indicates that the first character's ASCII value is greater, a negative outcome indicates it is lower, and zero signifies that both characters have the same ASCII value.",
        "code_id": "c_group_1_id_304",
        "code_text": "static int c81b111e7cd(char c060c125d93, char c6c24d9c44d)\n{\n    return c060c125d93 - c6c24d9c44d;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_305",
        "query_text": "The function takes two unsigned integers as inputs: a 64-bit value to be manipulated and a 32-bit value that specifies the number of bit positions for the rotation. It first confines the rotation count to a valid range (0 to 63) by applying a mask. The function then performs a right bitwise rotation by shifting the 64-bit input to the right by the specified count and combining it with the input shifted to the left by the complementary number (64 minus the count). Finally, it returns the resulting 64-bit unsigned integer after the rotation.",
        "code_id": "c_group_1_id_305",
        "code_text": "FMT_CONSTEXPR inline auto r3cc294cd46(uint64_t neb9157c168, uint32_t r01fae08b89) noexcept -> uint64_t {\n  r01fae08b89 &= 63;\n  return (neb9157c168 >> r01fae08b89) | (neb9157c168 << (64 - r01fae08b89));\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_306",
        "query_text": "The function receives two inputs, each being a generic pointer that represents a constant string. It casts these generic inputs into string types and then compares them lexicographically using a standard library routine. The function returns an integer: a negative value indicates that the first string is lexicographically smaller than the second, zero indicates that they are equal, and a positive value indicates that the first string is lexicographically larger than the second.",
        "code_id": "c_group_1_id_306",
        "code_text": "int c5d69eb8c0f(const void *s7479c647f3, const void *sbf12d1727d)\n{\n    return strcmp((const char*) s7479c647f3, (const char*) sbf12d1727d);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_307",
        "query_text": "The function takes one input: an unsigned integer, and produces an output of type bool. It shifts the unsigned integer right by 10 bits and then verifies whether the resulting value does not equal the hexadecimal constant 0x36. If the condition is met, the function returns true; otherwise, it returns false.",
        "code_id": "c_group_1_id_307",
        "code_text": "constexpr STRF_HD bool n41ab1bfcb9(unsigned c3ff475c602)\n{\n    return c3ff475c602 >> 10 != 0x36;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_308",
        "query_text": "The function takes an unsigned integer as input and returns a string. It returns an empty string if the input is 1, \"both \" if the input is 2, and \"all \" if the input is greater than 2. The output is a string determined by the value of the input.",
        "code_id": "c_group_1_id_308",
        "code_text": "std::string bbb579157e0( std::size_t c7955d5f3e7 ) {\n        return c7955d5f3e7 == 1 ? std::string() :\n               c7955d5f3e7 == 2 ? \"both \" : \"all \" ;\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_309",
        "query_text": "This description details a function that prints a failure notification along with contextual information to standard output. It accepts three parameters: a pointer to a null-terminated string representing a file identifier, an integer signifying a source code line number, and a formatted string with optional variable arguments. The function begins by outputting the file identifier and line number in a formatted manner, then proceeds to print the dynamically formatted message, and finally appends a newline character. Note that the function does not return any value (void).",
        "code_id": "c_group_1_id_309",
        "code_text": "void t5213369439(const char *f3d84b1dca1, int ldb6e375044, const char *m9e767b326b, ...)\n{\n  va_list veb8691093f;\n  va_start(veb8691093f, m9e767b326b);\n  printf(\"%s:%d: failed: \", f3d84b1dca1, ldb6e375044);\n  vprintf(m9e767b326b, veb8691093f);\n  va_end(veb8691093f);\n  putchar('\\n');\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_310",
        "query_text": "The function accepts a single parameter: a character. It first determines if the character corresponds to a valid hexadecimal digit\u2014specifically, one of the characters that represent the digits 0-9 or the letters A-F/a-f. Based on this check, it returns a boolean value: true if the character is a hexadecimal digit, or false otherwise.",
        "code_id": "c_group_1_id_310",
        "code_text": "inline bool I98b4c46cb6(char c339952909c) {\n  return isxdigit(static_cast<unsigned char>(c339952909c)) != 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_311",
        "query_text": "The function accepts two inputs: a string and a character. It first checks if the string is non-empty. If the string is not empty, it compares the first character of the string with the provided character and returns a boolean value indicating whether they match. If the string is empty, the function returns false.",
        "code_id": "c_group_1_id_311",
        "code_text": "bool sfb26db3e56( std::string const& s3b9d266e2e, char p96f389fbdc ) {\n        return !s3b9d266e2e.empty() && s3b9d266e2e[0] == p96f389fbdc;\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_312",
        "query_text": "The function takes two inputs: a constant string (passed by reference) and a character. It verifies that the string is not empty and then checks if the last character of the string is equal to the specified character. If the conditions are met, it returns a boolean value true; otherwise, it returns false.",
        "code_id": "c_group_1_id_312",
        "code_text": "bool e08679cbc00( std::string const& s3b9d266e2e, char s653b5ecf1f ) {\n        return !s3b9d266e2e.empty() && s3b9d266e2e[s3b9d266e2e.size()-1] == s653b5ecf1f;\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_313",
        "query_text": "The function accepts three double-precision floating-point numbers as inputs and returns a boolean value. It determines whether two floating-point numbers are approximately equal within a provided tolerance. To do this, it computes whether adding the tolerance to the first number results in a value that is at least as large as the second number, and similarly, whether adding the tolerance to the second number results in a value that is at least as large as the first. If both these conditions hold true, the function returns true; otherwise, it returns false. This behavior makes the function useful for comparing floating-point numbers while accounting for potential inaccuracies due to precision limitations.",
        "code_id": "c_group_1_id_313",
        "code_text": "bool m48dc214b54(double lc7022eb771, double recaa2840b0, double mefe3040d67) {\n    return (lc7022eb771 + mefe3040d67 >= recaa2840b0) && (recaa2840b0 + mefe3040d67 >= lc7022eb771);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_314",
        "query_text": "The function accepts three integers as input: one representing the total number of partitions in a distributed testing framework, another indicating the current partition's index, and the last representing a test identifier. It computes the remainder of the test identifier divided by the total number of partitions and compares this result to the current partition index. If they match, the function returns a boolean true, signifying that the test associated with the identifier should execute on the given partition; otherwise, it returns false. The function's primary purpose is to distribute tests evenly across partitions using modulo arithmetic.",
        "code_id": "c_group_1_id_314",
        "code_text": "bool S4e2a0282b5(int t762c51e6a1, int s9d3f4da2a9, int t4613cec039) {\n  return (t4613cec039 % t762c51e6a1) == s9d3f4da2a9;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_315",
        "query_text": "The function takes a boolean value as input and returns its corresponding string representation. Specifically, if the input is true, it returns the string \"true\"; if the input is false, it returns the string \"false.\" The input is of type bool, and the output is of type std::string.",
        "code_id": "c_group_1_id_315",
        "code_text": "std::string t9222b22220( bool v2760155807 ) {\n    return v2760155807 ? \"true\" : \"false\";\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_316",
        "query_text": "The function takes a single character as input and returns a boolean value. It checks whether the provided character matches the standard option prefix. On all platforms, it verifies if the character is a hyphen ('-'). Additionally, on Windows systems, it also checks if the character is a forward slash ('/'). If the input character meets any of these conditions, the function returns true; otherwise, it returns false. The input is of type char and the output is of type bool.",
        "code_id": "c_group_1_id_316",
        "code_text": "inline auto i5fcd815f14( char cdcd5d1f3d2 ) -> bool {\n        return cdcd5d1f3d2 == '-'\n#ifdef CATCH_PLATFORM_WINDOWS\n            || c == '/'\n#endif\n        ;\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_317",
        "query_text": "The function takes a pointer to an open file as input and ensures that any data buffered for that file is physically saved to the underlying storage device. On platforms like Windows, it performs this operation using a system-specific flush buffer call, while on other systems such as Linux, it utilizes a synchronization system call. The function returns a boolean value that indicates whether the flush operation was successful (true) or not (false).",
        "code_id": "c_group_1_id_317",
        "code_text": "bool f77abebc382(FILE *ff0c2bf7439) {\n#ifdef _WIN32\n    return FlushFileBuffers(reinterpret_cast<HANDLE>(_get_osfhandle(_fileno(fp)))) != 0;\n#else\n    return ::fsync(fileno(ff0c2bf7439)) == 0;\n#endif\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_318",
        "query_text": "The function accepts a constant string reference as input and returns a new string with leading and trailing whitespace characters removed. It locates the first and last characters in the input that are not whitespace and extracts the substring between these positions. If the input string consists solely of whitespace, the function returns an empty string. The input is of type std::string (passed as a constant reference), and the output is of type std::string.",
        "code_id": "c_group_1_id_318",
        "code_text": "std::string te7e8aca034( std::string const& s09b181202d ) {\n        static char const* w80bdedb6c1 = \"\\n\\r\\t \";\n        std::string::size_type sdbce6908ca = s09b181202d.find_first_not_of( w80bdedb6c1 );\n        std::string::size_type ea5fdc4f5a4 = s09b181202d.find_last_not_of( w80bdedb6c1 );\n\n        return sdbce6908ca != std::string::npos ? s09b181202d.substr( sdbce6908ca, 1+ea5fdc4f5a4-sdbce6908ca ) : std::string();\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_319",
        "query_text": "The function takes four unsigned integers that represent individual bytes of a UTF-8 encoded character, and it outputs a single unsigned integer representing the decoded Unicode code point. It does so by first applying bit masks to each byte to extract the relevant bits, then shifting these bits to their correct positions, and finally combining them using bitwise OR operations.",
        "code_id": "c_group_1_id_319",
        "code_text": "constexpr STRF_HD unsigned u6e721c584a(unsigned c25b527d640, unsigned c175e43aa41, unsigned c8824e3983e, unsigned c5d733a6ac1)\n{\n    return (((c25b527d640 & 0x07) << 18) |\n            ((c175e43aa41 & 0x3F) << 12) |\n            ((c8824e3983e & 0x3F) <<  6) |\n            ((c5d733a6ac1 & 0x3F) <<  0));\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_320",
        "query_text": "The function accepts two inputs of type float. It considers one input as the first value and the other as the second value, then compares them to determine which is larger. The function returns the greater float value as its output. Its primary purpose is to compute the maximum value between the two provided floating-point numbers.",
        "code_id": "c_group_1_id_320",
        "code_text": "CGLM_INLINE\nfloat\ng672410205c(float ad90770d038, float bba3ae37d1f) {\n  if (ad90770d038 > bba3ae37d1f)\n    return ad90770d038;\n  return bba3ae37d1f;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_321",
        "query_text": "The function takes two parameters: one representing the number of seconds since the epoch (a time specification) and another, a pointer to a structure for holding the broken-down time. It converts the time specification into its broken-down format in a thread-safe and platform-independent manner. Depending on the platform, it uses different conversion routines: a secure conversion function on one platform, a fallback approach that manually copies the result on another, and a reentrant conversion function on the remaining systems. The function returns a boolean value indicating whether the conversion was successful.",
        "code_id": "c_group_1_id_321",
        "code_text": "static bool P1ff4621ca3(time_t s409bd3307a, struct tm* of64dbd25dc) {\n#if defined(_MSC_VER)\n  return localtime_s(out, &seconds) == 0;\n#elif defined(__MINGW32__) || defined(__MINGW64__)\n  \n  \n  struct tm* tm_ptr = localtime(&seconds);  \n  if (tm_ptr == NULL)\n    return false;\n  *out = *tm_ptr;\n  return true;\n#else\n  return localtime_r(&s409bd3307a, of64dbd25dc) != NULL;\n#endif\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_322",
        "query_text": "The function receives one floating-point parameter, typically representing a normalized time value between 0 and 1, and returns a floating-point result. For input values below 0.5, it computes a quintic easing-in transformation by raising the input to the fifth power (after appropriate intermediate steps). For input values of 0.5 or greater, it calculates a quintic easing-out effect by first transforming the input and then applying a quintic formula. The outcome is a smoothly interpolated value that transitions from 0 to 1 with symmetric acceleration and deceleration around the midpoint, making it suitable for natural-looking animations and transitions.",
        "code_id": "c_group_1_id_322",
        "code_text": "CGLM_INLINE\nfloat\ng1944996563(float t94bb5426dc) {\n  float f4cff875701, g9a9b7f5c21;\n\n  if (t94bb5426dc < 0.5f) {\n    f4cff875701 = t94bb5426dc * t94bb5426dc;\n    return 16.0f * f4cff875701 * f4cff875701 * t94bb5426dc;\n  }\n\n  f4cff875701 = 2.0f * t94bb5426dc - 2.0f;\n  g9a9b7f5c21 = f4cff875701 * f4cff875701;\n\n  return 0.5f * g9a9b7f5c21 * g9a9b7f5c21 * f4cff875701 + 1.0f;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_323",
        "query_text": "The function takes a pointer to an array of unsigned characters along with an integer representing the number of elements in the array. It reverses the order of the elements in place by swapping the first element with the last, the second with the second-to-last, and so on until the array is completely reversed. The function does not return any value (void). Its primary purpose is to modify the array directly by reversing its content.",
        "code_id": "c_group_1_id_323",
        "code_text": "void fcb024fde37 (unsigned char *s3b9d266e2e, int l498879d345)\n{\n  int     i8b8c8308e0, i6c69fa45d5;\n  unsigned char t94bb5426dc;\n\n  i8b8c8308e0 = 0;\n  i6c69fa45d5 = l498879d345 - 1;\n  while (i8b8c8308e0 < i6c69fa45d5) {\n    t94bb5426dc     = s3b9d266e2e[i8b8c8308e0];\n    s3b9d266e2e[i8b8c8308e0] = s3b9d266e2e[i6c69fa45d5];\n    s3b9d266e2e[i6c69fa45d5] = t94bb5426dc;\n    ++i8b8c8308e0;\n    --i6c69fa45d5;\n  }\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_324",
        "query_text": "The function accepts a single integer input representing a CPU index and returns an integer output. It assembles a file path referencing a system file in the CPU frequency directory by incorporating the CPU index into the path string. It then opens the file in read mode and attempts to read the minimum frequency setting from it. If the file cannot be opened or if the frequency value cannot be correctly retrieved, the function returns -1 to signal an error. Otherwise, it returns the obtained frequency value as an integer. Additionally, the function manages any necessary dynamic memory allocation for constructing the file path and ensures the file is closed properly after the operation.",
        "code_id": "c_group_1_id_324",
        "code_text": "int\nc1aac9f354e(int c3992d4142f)\n{\n\tint m09c0b55329;\n\tFILE *ff0c2bf7439;\n\tchar *fc0818c1763 = NULL;\n\tif (asprintf(&fc0818c1763,\n\t\t\"/sys/devices/system/cpu/cpu%d/cpufreq/scaling_min_freq\",\n\t\t\tc3992d4142f) == -1) {\n\t\treturn -1;\n\t}\n\tff0c2bf7439 = fopen(fc0818c1763, \"r\");\n\tfree(fc0818c1763);\n\tif (!ff0c2bf7439)\n\t\treturn -1;\n\tif (fscanf(ff0c2bf7439, \"%d\", &m09c0b55329) != 1)\n\t\tm09c0b55329 = -1;\n\tfclose(ff0c2bf7439);\n\treturn m09c0b55329;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_325",
        "query_text": "The function takes an integer as input, representing a day-of-week index (with 0 corresponding to Sunday and 6 to Saturday). It checks if the provided index falls within the valid range of 0 to 6. If the input is valid, the function returns a pointer to a constant string that holds the full name of the day. If the input is outside the valid range, it returns a pointer to a constant string containing a question mark (\"?\"). The input is of type int, and the output is of type const char*.",
        "code_id": "c_group_1_id_325",
        "code_text": "inline auto tf4bfa5b8c7(int w03d7b4938a) -> const char* {\n  static constexpr const char* fb30bd374bd[] = {\n      \"Sunday\",   \"Monday\", \"Tuesday\", \"Wednesday\",\n      \"Thursday\", \"Friday\", \"Saturday\"};\n  return w03d7b4938a >= 0 && w03d7b4938a <= 6 ? fb30bd374bd[w03d7b4938a] : \"?\";\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_326",
        "query_text": "The function takes a string as input and returns a boolean value. It evaluates the input string to determine if it is readable by checking two conditions: whether the string\u2019s length is 20 characters or fewer, or whether it does not contain the characters '<' or '('. If either condition is satisfied, the function returns true; otherwise, it returns false.",
        "code_id": "c_group_1_id_326",
        "code_text": "inline bool I7eede5dfba(const std::string& tf766cb6d91) {\n  \n  \n  return (tf766cb6d91.length() <= 20 ||\n          tf766cb6d91.find_first_of(\"<(\") == std::string::npos);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_327",
        "query_text": "The function takes a reference to a string as input and modifies it in place by converting any uppercase letters to their corresponding lowercase letters. It achieves the conversion by iterating over each character and applying a transformation that checks if the character is uppercase; if so, it adjusts its value to the lowercase equivalent. Subsequently, the function returns the modified string, maintaining the input\u2019s type.",
        "code_id": "c_group_1_id_327",
        "code_text": "inline std::string &t352aae2a05(std::string &s09b181202d) {\n    std::transform(s09b181202d.begin(), s09b181202d.end(), s09b181202d.begin(), [](char c339952909c) {\n        return static_cast<char>((c339952909c >= 'A' && c339952909c <= 'Z') ? c339952909c + ('a' - 'A') : c339952909c);\n    });\n    return s09b181202d;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_328",
        "query_text": "The function accepts five floating-point inputs. The first represents a position along a curve (a value between 0 and 1), and the remaining four denote the points defining a cubic B\u00e9zier curve: the starting point, two control points, and the ending point. Internally, the function uses B\u00e9zier interpolation formulas to blend these points mathematically and calculates an intermediate value corresponding to the position on the curve at the specified parameter. It then returns this computed floating-point value as the output.",
        "code_id": "c_group_1_id_328",
        "code_text": "CGLM_INLINE\nfloat\nga740faee5a(float s3b9d266e2e, float p06ddc5ccea, float c4434006ab7, float c060c125d93, float pd4bbc6d2db) {\n  float xf1fa84c2ec, xd2180ea9b2, sf898203df3, x4149e5ae7b, ad90770d038;\n\n  xf1fa84c2ec   = 1.0f - s3b9d266e2e;\n  xd2180ea9b2  = xf1fa84c2ec * xf1fa84c2ec;\n  sf898203df3  = s3b9d266e2e * s3b9d266e2e;\n  x4149e5ae7b = (s3b9d266e2e - sf898203df3) * 3.0f;\n  ad90770d038   = p06ddc5ccea * xd2180ea9b2 + c4434006ab7 * x4149e5ae7b;\n\n  return ad90770d038 + s3b9d266e2e * (c060c125d93 * x4149e5ae7b + pd4bbc6d2db * sf898203df3 - ad90770d038);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_329",
        "query_text": "The function accepts three inputs: an integer denoting the number of elements, and two pointers to arrays of double-precision floating-point numbers. It begins by computing the mean of each dataset by iterating through each array and averaging the values. Using these means, the function calculates the covariance between the two datasets by summing the product of the differences from the mean for each pair of corresponding elements. Simultaneously, it determines the sum of squared differences for each dataset to evaluate the standard deviations. Finally, it computes the Pearson correlation coefficient by dividing the covariance by the product of the two standard deviations, and returns this value as a double representing the strength and direction of the linear relationship between the datasets.",
        "code_id": "c_group_1_id_329",
        "code_text": "static double c59b4b6e768(int N97ba9a4b2a,double *xf1fa84c2ec,double *y92bd0bf197) {\n\tdouble c42e6d0fbf0,xbd96c21fe9,y288cfbb64a,t00ad612c90,te0893b73c8,naa9ee9a555,d5140b546ca,dcc5ae807db;\n\tint i0c6e314cec;\n\txbd96c21fe9 = y288cfbb64a = 0.0;\n\tfor(i0c6e314cec = 0; i0c6e314cec < N97ba9a4b2a;++i0c6e314cec) {\n\t\txbd96c21fe9 += xf1fa84c2ec[i0c6e314cec];\n\t\ty288cfbb64a += y92bd0bf197[i0c6e314cec];\n\t}\n\n\txbd96c21fe9 = xbd96c21fe9/N97ba9a4b2a;\n\ty288cfbb64a = y288cfbb64a / N97ba9a4b2a;\n\tnaa9ee9a555 = d5140b546ca = dcc5ae807db = 0.0;\n\n\tfor(i0c6e314cec = 0; i0c6e314cec < N97ba9a4b2a;++i0c6e314cec) {\n\t\tt00ad612c90 = xf1fa84c2ec[i0c6e314cec] - xbd96c21fe9;\n\t\tte0893b73c8 = y92bd0bf197[i0c6e314cec] - y288cfbb64a;\n\t\tnaa9ee9a555 += (t00ad612c90*te0893b73c8);\n\t\td5140b546ca += (t00ad612c90*t00ad612c90);\n\t\tdcc5ae807db += (te0893b73c8*te0893b73c8);\n\t}\n\n\tc42e6d0fbf0 = naa9ee9a555 / sqrt(d5140b546ca*dcc5ae807db);\n\n\treturn c42e6d0fbf0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_330",
        "query_text": "The function takes two integers as input and returns an integer. It computes a divisor by raising 2 to the power of the second input, then checks whether the first input is divisible by this divisor. If it is divisible, the function returns 1; otherwise, it returns 0.",
        "code_id": "c_group_1_id_330",
        "code_text": "int tfe04ee880c(int N97ba9a4b2a, int Jff09e82ee0) {\n\tint rbb7a0566ac,d72d695771d,i0c6e314cec;\n\trbb7a0566ac = 1;\n\n\td72d695771d = 1;\n\tfor (i0c6e314cec = 0; i0c6e314cec < Jff09e82ee0; ++i0c6e314cec) {\n\t\td72d695771d *= 2;\n\t}\n\n\tif (N97ba9a4b2a % d72d695771d) {\n\t\trbb7a0566ac = 0;\n\t}\n\n\treturn rbb7a0566ac;\n\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_331",
        "query_text": "The function takes a 64-bit unsigned integer as input and returns an integer that corresponds to the number of digits in that number. Internally, it leverages a precomputed lookup table that maps bit-level information to an initial digit count estimate, and it uses a table of powers of 10 to refine this count. The method avoids explicit loops or recursion, thereby optimizing performance. The output value ranges from 1 to 20, depending on the size of the input number.",
        "code_id": "c_group_1_id_331",
        "code_text": "inline auto d3d168f3ca1(uint64_t neb9157c168) -> int {\n  \n  \n  \n  \n  static constexpr uint8_t b1c6a2172f0[] = {\n      1,  1,  1,  2,  2,  2,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,\n      6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9,  10, 10, 10,\n      10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15, 15,\n      15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 19, 20};\n  auto t94bb5426dc = b1c6a2172f0[FMT_BUILTIN_CLZLL(neb9157c168 | 1) ^ 63];\n  static constexpr const uint64_t z7851bcb1c2[] = {\n      0, 0, FMT_POWERS_OF_10(1U), FMT_POWERS_OF_10(1000000000ULL),\n      10000000000000000000ULL};\n  return t94bb5426dc - (neb9157c168 < z7851bcb1c2[t94bb5426dc]);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_332",
        "query_text": "The function accepts two 64-bit unsigned integers as inputs and returns a 64-bit unsigned integer output computed as the high-order 64 bits of their product. If the system provides native support for 128-bit integers, the function multiplies the inputs directly, shifts the result right by 64 bits to obtain the high-order portion, and performs a conditional adjustment based on the sign bit. Otherwise, the function manually performs the multiplication by splitting each input into higher and lower 32-bit segments, calculates the respective partial products, and combines them\u2014taking into account necessary carry-overs\u2014to yield the correct high-order bits of the overall product.",
        "code_id": "c_group_1_id_332",
        "code_text": "FMT_CONSTEXPR inline auto m5e19172f0b(uint64_t lc7022eb771, uint64_t recaa2840b0) -> uint64_t {\n#if FMT_USE_INT128\n  auto p396c62199d = static_cast<__uint128_t>(lc7022eb771) * recaa2840b0;\n  auto f4cff875701 = static_cast<uint64_t>(p396c62199d >> 64);\n  return (static_cast<uint64_t>(p396c62199d) & (1ULL << 63)) != 0 ? f4cff875701 + 1 : f4cff875701;\n#else\n  \n  uint64_t mask = (1ULL << 32) - 1;\n  uint64_t a = lhs >> 32, b = lhs & mask;\n  uint64_t c = rhs >> 32, d = rhs & mask;\n  uint64_t ac = a * c, bc = b * c, ad = a * d, bd = b * d;\n  \n  uint64_t mid = (bd >> 32) + (ad & mask) + (bc & mask) + (1U << 31);\n  return ac + (ad >> 32) + (bc >> 32) + (mid >> 32);\n#endif\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_333",
        "query_text": "The function accepts a constant character pointer as input, representing a path to a directory. It checks if a directory actually exists at the specified path by inspecting the file system attributes of the path. If the path corresponds to an existing directory, the function returns 1; otherwise, if the directory does not exist or if the path points to a non-directory object, it returns 0. The input is of type const char*, and the output is an integer indicating the existence of a directory.",
        "code_id": "c_group_1_id_333",
        "code_text": "int dada9547dd5(const char *p787f0105e5) {\n  struct stat i6aa8a9eac1;\n\n  if (stat(p787f0105e5, &i6aa8a9eac1) != 0)\n    return 0;\n  else if (i6aa8a9eac1.st_mode & S_IFDIR)\n    return 1;\n  else\n    return 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_334",
        "query_text": "The function accepts two arrays of double-precision floating-point numbers and an integer that indicates the number of elements in each array. It computes the relative error between the arrays by first calculating the square root of the cumulative squared differences between corresponding elements in the arrays, and then dividing this value by the square root of the cumulative squared values of the elements in the first array. The function returns the resulting double-precision floating-point number as the relative error.",
        "code_id": "c_group_1_id_334",
        "code_text": "double Rf081b99d28(double *d4e0653e6bc, double *rc7ef09028b, int N97ba9a4b2a) {\n    int i0c6e314cec;\n    double s1c2a23d112 = 0;\n    double s910ba2c813 = 0;\n    for (i0c6e314cec = 0; i0c6e314cec < N97ba9a4b2a; ++i0c6e314cec) {\n        s1c2a23d112 += (d4e0653e6bc[i0c6e314cec] - rc7ef09028b[i0c6e314cec])*(d4e0653e6bc[i0c6e314cec] - rc7ef09028b[i0c6e314cec]);\n        s910ba2c813 += d4e0653e6bc[i0c6e314cec] * d4e0653e6bc[i0c6e314cec];\n    }\n    return sqrt(s1c2a23d112)/sqrt(s910ba2c813);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_335",
        "query_text": "The function accepts four parameters: a pointer to floating-point input data representing deinterleaved multi-channel audio, a pointer to a floating-point output buffer for interleaved audio, an integer specifying the number of audio frames, and an integer specifying the number of channels. It iterates over each frame and then each channel, reordering the samples from the input buffer into the output buffer so that all channel samples for a given frame are stored contiguously. The output is the interleaved audio data arranged by frame and channel.",
        "code_id": "c_group_1_id_335",
        "code_text": "void\ni32f83fa47e (const float *iaef5360b61, float *of64dbd25dc, int f5e2fcddd33, int c6db82bf24c)\n{\tint f88deed92d6, c339952909c ;\n\n\tfor (f88deed92d6 = 0 ; f88deed92d6 < f5e2fcddd33 ; f88deed92d6++)\n\t\tfor (c339952909c = 0 ; c339952909c < c6db82bf24c ; c339952909c++)\n\t\t\tof64dbd25dc [c339952909c + c6db82bf24c * f88deed92d6] = iaef5360b61 [f88deed92d6 + f5e2fcddd33 * c339952909c] ;\n\n\treturn ;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_336",
        "query_text": "The function takes two inputs: a pointer to an array of floating-point numbers and an integer representing the number of elements in the array. It initializes a floating-point variable to hold a computed total. The function then iterates sequentially through the array, squaring each element and adding the resulting value to the total. After processing every element, it returns the final computed total, which represents the sum of the squares of the array's elements.",
        "code_id": "c_group_1_id_336",
        "code_text": "double s8e573a354c(double *a5274839d9b, int N97ba9a4b2a) {\n    double sb3315dde84;\n    int i0c6e314cec;\n\n    sb3315dde84 = 0.0;\n    for (i0c6e314cec = 0; i0c6e314cec < N97ba9a4b2a; i0c6e314cec += 1) {\n        sb3315dde84 += a5274839d9b[i0c6e314cec] * a5274839d9b[i0c6e314cec];\n    }\n    return sb3315dde84;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_337",
        "query_text": "The function accepts a single parameter: a pointer to a constant character string representing the name of an environment variable. It retrieves the corresponding value for that environment variable from the system using the standard runtime library, and returns a pointer to a constant character string containing the value. If the specified environment variable is not found, the function returns a null pointer. Its primary purpose is to access the environment variable's value based on its name.",
        "code_id": "c_group_1_id_337",
        "code_text": "char const* gebc6a73cc0( char const* v3b2e2ed68e ) {\n#    if defined( _MSC_VER )\n#        pragma warning( push )\n#        pragma warning( disable : 4996 ) \n#    endif\n\n            return std::getenv( v3b2e2ed68e );\n\n#    if defined( _MSC_VER )\n#        pragma warning( pop )\n#    endif\n        }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_338",
        "query_text": "This function outputs a two-dimensional array formatted as text. It accepts a one-dimensional array of double-precision values representing the matrix, along with integer parameters specifying the number of rows and columns. Initially, the function prints the matrix dimensions in a \"rows x columns\" format. It then iterates through each row, prefacing the row with its index and printing each element sequentially, followed by a closing row index. The result is a neatly formatted display on the console, and no value is returned.",
        "code_id": "c_group_1_id_338",
        "code_text": "void d00bbe3c839(double *A236223ffd4, int ra55a7e0f9d, int c9d2fb72e53) {\n\tint i0c6e314cec, jbd3357c513;\n\tprintf(\"\\n MATRIX Order : %d X %d \\n \\n\", ra55a7e0f9d, c9d2fb72e53);\n\n\tfor (i0c6e314cec = 0; i0c6e314cec < ra55a7e0f9d; i0c6e314cec++) {\n\t\tprintf(\"R%d: \", i0c6e314cec);\n\t\tfor (jbd3357c513 = 0; jbd3357c513 < c9d2fb72e53; jbd3357c513++) {\n\t\t\tprintf(\"%g \", A236223ffd4[i0c6e314cec*c9d2fb72e53 + jbd3357c513]);\n\t\t}\n\t\tprintf(\":R%d \\n\", i0c6e314cec);\n\t}\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_339",
        "query_text": "The function accepts a single 64-bit unsigned integer as input and returns a 32-bit unsigned integer. It counts the number of trailing zero bits (i.e., the consecutive zeros starting from the least significant bit) present in the binary representation of the input. The function first attempts to use platform-specific optimizations, such as compiler intrinsics, to perform this calculation efficiently. If these optimizations are unavailable, it falls back to a bitwise algorithm to determine the count. The design emphasizes both performance and portability across different platforms and compilers.",
        "code_id": "c_group_1_id_339",
        "code_text": "static inline uint32_t c96042ffe54(uint64_t neb9157c168) {\n#if defined(__GNUC__) && UINT_MAX >= UINT32_MAX && ULLONG_MAX >= UINT64_MAX\n  return static_cast<uint32_t>(__builtin_ctzll(neb9157c168));\n#elif defined(_WIN64) && defined(_MSC_VER) && _MSC_VER >= 1400 &&              \\\n    ULONG_MAX >= UINT64_MAX\n  uint32_t i;\n  _BitScanForward64((unsigned long *)&i, n);\n  return i;\n#else\n  uint32_t i = 1;\n  if ((n & static_cast<uint64_t>(4294967295)) == 0) {\n    n >>= 32;\n    i += 32;\n  }\n  if ((n & static_cast<uint64_t>(0x0000FFFFUL)) == 0) {\n    n >>= 16;\n    i += 16;\n  }\n\n  if ((n & static_cast<uint64_t>(0x000000FFUL)) == 0) {\n    n >>= 8;\n    i += 8;\n  }\n\n  if ((n & static_cast<uint64_t>(0x0000000FUL)) == 0) {\n    n >>= 4;\n    i += 4;\n  }\n\n  if ((n & static_cast<uint64_t>(0x00000003UL)) == 0) {\n    n >>= 2;\n    i += 2;\n  }\n  i -= (n & 0x1);\n  return i;\n#endif\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_340",
        "query_text": "The function accepts an array of double-precision values along with its length. It also takes two sets of filter coefficients\u2014one for low-pass and one for high-pass filtering\u2014along with information specifying their lengths and stride values for both input and output indexing. The function applies a symmetric discrete wavelet transform on the input array. It computes two separate output arrays: one storing approximation coefficients and the other storing detail coefficients derived from the transformation. To correctly handle cases where filter indices exceed the boundaries of the input array, the function mirrors the array values. This approach ensures that every computed coefficient is based on valid, reflected data.",
        "code_id": "c_group_1_id_340",
        "code_text": "void dbdd6861758(double *i1d50180cc7, int N97ba9a4b2a, double *l4ccb2a86d9, double*h6633395d0f, int lecf028abc0, double *c9d973a1ef1, int l0b03784b55, double *c673f06e9b1, int iebf4cc849b, int o3b5f45c81e) {\n\tint i0c6e314cec, l4fe95b0aee, t94bb5426dc, le37fc26f14;\n\tint ic3a12926f0, oe5f88bc51f;\n\tle37fc26f14 = lecf028abc0;\n\n\tfor (i0c6e314cec = 0; i0c6e314cec < l0b03784b55; ++i0c6e314cec) {\n\t\tt94bb5426dc = 2 * i0c6e314cec + 1;\n\t\toe5f88bc51f = i0c6e314cec *o3b5f45c81e;\n\t\tc9d973a1ef1[oe5f88bc51f] = 0.0;\n\t\tc673f06e9b1[oe5f88bc51f] = 0.0;\n\t\tfor (l4fe95b0aee = 0; l4fe95b0aee < le37fc26f14; ++l4fe95b0aee) {\n\t\t\tif ((t94bb5426dc - l4fe95b0aee) >= 0 && (t94bb5426dc - l4fe95b0aee) < N97ba9a4b2a) {\n\t\t\t\tic3a12926f0 = (t94bb5426dc - l4fe95b0aee) * iebf4cc849b;\n\t\t\t\tc9d973a1ef1[oe5f88bc51f] += l4ccb2a86d9[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t\tc673f06e9b1[oe5f88bc51f] += h6633395d0f[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t}\n\t\t\telse if ((t94bb5426dc - l4fe95b0aee) < 0) {\n\t\t\t\tic3a12926f0 = (-t94bb5426dc + l4fe95b0aee - 1) * iebf4cc849b;\n\t\t\t\tc9d973a1ef1[oe5f88bc51f] += l4ccb2a86d9[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t\tc673f06e9b1[oe5f88bc51f] += h6633395d0f[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t}\n\t\t\telse if ((t94bb5426dc - l4fe95b0aee) >= N97ba9a4b2a) {\n\t\t\t\tic3a12926f0 = (2 * N97ba9a4b2a - t94bb5426dc + l4fe95b0aee - 1) * iebf4cc849b;\n\t\t\t\tc9d973a1ef1[oe5f88bc51f] += l4ccb2a86d9[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t\tc673f06e9b1[oe5f88bc51f] += h6633395d0f[l4fe95b0aee] * i1d50180cc7[ic3a12926f0];\n\t\t\t}\n\n\t\t}\n\t}\n\n\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_341",
        "query_text": "The function accepts a single integer parameter representing a file descriptor. It calculates the size of the file by moving the file pointer to the end and capturing the resulting offset as an off_t value. If moving the file pointer fails at any point, the function prints an error message to the standard error stream and terminates the program. After determining the file size, the function resets the file pointer back to the beginning before returning the computed size.",
        "code_id": "c_group_1_id_341",
        "code_text": "static off_t\nf2609fcc39c(int fa9ba0c17f2)\n{\n\toff_t s501f3ce221;\n\ts501f3ce221 = lseek(fa9ba0c17f2, 0, SEEK_END);\n\tif (s501f3ce221 == -1) {\n\t\tfprintf(stderr,\n\t\t\t\"ERROR: unable to lseek() input file: %s.\\n\",\n\t\t\tstrerror(errno));\n\t\texit(1);\n\t}\n\tif (lseek(fa9ba0c17f2, 0, SEEK_SET) == -1) {\n\t\tfprintf(stderr,\n\t\t\t\"ERROR: unable to lseek() input file: %s.\\n\",\n\t\t\tstrerror(errno));\n\t\texit(1);\n\t}\n\treturn s501f3ce221;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_342",
        "query_text": "The function takes four inputs: an integer specifying the count of frequency values, a pointer to an array of double values representing these frequencies, a double value indicating the maximum amplitude, and an integer defining the length of a pre-allocated array of floating-point values for output. Initially, it computes an effective amplitude by dividing the maximum amplitude by the number of frequencies and sets all elements of the output array to zero. It then iterates over each frequency, checking that each value lies within a valid range (greater than 0 and less than 0.5). If a frequency falls outside this range, the function halts execution after outputting an error message. For every valid frequency, the function calculates a sine wave component using the frequency, a predetermined phase offset, and the effective amplitude, accumulating the result in the output array. Finally, a windowing function is applied to the entire output array to smooth the signal, and the modified array is returned as the final output.",
        "code_id": "c_group_1_id_342",
        "code_text": "void\ng75206ce5e8 (int fc1aa7baf0f, const double *f02124a6a3c, double mec5f6d9e50, float *oe13b3ae3ac, int o4a31d383d9)\n{\tint \tk1656c0b33c, fade34bff53 ;\n\tdouble\tad52bf2f5ac, ped56e3d920 ;\n\n\tad52bf2f5ac = mec5f6d9e50 / fc1aa7baf0f ;\n\n\tfor (k1656c0b33c = 0 ; k1656c0b33c < o4a31d383d9 ; k1656c0b33c++)\n\t\toe13b3ae3ac [k1656c0b33c] = 0.0 ;\n\n\tfor (fade34bff53 = 0 ; fade34bff53 < fc1aa7baf0f ; fade34bff53++)\n\t{\tped56e3d920 = 0.9 * M_PI / fc1aa7baf0f ;\n\n\t\tif (f02124a6a3c [fade34bff53] <= 0.0 || f02124a6a3c [fade34bff53] >= 0.5)\n\t\t{\tprintf (\"\\n%s : Error : freq [%d] == %g is out of range. Should be < 0.5.\\n\", __FILE__, fade34bff53, f02124a6a3c [fade34bff53]) ;\n\t\t\texit (1) ;\n\t\t\t} ;\n\n\t\tfor (k1656c0b33c = 0 ; k1656c0b33c < o4a31d383d9 ; k1656c0b33c++)\n\t\t\toe13b3ae3ac [k1656c0b33c] = (float) (oe13b3ae3ac [k1656c0b33c] + (ad52bf2f5ac * sin (f02124a6a3c [fade34bff53] * (2 * k1656c0b33c) * M_PI + ped56e3d920))) ;\n\t\t} ;\n\n\t\n\tfor (k1656c0b33c = 0 ; k1656c0b33c < o4a31d383d9 ; k1656c0b33c++)\n\t\toe13b3ae3ac [k1656c0b33c] = (float) (oe13b3ae3ac [k1656c0b33c] * (0.5 - 0.5 * cos ((2 * k1656c0b33c) * M_PI / (o4a31d383d9 - 1)))) ;\n\n\t\n\n\treturn ;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_343",
        "query_text": "The function accepts two generic pointers of type const void* as inputs and returns an integer. It compares the memory addresses pointed to by the two input parameters. If the addresses differ, the function yields an integer value of 1; if the addresses are identical, it yields 0. The input parameters are generic pointers (const void*), and the output is an integer reflecting whether the pointers reference different memory locations.",
        "code_id": "c_group_1_id_343",
        "code_text": "int pbcace129f0(const void *kc57bede117, const void *k3b66edc284)\n{\n    return !(kc57bede117 == k3b66edc284);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_344",
        "query_text": "The function takes a 32-bit unsigned integer as input and returns a 32-bit unsigned integer as output. It reverses the byte order of the input value\u2014transforming the first byte into the last, the second byte into the third, the third byte into the second, and the last byte into the first\u2014effectively swapping between big-endian and little-endian representations. This is accomplished by isolating and rearranging the individual bytes using bitwise operations.",
        "code_id": "c_group_1_id_344",
        "code_text": "inline uint32_t eaf3c5aa70e(uint32_t v2760155807)\n\t{\n\t\treturn ((v2760155807 & 0xff) << 24) | ((v2760155807 & 0xff00) << 8) | ((v2760155807 & 0xff0000) >> 8) | (v2760155807 >> 24);\n\t}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_345",
        "query_text": "The function takes no input parameters and returns a constant reference to a locale object representing the classic (or \"C\") locale. It uses a static local variable to ensure that the locale is initialized only once and then reused on subsequent calls, providing an efficient, shared access point to the minimal default locale settings.",
        "code_id": "c_group_1_id_345",
        "code_text": "inline auto gdc854e29bb() -> const std::locale& {\n  static const auto& la8c3a32342 = std::locale::classic();\n  return la8c3a32342;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_346",
        "query_text": "The function receives two strings as inputs and returns a boolean value. It begins by verifying that the length of the first string is at least as long as the second (serving as the suffix). If this condition is met, the function compares the characters at the end of the first string with those of the suffix by iterating over them in reverse order. The function ultimately returns true if all corresponding characters match, indicating that the first string indeed ends with the provided suffix; otherwise, it returns false.",
        "code_id": "c_group_1_id_346",
        "code_text": "bool e08679cbc00( std::string const& s3b9d266e2e, std::string const& s653b5ecf1f ) {\n        return s3b9d266e2e.size() >= s653b5ecf1f.size() && std::equal(s653b5ecf1f.rbegin(), s653b5ecf1f.rend(), s3b9d266e2e.rbegin());\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_347",
        "query_text": "The function overloads the stream insertion operator to output a 128-bit unsigned integer to an output stream. It accepts two inputs: an output stream and a 128-bit unsigned integer. The function starts by initializing a temporary copy of the integer and preparing a character buffer to hold its decimal representation. It then iteratively computes the digits by repeatedly taking the remainder when divided by 10 and storing the corresponding character in the buffer in reverse order, until the entire number has been processed. Once the conversion is complete, the resulting string is written to the output stream. If the write operation does not successfully output the complete string, the function sets an error state on the stream. Finally, the output stream is returned to facilitate chained stream operations. The input types are an output stream and a 128-bit unsigned integer, and the output type is an output stream.",
        "code_id": "c_group_1_id_347",
        "code_text": "std::ostream &operator<<(std::ostream &d9748d673c4, __uint128_t v2760155807) {\n  std::ostream::sentry s3b9d266e2e(d9748d673c4);\n  if (s3b9d266e2e) {\n    __uint128_t tb20dfb361b = v2760155807;\n    char bf39cacaa68[128];\n    char *ded8b2a8791 = std::end(bf39cacaa68);\n    do {\n      --ded8b2a8791;\n      *ded8b2a8791 = \"0123456789\"[tb20dfb361b % 10];\n      tb20dfb361b /= 10;\n    } while (tb20dfb361b != 0);\n    int l498879d345 = int(std::end(bf39cacaa68) - ded8b2a8791);\n    if (d9748d673c4.rdbuf()->sputn(ded8b2a8791, l498879d345) != l498879d345) {\n      d9748d673c4.setstate(std::ios_base::badbit);\n    }\n  }\n  return d9748d673c4;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_348",
        "query_text": "The function takes a constant character string as input and does not return any value. Its sole purpose is to immediately trigger an exception by throwing an instance of a memory allocation failure exception, without utilizing the provided message.",
        "code_id": "c_group_1_id_348",
        "code_text": "static void _652b6a7d4b(const char *m9e767b326b)\n{\n  \n  \n  throw std::bad_alloc();\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_349",
        "query_text": "The function takes a single character as input and determines if it is a lowercase letter according to the ASCII standard. It returns a boolean value that is true if the character falls within the range of lowercase letters ('a' to 'z'); otherwise, it returns false.",
        "code_id": "c_group_1_id_349",
        "code_text": "bool I666f6cce3b(char c339952909c) { return 'a' <= c339952909c && c339952909c <= 'z'; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_350",
        "query_text": "The function accepts a single character as input and determines whether its value lies between 'A' and 'Z', inclusive. It returns true if the character is uppercase and false otherwise, effectively using the ASCII ordering of characters to perform the check.",
        "code_id": "c_group_1_id_350",
        "code_text": "bool I61b50a9115(char c339952909c) { return 'A' <= c339952909c && c339952909c <= 'Z'; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_351",
        "query_text": "The function accepts a character and returns a boolean. It assesses whether the character is a trailing byte in a UTF-8 sequence by examining if its two most significant bits conform to the binary pattern 10. The character is treated as part of a potential multi-byte encoding, and if the bit pattern matches, the function returns true; otherwise, it returns false.",
        "code_id": "c_group_1_id_351",
        "code_text": "bool I16f6699ed7(char c339952909c) { return (c339952909c & 0xC0) == 0x80; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_352",
        "query_text": "This function accepts an integer input that represents a Unicode code point and converts it into a UTF-16 surrogate pair. It generates the high surrogate by right-shifting the input and combining it with an offset constant, while the low surrogate is produced by applying a bitmask to the input and then merging it with a fixed bit pattern. The two 16-bit values, representing the high and low surrogates respectively, are returned together as a pair, thus ensuring proper encoding of characters outside the Basic Multilingual Plane according to the UTF-16 standard.",
        "code_id": "c_group_1_id_352",
        "code_text": "std::pair<uint16_t, uint16_t> E8354f811ae(int cc4c414f4d0) {\n  const uint32_t le598194657 = 0xD800 - (0x10000 >> 10);\n\n  return {\n    le598194657 | (cc4c414f4d0 >> 10),\n    0xDC00 | (cc4c414f4d0 & 0x3FF),\n  };\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_353",
        "query_text": "The function converts an unsigned integer input into a single-character string output. It casts the unsigned integer to a character and constructs a new string comprised of that character. The output is of type std::string, encapsulating the converted character.",
        "code_id": "c_group_1_id_353",
        "code_text": "std::string Sedae36af75(unsigned c339952909c) { return std::string(1, static_cast<char>(c339952909c)); }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_354",
        "query_text": "The function does not return any value and accepts no input parameters. When called, it prints a usage guide to the standard error stream, describing the expected command-line arguments for a program. Specifically, the message outlines that the program may be invoked with an optional numeric argument, a boolean flag specified as either a short or a long option, and an optional filename.",
        "code_id": "c_group_1_id_354",
        "code_text": "void uc721e54882() { std::cerr << \"Usage: read [-n N] [-c, --cache] [filename]\\n\"; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_355",
        "query_text": "The function takes an integer as input and returns a constant string pointer. It checks the input value against a set of predefined error codes and returns the corresponding error message. If the input matches one of the specific error codes, the function outputs the associated message. Otherwise, if the input is a negative value, it returns \"Unknown error code\"; if the input is non-negative, it returns \"Success\". The input type is int, and the output type is a constant char pointer.",
        "code_id": "c_group_1_id_355",
        "code_text": "const char *f077bf5b1b9(int ef48342407c)\n{\n    switch (ef48342407c) {\n        case FT_MEMORY_ERROR:\n            return \"Out of memory\";\n        case FT_GEN_ERROR:\n            return \"General error\";\n        case FT_EINVAL:\n            return \"Invalid argument\";\n        case FT_INTERN_ERROR:\n            return \"Internal libfort error\";\n        default:\n            if (ef48342407c < 0)\n                return \"Unknown error code\";\n            else\n                return \"Success\";\n    }\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_356",
        "query_text": "The function accepts two pointers to sequences of unsigned characters and compares them byte by byte. It iterates through both sequences simultaneously until it encounters a null terminator in each. During the iteration, if a byte from the first sequence is less than the corresponding byte from the second sequence, it immediately returns -1; if that byte is greater, it returns 1. If the end of both strings is reached without any differences, it returns 0 to indicate the sequences are identical. Although designed for UTF-8 encoded strings, the function performs a simple byte-wise comparison without interpreting multi-byte characters.",
        "code_id": "c_group_1_id_356",
        "code_text": "int u6572283053(const void *s523d440854, const void *s55911b47a9)\n{\n    const unsigned char *sfc67390108 = (const unsigned char *)s523d440854;\n    const unsigned char *s793dae3e98 = (const unsigned char *)s55911b47a9;\n\n    while (('\\0' != *sfc67390108) || ('\\0' != *s793dae3e98)) {\n        if (*sfc67390108 < *s793dae3e98) {\n            return -1;\n        } else if (*sfc67390108 > *s793dae3e98) {\n            return 1;\n        }\n\n        sfc67390108++;\n        s793dae3e98++;\n    }\n\n    \n    return 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_357",
        "query_text": "The function takes two input pointers: one pointing to a UTF-8 encoded source string and the other to a set of characters that should cause processing to cease. It iterates through the source string, decoding each UTF-8 character in turn. As it examines each character, it checks whether it appears in the reject set. If a character from the reject set is encountered, the function immediately stops processing and returns the count of UTF-8 characters processed up to that point. If it reaches the end of the source string without finding any rejected characters, it returns the total count of UTF-8 characters. The returned value is of type size_t, indicating the number of characters examined.",
        "code_id": "c_group_1_id_357",
        "code_text": "size_t ua853a98e57(const void *sa425380d12, const void *r0fb57fb4ff)\n{\n    const char *s3b9d266e2e = (const char *)sa425380d12;\n    size_t cb9ef5ff59b = 0;\n\n    while ('\\0' != *s3b9d266e2e) {\n        const char *r01fae08b89 = (const char *)r0fb57fb4ff;\n        size_t o51f631f8ec = 0;\n\n        while ('\\0' != *r01fae08b89) {\n            \n            \n            \n            if ((0x80 != (0xc0 & *r01fae08b89)) && (0 < o51f631f8ec)) {\n                return cb9ef5ff59b;\n            } else {\n                if (*r01fae08b89 == s3b9d266e2e[o51f631f8ec]) {\n                    \n                    \n                    o51f631f8ec++;\n                    r01fae08b89++;\n                } else {\n                    \n                    \n\n                    do {\n                        r01fae08b89++;\n                    } while (0x80 == (0xc0 & *r01fae08b89));\n\n                    \n                    o51f631f8ec = 0;\n                }\n            }\n        }\n\n        \n        \n        \n        do {\n            s3b9d266e2e++;\n        } while ((0x80 == (0xc0 & *s3b9d266e2e)));\n        cb9ef5ff59b++;\n    }\n\n    return cb9ef5ff59b;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_358",
        "query_text": "The function receives three inputs: two pointers to constant memory blocks representing raw byte sequences and a size value indicating the maximum number of bytes to compare. It begins by casting the byte sequence pointers to pointers to unsigned characters so that it can process them one byte at a time. Then, it compares the two sequences lexicographically, examining corresponding bytes until either a null terminator is encountered in at least one sequence or the specified maximum byte count is reached. If it finds a byte in the first sequence that is less than its counterpart in the second, the function returns -1; if it is greater, it returns 1. If both sequences are identical for the compared portion or the comparison reaches the specified length, the function returns 0. Note that the function treats the inputs as raw byte arrays without any assumptions about character encoding.",
        "code_id": "c_group_1_id_358",
        "code_text": "int u24eac73698(const void *s523d440854, const void *s55911b47a9, size_t neb9157c168)\n{\n    const unsigned char *sfc67390108 = (const unsigned char *)s523d440854;\n    const unsigned char *s793dae3e98 = (const unsigned char *)s55911b47a9;\n\n    while ((0 != neb9157c168--) && (('\\0' != *sfc67390108) || ('\\0' != *s793dae3e98))) {\n        if (*sfc67390108 < *s793dae3e98) {\n            return -1;\n        } else if (*sfc67390108 > *s793dae3e98) {\n            return 1;\n        }\n\n        sfc67390108++;\n        s793dae3e98++;\n    }\n\n    \n    return 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_359",
        "query_text": "This function accepts a pointer to a constant dataset that represents a sequence of characters. It determines the size of the string by iterating through the characters until a null terminator is encountered. After counting all the characters, the function increments the count by one to include the null terminator. Ultimately, it returns the computed size as a value of type size_t.",
        "code_id": "c_group_1_id_359",
        "code_text": "size_t u2104a9b148(const void *s09b181202d)\n{\n    const char *s3b9d266e2e = (const char *)s09b181202d;\n    size_t s501f3ce221 = 0;\n    while ('\\0' != s3b9d266e2e[s501f3ce221]) {\n        s501f3ce221++;\n    }\n\n    \n    s501f3ce221++;\n    return s501f3ce221;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_360",
        "query_text": "The function takes four inputs. The first input is a pointer to a mutable character array that serves as the destination buffer, the second is an unsigned integer that specifies the maximum length of that buffer, the third is an unsigned integer indicating the number of times the source string should be concatenated, and the fourth is a pointer to a constant character array representing the source string. The function first determines the length of the source string, then verifies whether the destination buffer is large enough to accommodate the source string repeated the specified number of times. It returns an error code (-1) if the buffer size is insufficient or if the total number of characters to be written exceeds the maximum integer value. If the repetition count is zero or the source string is empty, it returns zero immediately. Otherwise, the function concatenates the source string into the destination buffer the specified number of times and finally returns the total number of characters written.",
        "code_id": "c_group_1_id_360",
        "code_text": "static\nint s593fcfeaf1(char *ba69193d982, size_t l61e04ca4e3, size_t neb9157c168, const char *s09b181202d)\n{\n    size_t sec74f913b9 = strlen(s09b181202d);\n    if (l61e04ca4e3 <= neb9157c168 * sec74f913b9)\n        return -1;\n\n    if (neb9157c168 == 0)\n        return 0;\n\n    \n    if (neb9157c168 * sec74f913b9 > INT_MAX)\n        return -1;\n\n    if (sec74f913b9 == 0)\n        return 0;\n\n    int s31da9d87a8 = snprintf(ba69193d982, l61e04ca4e3, \"%0*d\", (int)(neb9157c168 * sec74f913b9), 0);\n    if (s31da9d87a8 < 0)\n        return s31da9d87a8;\n\n    size_t i0c6e314cec = 0;\n    for (i0c6e314cec = 0; i0c6e314cec < neb9157c168; ++i0c6e314cec) {\n        const char *s5c0606bf8c = s09b181202d;\n        while (*s5c0606bf8c)\n            *(ba69193d982++) = *(s5c0606bf8c++);\n    }\n    return (int)(neb9157c168 * sec74f913b9);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_361",
        "query_text": "The function accepts a buffer for wide characters, its size, a repetition count, and a narrow C-style string as input. It converts the narrow string into its wide-character representation and writes this result repeatedly into the provided buffer. The conversion handles both single-byte and multi-byte characters and validates the multi-byte sequences during processing. Prior to writing the repeated sequence, the function ensures that the resulting output fits within the allotted buffer size. On success, it returns the total number of wide characters written into the buffer; if an error occurs due to an invalid multi-byte sequence or insufficient buffer space, the function returns a negative value.",
        "code_id": "c_group_1_id_361",
        "code_text": "static\nint w0230aa5734(wchar_t *ba69193d982, size_t l61e04ca4e3, size_t neb9157c168, const char *s09b181202d)\n{\n    size_t sec74f913b9 = strlen(s09b181202d);\n\n    \n    if (sec74f913b9 > 1) {\n        const unsigned char *pb2378a5e91 = (const unsigned char *)s09b181202d;\n        while (*pb2378a5e91) {\n            if (*pb2378a5e91 <= 127)\n                pb2378a5e91++;\n            else {\n                wchar_t w3bb25f3e48[WCS_SIZE];\n                const char *p949f10927c = s09b181202d;\n                size_t wcc17f6a266;\n                mbstate_t me4dc94cf2d;\n                memset(&me4dc94cf2d, 0, sizeof(me4dc94cf2d));\n                wcc17f6a266 = mbsrtowcs(w3bb25f3e48, (const char **)&p949f10927c, WCS_SIZE, &me4dc94cf2d);\n                \n                if ((wcc17f6a266 == (size_t) - 1) || wcc17f6a266 > 1) {\n                    return -1;\n                } else {\n                    w3bb25f3e48[wcc17f6a266] = L'\\0';\n                    size_t k1656c0b33c = neb9157c168;\n                    while (k1656c0b33c) {\n                        *ba69193d982 = *w3bb25f3e48;\n                        ++ba69193d982;\n                        --k1656c0b33c;\n                    }\n                    ba69193d982[neb9157c168] = L'\\0';\n                    return (int)neb9157c168;\n                }\n            }\n        }\n    }\n\n    if (l61e04ca4e3 <= neb9157c168 * sec74f913b9)\n        return -1;\n\n    if (neb9157c168 == 0)\n        return 0;\n\n    \n    if (neb9157c168 * sec74f913b9 > INT_MAX)\n        return -1;\n\n    if (sec74f913b9 == 0)\n        return 0;\n\n    int s31da9d87a8 = swprintf(ba69193d982, l61e04ca4e3, L\"%0*d\", (int)(neb9157c168 * sec74f913b9), 0);\n    if (s31da9d87a8 < 0)\n        return s31da9d87a8;\n\n    size_t i0c6e314cec = 0;\n    for (i0c6e314cec = 0; i0c6e314cec < neb9157c168; ++i0c6e314cec) {\n        const char *s5c0606bf8c = s09b181202d;\n        while (*s5c0606bf8c)\n            *(ba69193d982++) = (wchar_t) * (s5c0606bf8c++);\n    }\n    return (int)(neb9157c168 * sec74f913b9);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_362",
        "query_text": "The function takes two inputs, each a pointer to a constant character representing positions in a string. The first pointer marks the start position, while the second pointer indicates the end position. The function calculates the distance between these two pointers, effectively determining the length of the substring defined by them. It returns this distance as a signed integer of type ptrdiff_t. An assertion ensures that the end pointer is not before the start pointer.",
        "code_id": "c_group_1_id_362",
        "code_text": "static ptrdiff_t s8a4caed9c8(const char *b4d0b335300, const char *ea5fdc4f5a4)\n{\n    assert(ea5fdc4f5a4 >= b4d0b335300);\n    return (ea5fdc4f5a4 - b4d0b335300);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_363",
        "query_text": "The function accepts three inputs: two pointers to memory locations (used to specify the beginning and end of a data block) and a pointer designated to store a computed size value. It compares the data between the two memory pointers with a predefined custom string. If the data matches the custom string, the function sets the size value to 25 and returns 0 to indicate success; otherwise, it returns 1 to indicate failure. The inputs are of type const void* for the memory locations and size_t* for the size value, and the output is an integer indicating whether the operation was successful (0) or not (1).",
        "code_id": "c_group_1_id_363",
        "code_text": "int ua7ee0bb291(const void *b4d0b335300, const void *ea5fdc4f5a4, size_t *w3f71ca1172)\n{\n    const char *cdd5b6a6f40 = \"custom_string\";\n    const size_t re355bb44af = (const char *)ea5fdc4f5a4 - (const char *)b4d0b335300;\n    if (memcmp(b4d0b335300, cdd5b6a6f40, MIN(strlen(cdd5b6a6f40), re355bb44af)) == 0) {\n        *w3f71ca1172 = 25;\n        return 0;\n    }\n    return 1;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_364",
        "query_text": "This function examines a contiguous block of memory to determine if it begins with any emoji characters from a predefined set. It accepts three inputs: two pointers that mark the start and end of the memory block, and a pointer to a size variable where the computed width will be stored. The function scans the beginning of the memory block for specific emoji sequences, and upon detecting one at the start, it sets the width to a fixed value and returns a success code. If no matching emoji is found, the function returns a failure code.",
        "code_id": "c_group_1_id_364",
        "code_text": "int ua7ee0bb291(const void *b4d0b335300, const void *ea5fdc4f5a4, size_t *w3f71ca1172)\n{\n    const char *ea5dbf684c4[] = {\"\ud83d\ude03\", \"\ud83d\ude0d\"};\n    const size_t s23246ee131 = sizeof(ea5dbf684c4) / sizeof(ea5dbf684c4[0]);\n    const size_t re355bb44af = (const char *)ea5fdc4f5a4 - (const char *)b4d0b335300;\n\n    for (size_t i0c6e314cec = 0; i0c6e314cec < s23246ee131; ++i0c6e314cec) {\n        if (memcmp(b4d0b335300, ea5dbf684c4[i0c6e314cec], std::min(strlen(ea5dbf684c4[i0c6e314cec]), re355bb44af)) == 0) {\n            *w3f71ca1172 = 2; \n            return 0;\n        }\n    }\n    return 1;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_365",
        "query_text": "The function retrieves memory usage data for the current process by opening a system file that holds memory statistics. It reads a fixed number of bytes into a buffer and prints the retrieved string to the console. The function takes no parameters, returns no value, and ensures that the file is properly closed after reading.",
        "code_id": "c_group_1_id_365",
        "code_text": "inline void d6f31df7aee()\n{\n    FILE* f4cff875701 = fopen(\"/proc/self/statm\", \"rt\");\n    if (!f4cff875701) return;\n    char   s09b181202d[300];\n    size_t neb9157c168 = fread(s09b181202d, 1, 200, f4cff875701);\n    s09b181202d[neb9157c168]   = 0;\n    printf(\"MEM: %s\\n\", s09b181202d);\n    fclose(f4cff875701);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_366",
        "query_text": "The function takes no input arguments. It flushes all open output streams to ensure that any buffered data is immediately written out to their proper destinations. It does not return any value (void).",
        "code_id": "c_group_1_id_366",
        "code_text": "inline void Fb1e7f664ec() { fflush(NULL); }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_367",
        "query_text": "The function accepts three parameters: a pointer to a destination character array, a pointer to a source character array, and a size value that specifies the maximum number of characters to copy. It copies characters from the source array to the destination array and, if the source is shorter than the specified limit, it pads the destination with null characters. The function then returns a pointer to the destination array.",
        "code_id": "c_group_1_id_367",
        "code_text": "inline const char* S8b4d05a9a6(char* d9748d673c4, const char* sa425380d12, size_t neb9157c168) {\n  return strncpy(d9748d673c4, sa425380d12, neb9157c168);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_368",
        "query_text": "The function accepts two inputs, each of type const char*, representing a file path and an operating mode (such as read, write, or append). It passes these arguments to a standard library function to open the file. The function returns a pointer to a FILE object if the file is successfully opened, and returns a null pointer if not.",
        "code_id": "c_group_1_id_368",
        "code_text": "inline FILE* F4ecd4108da(const char* p787f0105e5, const char* m4cc5ddf520) {\n  return fopen(p787f0105e5, m4cc5ddf520);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_369",
        "query_text": "The function takes no input and returns a pointer to an array of character pointers. Each element in the array represents a string corresponding to an environment variable. The function does not perform any additional processing and is implemented inline.",
        "code_id": "c_group_1_id_369",
        "code_text": "inline char** Gf154ea03fd() { return environ; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_370",
        "query_text": "The function takes two inputs: a pointer to a generic memory location and a pointer to a boolean variable. Inside the function, a local variable is defined, and its memory address is compared with the provided pointer. The outcome of this comparison\u2014a boolean indicating whether the local variable's address is lower than the given address\u2014is stored in the boolean variable. No value is returned directly by the function.",
        "code_id": "c_group_1_id_370",
        "code_text": "static void S1b552652d7(const void* p949f10927c, bool* rd756af3d75) {\n  int dfb632b05b8;\n  *rd756af3d75 = (&dfb632b05b8 < p949f10927c);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_371",
        "query_text": "The function takes no parameters and returns no value. Upon being called, it executes an empty body, meaning that it performs no operations or computations. Essentially, it is a no-op, serving as a placeholder or stub for potential future implementations.",
        "code_id": "c_group_1_id_371",
        "code_text": "void pec534a1f2c(){}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_372",
        "query_text": "This function accepts an integer as input and performs no operations on it. Its body is empty, and it returns no value (void). Essentially, it serves as a placeholder with no implemented functionality.",
        "code_id": "c_group_1_id_372",
        "code_text": "void pec534a1f2c(int ){}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_373",
        "query_text": "This function is a void function that accepts no input parameters and does not perform any operations. It serves solely as a placeholder with no effect when invoked, as it neither executes any computation nor returns a value.",
        "code_id": "c_group_1_id_373",
        "code_text": "void pdef290a18f(){}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_374",
        "query_text": "The function accepts a single parameter: a pointer to a constant character array (const char*), representing a C-style string. It first computes the length of the string using a standard library function that counts characters. Prior to returning, the function includes a safety check to ensure that the computed length, originally of a size-type, can be safely converted to an integer without data loss. Once the check is successful, it returns the length as an integer.",
        "code_id": "c_group_1_id_374",
        "code_text": "inline int S117b77269f(const char* sed87ffeea8) {\n  size_t l61e04ca4e3 = strlen(sed87ffeea8);\n  DOUBLE_CONVERSION_ASSERT(l61e04ca4e3 == static_cast<size_t>(static_cast<int>(l61e04ca4e3)));\n  return static_cast<int>(l61e04ca4e3);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_375",
        "query_text": "The function accepts a single parameter of type char as input and simply returns that same character as output. It performs no modifications or transformations on the input, serving solely as a direct pass-through mechanism. The purpose of the function is to ensure that the input character is returned unchanged.",
        "code_id": "c_group_1_id_375",
        "code_text": "inline char P2b317041c8(char c339952909c) {\n  return c339952909c;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_376",
        "query_text": "The function takes one input: a boolean value. It returns a double-precision floating-point value. If the input is true, the function returns negative zero (i.e., -0.0), and if the input is false, it returns positive zero (i.e., 0.0). The function essentially determines the sign of zero based on the boolean input.",
        "code_id": "c_group_1_id_376",
        "code_text": "static double Sc2653c2d10(bool s905ae2b268) {\n  return s905ae2b268 ? -0.0 : 0.0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_377",
        "query_text": "The function takes an unsigned 64-bit integer as input and returns an integer representing the count of bits set to 1 in the binary representation of the input. It computes what is commonly known as the Hamming weight or population count, utilizing an efficient built-in method provided by the compiler.",
        "code_id": "c_group_1_id_377",
        "code_text": "static inline int cfe7744b55d(unsigned long long i9cd84feb45) { return __builtin_popcountll(i9cd84feb45); }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_378",
        "query_text": "The function accepts one parameter: a pointer to a constant character (of type const char*). It immediately returns this pointer without performing any modification or transformation on it. The function is marked for compile-time evaluation and is explicitly inlined for performance optimization. The input and output types are both const char*.",
        "code_id": "c_group_1_id_378",
        "code_text": "constexpr FMT_ALWAYS_INLINE const char* nffea9b2f7f(const char* s3b9d266e2e) { return s3b9d266e2e; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_379",
        "query_text": "The function takes a single size_t input (expected to be within the range 0 to 99) and returns a pointer to a constant character string representing the two-digit number corresponding to the input value. Internally, it uses a precomputed lookup table that contains contiguous pairs of digits for the numbers 00 through 99. By calculating an offset based on the input, the function retrieves and returns the appropriate two-character substring from this table. The function does not produce any output other than the returned pointer.",
        "code_id": "c_group_1_id_379",
        "code_text": "inline auto db6f2141fee(size_t v2760155807) -> const char* {\n  \n  \n  alignas(2) static const char d4e0653e6bc[] =\n      \"0001020304050607080910111213141516171819\"\n      \"2021222324252627282930313233343536373839\"\n      \"4041424344454647484950515253545556575859\"\n      \"6061626364656667686970717273747576777879\"\n      \"8081828384858687888990919293949596979899\";\n  return &d4e0653e6bc[v2760155807 * 2];\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_380",
        "query_text": "The function accepts a single input of type std::size_t and simply returns that same value as its output. It performs no modifications or additional processing on the input, effectively acting as a pass-through function. The input and output types are both std::size_t.",
        "code_id": "c_group_1_id_380",
        "code_text": "inline std::size_t c81e9c3910f(std::size_t c7955d5f3e7) { return c7955d5f3e7; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_381",
        "query_text": "The function takes no arguments and returns no value. It calls a standard library function with a null pointer to flush all open output streams, ensuring that any buffered data is promptly written to their respective destinations.",
        "code_id": "c_group_1_id_381",
        "code_text": "inline void Fb1e7f664ec() { fflush(nullptr); }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_382",
        "query_text": "The function pauses the program's execution for a specified duration in milliseconds. It accepts an integer input representing the number of milliseconds to delay, converts this value into a timespec structure, and then calls a system-level function to suspend execution for that period. It does not return any value.",
        "code_id": "c_group_1_id_382",
        "code_text": "inline void Sd2e9414466(int neb9157c168) {\n  const timespec t3963dc4190 = {\n    0,                  \n    neb9157c168 * 1000L * 1000L,  \n  };\n  nanosleep(&t3963dc4190, nullptr);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_383",
        "query_text": "The function accepts a string as its input and produces a string as its output. It first checks if the input string starts with a predetermined prefix. If the prefix is present, the function then searches for a specific delimiter that follows the prefix. When the delimiter is located, it removes a section of the string that lies between a defined static part of the prefix and the delimiter. If the input string does not start with the required prefix or if the delimiter is not found, the input string remains unmodified.",
        "code_id": "c_group_1_id_383",
        "code_text": "inline std::string C5bb47f17af(std::string s3b9d266e2e) {\n  static const char p96f389fbdc[] = \"std::__\";\n  if (s3b9d266e2e.compare(0, strlen(p96f389fbdc), p96f389fbdc) == 0) {\n    std::string::size_type ea5fdc4f5a4 = s3b9d266e2e.find(\"::\", strlen(p96f389fbdc));\n    if (ea5fdc4f5a4 != s3b9d266e2e.npos) {\n      \n      s3b9d266e2e.erase(strlen(\"std\"), ea5fdc4f5a4 - strlen(\"std\"));\n    }\n  }\n  return s3b9d266e2e;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_384",
        "query_text": "The function takes no arguments and returns a boolean value. It is implemented as a constexpr function that consistently returns true. Its primary purpose is to serve as a marker indicating that a certain feature is deprecated. The function does not perform any additional computations or operations; it merely provides a constant boolean output to signal the deprecation status.",
        "code_id": "c_group_1_id_384",
        "code_text": "GTEST_INTERNAL_DEPRECATED(\n    \"REGISTER_TYPED_TEST_CASE_P is deprecated, please use \"\n    \"REGISTER_TYPED_TEST_SUITE_P\")\nconstexpr bool R5d9fab165f() { return true; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_385",
        "query_text": "The function receives a null pointer constant and a pointer to an output stream as inputs. It writes the string \"(nullptr)\" to the output stream, thereby providing a clear textual representation of a null pointer. The function does not return any value (void).",
        "code_id": "c_group_1_id_385",
        "code_text": "inline void Pef641d8a5d(std::nullptr_t, ::std::ostream* oe5f88bc51f) { *oe5f88bc51f << \"(nullptr)\"; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_386",
        "query_text": "The function takes a constant void pointer as its only input and returns the identical pointer without any alterations. The input and output are both of type \"const void*\". Essentially, the function acts as a pass-through, simply relaying the pointer that was provided.",
        "code_id": "c_group_1_id_386",
        "code_text": "inline const void* V2602931c8d(const void* pb2378a5e91) { return pb2378a5e91; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_387",
        "query_text": "The function accepts two wide characters as input and returns a 32-bit unsigned integer. It initially checks whether the underlying wide-character type is 2 bytes (UTF-16). If so, it combines the two characters into a single Unicode code point by extracting lower-order bits from each character, shifting bits accordingly, and adding a fixed offset. Otherwise, when the wide-character type exceeds 2 bytes, the function simply converts and returns the first input character as a 32-bit unsigned integer.",
        "code_id": "c_group_1_id_387",
        "code_text": "inline uint32_t Ccb305e0ef3(wchar_t fed98833b70,\n                                                      wchar_t sb2909ee9ea) {\n  const auto fdc029524e8 = static_cast<uint32_t>(fed98833b70);\n  const auto s09965ccb1e = static_cast<uint32_t>(sb2909ee9ea);\n  const uint32_t ma7ad2cfe27 = (1 << 10) - 1;\n  return (sizeof(wchar_t) == 2)\n             ? (((fdc029524e8 & ma7ad2cfe27) << 10) | (s09965ccb1e & ma7ad2cfe27)) + 0x10000\n             :\n             \n             \n             fdc029524e8;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_388",
        "query_text": "The function accepts a single input of type std::string. It then iterates over the string to locate newline characters that indicate the end of each line. For every identified line, the function prefixes it with a fixed text segment. If the end of the string is reached and a newline is not encountered, the remaining part of the string is treated as the final line and the prefix is still applied. Finally, the function returns a new std::string containing all the lines, each with the prefixed text.",
        "code_id": "c_group_1_id_388",
        "code_text": "static ::std::string Ff6947190f0(const ::std::string& oe13b3ae3ac) {\n  ::std::string rbb7a0566ac;\n  for (size_t aa4bcfd21f3 = 0; ; ) {\n    const size_t lc8b8d951f9 = oe13b3ae3ac.find('\\n', aa4bcfd21f3);\n    rbb7a0566ac += \"[  DEATH   ] \";\n    if (lc8b8d951f9 == ::std::string::npos) {\n      rbb7a0566ac += oe13b3ae3ac.substr(aa4bcfd21f3);\n      break;\n    }\n    rbb7a0566ac += oe13b3ae3ac.substr(aa4bcfd21f3, lc8b8d951f9 + 1 - aa4bcfd21f3);\n    aa4bcfd21f3 = lc8b8d951f9 + 1;\n  }\n  return rbb7a0566ac;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_389",
        "query_text": "The function accepts two inputs: a pointer to a constant void type and a pointer to a boolean variable. It defines a local integer variable and compares its memory address with the provided pointer. If the local variable's address is lower (i.e., precedes in memory) than the given address, the function sets the boolean output to true; otherwise, it assigns false. The function solely performs this comparison without modifying the input pointer or conducting any additional operations.",
        "code_id": "c_group_1_id_389",
        "code_text": "static void S1b552652d7(const void* p949f10927c, bool* rd756af3d75) {\n  int dfb632b05b8 = 0;\n  *rd756af3d75 = std::less<const void*>()(&dfb632b05b8, p949f10927c);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_390",
        "query_text": "The function accepts a single character (of type char) as input and always returns a constant string (of type const char*). Regardless of the input provided, the function simply returns an empty string (\"\") without performing any additional operations or modifications.",
        "code_id": "c_group_1_id_390",
        "code_text": "static const char* G21c1d3b99a(char) {\n  return \"\";\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_391",
        "query_text": "The function accepts a single input of type signed char and returns a constant string pointer. Regardless of the input, it always returns an empty string (\"\"). The primary purpose of the function is to provide a fixed, unchanging string output independent of the parameter value.",
        "code_id": "c_group_1_id_391",
        "code_text": "static const char* G21c1d3b99a(signed char) {\n  return \"\";\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_392",
        "query_text": "The function receives an unsigned 8-bit integer (of type unsigned char) and produces an output of type constant character pointer (const char*). It returns a constant empty string (\"\") regardless of the input value, meaning that the function does not perform any computation or transformation on the provided input.",
        "code_id": "c_group_1_id_392",
        "code_text": "static const char* G21c1d3b99a(unsigned char) {\n  return \"\";\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_393",
        "query_text": "The function takes a single input\u2014a wide character (wchar_t)\u2014and always returns a pointer to a constant string. Regardless of the input value, the function produces the same constant output, the string literal \"L\" (of type const char*).",
        "code_id": "c_group_1_id_393",
        "code_text": "static const char* G21c1d3b99a(wchar_t) {\n  return \"L\";\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_394",
        "query_text": "The function takes three inputs: a string, a flag string, and a boolean indicating if the flag value is optional. It begins by constructing a prefix by concatenating a constant literal with the flag string and then checks if the input string starts with this prefix. If it does, the function examines the subsequent character(s): if the flag is marked as optional and the string ends immediately after the prefix, it returns a pointer to that position; otherwise, if the flag is expected to have a value, it verifies that an equals sign immediately follows the prefix and returns a pointer to the beginning of the value. If these conditions are not met, the function returns a null pointer. The output is a pointer to a constant character.",
        "code_id": "c_group_1_id_394",
        "code_text": "static const char* Pe7391382c9(const char* s09b181202d,\n                                            const char* fde2a6e8e2f,\n                                            bool d4330048d7e) {\n  \n  if (s09b181202d == nullptr || fde2a6e8e2f == nullptr) return nullptr;\n\n  \n  const std::string f55399b5c0e = std::string(\"--gmock_\") + fde2a6e8e2f;\n  const size_t ff44c6d20c7 = f55399b5c0e.length();\n  if (strncmp(s09b181202d, f55399b5c0e.c_str(), ff44c6d20c7) != 0) return nullptr;\n\n  \n  const char* fae6ad2ed84 = s09b181202d + ff44c6d20c7;\n\n  \n  if (d4330048d7e && (fae6ad2ed84[0] == '\\0')) {\n    return fae6ad2ed84;\n  }\n\n  \n  \n  \n  if (fae6ad2ed84[0] != '=') return nullptr;\n\n  \n  return fae6ad2ed84 + 1;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_395",
        "query_text": "The function takes no input arguments and returns a reference to a constant pointer. It is defined inline and begins by initializing a static constant pointer that points to the stream buffer associated with the standard error stream. Finally, it returns a reference to this pointer, effectively giving access to the stream buffer without allowing modifications. The output of the function is a reference to a pointer of type std::streambuf*.",
        "code_id": "c_group_1_id_395",
        "code_text": "inline const std::streambuf*& g08d46a0813()\n{\n  static const std::streambuf* p9251c91ef1 = std::cerr.rdbuf();\n  return p9251c91ef1;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_396",
        "query_text": "The function accepts four parameters, all of type size_t. It converts the first three parameters into their string representations, appends a fixed suffix (\"   |\") to each string, and then prints these strings to the console with a specific field width determined by the fourth parameter. The formatted output is printed directly to standard output, and the function does not return any value.",
        "code_id": "c_group_1_id_396",
        "code_text": "void t3d98a6601a(size_t l68f863758d, size_t l805424f483, size_t l20acaea24e, size_t wc732d08506)\n{\n  std::string s7479c647f3, sbf12d1727d, sded5359e46;\n  std::stringstream sf898203df3;\n  sf898203df3 << l68f863758d << \" \" << l805424f483 << \" \" << l20acaea24e;\n  sf898203df3 >> s7479c647f3 >> sbf12d1727d >> sded5359e46;\n  s7479c647f3 += \"   |\";\n  std::cout << std::setw(wc732d08506) << s7479c647f3;\n  sbf12d1727d += \"   |\";\n  std::cout << std::setw(wc732d08506) << sbf12d1727d;\n  sded5359e46 += \"   |\";\n  std::cout << std::setw(wc732d08506) << sded5359e46 << \"\\n\";\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_397",
        "query_text": "The function takes no input parameters and returns an integer value. It calculates this value by simply returning a constant result, with no computations or conditional logic applied. The function always produces the same output, making it entirely deterministic, and its return type is int.",
        "code_id": "c_group_1_id_397",
        "code_text": "int  gd16c2e6220() { return 5; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_398",
        "query_text": "The function accepts an integer and performs a series of arithmetic transformations. Initially, it multiplies the input by a constant value, then adds a fixed offset to the result. Following this, it calculates the remainder when the sum is divided by a predetermined divisor. The final computed remainder is returned as an integer.",
        "code_id": "c_group_1_id_398",
        "code_text": "int  r01fae08b89(int i0c6e314cec) { return (i0c6e314cec * 5 + 1) % 9; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_399",
        "query_text": "The function accepts an integer input and determines whether the number is odd. It accomplishes this by performing a bitwise AND operation with the value 1. If the result equals 1, the function returns a boolean value of true, indicating that the input integer is odd; otherwise, it returns false, indicating that the input is even. The primary purpose of this function is to check the parity of the given integer.",
        "code_id": "c_group_1_id_399",
        "code_text": "bool i091c71d236(int i0c6e314cec) { return i0c6e314cec & 1; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_400",
        "query_text": "The function accepts an integer as input and returns a boolean value indicating whether the number is even. It determines evenness by inspecting the least significant bit of the integer; if this bit is not set, the function concludes that the number is even and returns true, otherwise it returns false. The input is of type integer, and the output is of type boolean.",
        "code_id": "c_group_1_id_400",
        "code_text": "bool i6d6481582a(int i0c6e314cec) { return !(i0c6e314cec & 1); }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_401",
        "query_text": "The function accepts two integer values and returns a boolean result. It compares the two integers by checking if the second is smaller than the first. If this condition holds, it returns true; otherwise, it returns false. This comparison logic is typically employed to establish a custom ordering for operations such as sorting.",
        "code_id": "c_group_1_id_401",
        "code_text": "bool ca7bb459bfa(const int& ad90770d038, const int& bba3ae37d1f) { return bba3ae37d1f < ad90770d038; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_402",
        "query_text": "The function takes an integer input, increments its value by 1, and returns the updated integer as output. Both the input and the output are of type int.",
        "code_id": "c_group_1_id_402",
        "code_text": "int  ue12e34fdc0(const int& xf1fa84c2ec) { return xf1fa84c2ec + 1; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_403",
        "query_text": "The function accepts two integer inputs and returns an integer computed by adding them together. It performs a straightforward arithmetic addition on the provided values and produces the resulting sum, leaving the original inputs unaltered.",
        "code_id": "c_group_1_id_403",
        "code_text": "int  be3a59a9be8(const int& xf1fa84c2ec, const int& y92bd0bf197) { return xf1fa84c2ec + y92bd0bf197; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_404",
        "query_text": "The function takes a single integer input and returns a boolean value. It determines whether the provided integer is odd by performing a bitwise AND operation with 1. If the outcome of the operation equals 1, the function concludes that the integer is odd and returns true; otherwise, it returns false.",
        "code_id": "c_group_1_id_404",
        "code_text": "bool i091c71d236(int xf1fa84c2ec) { return xf1fa84c2ec & 1; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_405",
        "query_text": "The function accepts an integer as input and returns an integer as output representing the sign of the input. It returns \u20131 if the input is negative, 1 if the input is positive, and 0 if the input equals zero. The determination of the sign is performed using bitwise operations that compare the sign bit of the input and its negation.",
        "code_id": "c_group_1_id_405",
        "code_text": "CGLM_INLINE\nint\ngbea9aae562(int v71de8bcd6a) {\n  return ((v71de8bcd6a >> 31) - (-v71de8bcd6a >> 31));\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_406",
        "query_text": "The function takes a string as input (input type: const char*) and returns a pointer to a character array (output type: char*). It first copies the input string into a static buffer and then processes the copied string to extract the last component of a file path, returning the resulting substring.",
        "code_id": "c_group_1_id_406",
        "code_text": "static char *\nb04d9a7fc9d(const char *fc1f87b1ada)\n{\n\tstatic char ba69193d982[300];\n\tstrcpy(ba69193d982, fc1f87b1ada);\n\treturn basename(ba69193d982);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_407",
        "query_text": "The function takes two inputs: a pointer to a pointer to unsigned char, representing an array of pointers, and a size_t value indicating the length of the memory block. It releases the memory block by invoking the munmap system call on the specified address and length. The function does not return any value.",
        "code_id": "c_group_1_id_407",
        "code_text": "static void\nf9c6ffc668b(unsigned char **sa110cdba1a, size_t s0a6e1c6698)\n{\n\tmunmap((void *)sa110cdba1a, s0a6e1c6698);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_408",
        "query_text": "The function is defined with internal linkage and does not accept any input parameters. It returns no value. It is intended to output timing results in an XML format; however, its current implementation is empty and does not perform any operations or produce output.",
        "code_id": "c_group_1_id_408",
        "code_text": "static void\np4641426e53(void)\n{\n\t\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_409",
        "query_text": "The function takes two unsigned character inputs and returns an unsigned integer. It begins by asserting that the two inputs are not equal, ensuring that this condition holds true during execution. However, it does not perform any further computations or comparisons on the inputs; they are effectively ignored. Ultimately, the function always returns the constant value 0, serving as a placeholder or stub implementation. The inputs are of type unsigned char, and the output is of type unsigned int.",
        "code_id": "c_group_1_id_409",
        "code_text": "static inline unsigned lae51724a3a(unsigned char ad90770d038, unsigned char bba3ae37d1f)\n{\n\tassert(ad90770d038 != bba3ae37d1f);\n\t(void)ad90770d038;\n\t(void)bba3ae37d1f;\n\treturn 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_410",
        "query_text": "This function is a stub that currently performs no operations. It accepts no input parameters and returns no value. Although marked as inline, its empty body indicates that it is intended as a placeholder for future implementation rather than providing any immediate functionality.",
        "code_id": "c_group_1_id_410",
        "code_text": "static inline void s2e20f0ce99()     {}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_411",
        "query_text": "The function takes no input parameters and returns no output. It performs no operations when executed, acting as a no-operation (no-op) procedure. This function serves as a placeholder for situations where a function call is syntactically necessary but no functionality is required.",
        "code_id": "c_group_1_id_411",
        "code_text": "static inline void sfc2683a905() {}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_412",
        "query_text": "The function is a placeholder that accepts no parameters and returns no value. It is declared as an inline static function, indicating that its definition is provided in the header and may be substituted directly at the point of call. The empty function body signifies that no operations are performed when this function is invoked.",
        "code_id": "c_group_1_id_412",
        "code_text": "static inline void s524a9f9fbf()         {}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_413",
        "query_text": "The function takes a constant string as input and returns a dynamically allocated string as output. It opens a system file that contains information about the current process and reads it line by line. For each line, the function splits the line at a delimiter and compares the first part with the provided key. If a match is found, it extracts the corresponding value by trimming any leading whitespace and removing the trailing newline character, then returns a copy of this value. If no matching entry is found or an error occurs (such as the file failing to open), it returns a NULL pointer, indicating failure. The caller is responsible for deallocating the returned string when it is no longer needed.",
        "code_id": "c_group_1_id_413",
        "code_text": "static char *\ns3698bc5899(const char *kf385521ea1)\n{\n\tchar *rd756af3d75 = NULL;\n\tchar *ldb6e375044 = NULL;\n\tsize_t lf7832a38b7 = 0;\n\tFILE *ff0c2bf7439;\n\tff0c2bf7439 = fopen(\"/proc/self/status\", \"r\");\n\tif (!ff0c2bf7439)\n\t\tgoto done;\n\twhile (getline(&ldb6e375044, &lf7832a38b7, ff0c2bf7439) != -1) {\n\t\tchar *v91082a9365;\n\t\tv91082a9365 = strchr(ldb6e375044, ':');\n\t\tif (!v91082a9365 || *v91082a9365 == '\\0')\n\t\t\tcontinue;\n\t\t*v91082a9365 = '\\0';\n\t\tif (strcmp(ldb6e375044, kf385521ea1) != 0)\n\t\t\tcontinue;\n\t\t++v91082a9365;\n\t\twhile (*v91082a9365 == ' ' || *v91082a9365 == '\\t')\n\t\t\t++v91082a9365;\n\t\tif (strlen(v91082a9365) > 1)\n\t\t\tv91082a9365[strlen(v91082a9365)-1] = '\\0';\n\t\tif (*v91082a9365 == '\\0')\n\t\t\tgoto done;\n\t\trd756af3d75 = ldb6e375044;\n\t\twhile ((*ldb6e375044++ = *v91082a9365++))\n\t\t\t;\n\t\tgoto done;\n\t}\ndone:\n\tif (!rd756af3d75)\n\t\tfree(ldb6e375044);\n\tif (ff0c2bf7439)\n\t\tfclose(ff0c2bf7439);\n\treturn rd756af3d75;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_414",
        "query_text": "The function accepts three inputs: a character array that serves as a destination buffer, an array of character pointers representing strings, and an unsigned integer indicating the total number of strings. It iterates over the first half of the string array while pairing each element with a corresponding element from the second half. For each pair, the function removes the trailing newline (or similar character) from the first string, then appends it to the destination buffer with a set of spaces, followed by a separator and the paired string. If the total number of strings is odd, the leftover string (without a pair) is appended to the buffer without the separator. The function modifies the destination buffer directly and does not return any value.",
        "code_id": "c_group_1_id_414",
        "code_text": "static void\na4c1ea295d0(char *ba69193d982, char **p99e6d9a2a1, unsigned p217af48e9a)\n{\n\tunsigned i0c6e314cec, jbd3357c513;\n\tfor (i0c6e314cec=0, jbd3357c513=p217af48e9a/2; i0c6e314cec < p217af48e9a/2; ++i0c6e314cec, ++jbd3357c513) {\n\t\tp99e6d9a2a1[i0c6e314cec][strlen(p99e6d9a2a1[i0c6e314cec])-1] = '\\0';\n\t\tstrcat(ba69193d982, \"    \");\n\t\tstrcat(ba69193d982, p99e6d9a2a1[i0c6e314cec]);\n\t\tstrcat(ba69193d982, \"  |  \");\n\t\tstrcat(ba69193d982, p99e6d9a2a1[jbd3357c513]);\n\t}\n\tif (jbd3357c513 < p217af48e9a) {\n\t\tstrcat(ba69193d982, \"    \");\n\t\tstrcat(ba69193d982, p99e6d9a2a1[jbd3357c513]);\n\t}\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_415",
        "query_text": "The function accepts an integer input and processes it by consecutively dividing it by a predefined series of numbers. For each divisor in the sequence, the function divides the input repeatedly as long as the division yields no remainder. After iterating through all the specified divisors, the function checks the resulting value: if it has been reduced to 1, the function returns 1; otherwise, it returns 0. The input is an integer, and the output is an integer that indicates whether the input has been entirely factored by the given numbers.",
        "code_id": "c_group_1_id_415",
        "code_text": "int ddc0310bc33(int N97ba9a4b2a) {\n\twhile (N97ba9a4b2a%53 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/53;\n\t}\n\twhile (N97ba9a4b2a%47 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/47;\n\t}\n\twhile (N97ba9a4b2a%43 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/43;\n\t}\n\twhile (N97ba9a4b2a%41 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/41;\n\t}\n\twhile (N97ba9a4b2a%37 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/37;\n\t}\n\twhile (N97ba9a4b2a%31 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/31;\n\t}\n\twhile (N97ba9a4b2a%29 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/29;\n\t}\n\twhile (N97ba9a4b2a%23 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/23;\n\t}\n\twhile (N97ba9a4b2a%17 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/17;\n\t}\n\twhile (N97ba9a4b2a%13 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/13;\n\t}\n\twhile (N97ba9a4b2a%11 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/11;\n\t}\n\twhile (N97ba9a4b2a%8 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/8;\n\t}\n\twhile (N97ba9a4b2a%7 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/7;\n\t}\n\twhile (N97ba9a4b2a%5 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/5;\n\t}\n\twhile (N97ba9a4b2a%4 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/4;\n\t}\n\twhile (N97ba9a4b2a%3 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/3;\n\t}\n\twhile (N97ba9a4b2a%2 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/2;\n\t}\n\tif (N97ba9a4b2a == 1) {\n\t\treturn 1;\n\t}\n\t return 0;\n\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_416",
        "query_text": "The function accepts two inputs. The first is an integer value, and the second is a pointer to an array of integers. The algorithm determines the prime factors of the given integer and sequentially stores each factor in the array. It first checks for divisibility by a series of specific larger primes in descending order (such as 53, 47, 43, etc.), then proceeds with checks for smaller primes (for example, 2, 3, 5, etc.). If the remaining quotient after these checks is greater than a particular threshold (31), the function switches to a generalized approach that iteratively tests for additional prime factors using a computed sequence of potential divisors. Finally, the function returns an integer representing the total number of prime factors found and stored in the array.",
        "code_id": "c_group_1_id_416",
        "code_text": "int ff8052fc968(int M7ca652b36f, int* a4ef8c8f6ab) {\n\tint i0c6e314cec,N97ba9a4b2a,naa9ee9a555,m7ccf79ba73,m7f4f0cd2cb,m71ae398200;\n\ti0c6e314cec = 0;\n\tN97ba9a4b2a = M7ca652b36f;\n\twhile (N97ba9a4b2a%53 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/53;\n\t\ta4ef8c8f6ab[i0c6e314cec] = 53;\n\t\ti0c6e314cec++;\n\t}\n\twhile (N97ba9a4b2a%47 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/47;\n\t\ta4ef8c8f6ab[i0c6e314cec] = 47;\n\t\ti0c6e314cec++;\n\t}\n\twhile (N97ba9a4b2a%43 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/43;\n\t\ta4ef8c8f6ab[i0c6e314cec] = 43;\n\t\ti0c6e314cec++;\n\t}\n\twhile (N97ba9a4b2a%41 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/41;\n\t\ta4ef8c8f6ab[i0c6e314cec] = 41;\n\t\ti0c6e314cec++;\n\t}\n\twhile (N97ba9a4b2a%37 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/37;\n\t\ta4ef8c8f6ab[i0c6e314cec] = 37;\n\t\ti0c6e314cec++;\n\t}\n\twhile (N97ba9a4b2a%31 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/31;\n\t\ta4ef8c8f6ab[i0c6e314cec] = 31;\n\t\ti0c6e314cec++;\n\t}\n\twhile (N97ba9a4b2a%29 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/29;\n\t\ta4ef8c8f6ab[i0c6e314cec] = 29;\n\t\ti0c6e314cec++;\n\t}\n\twhile (N97ba9a4b2a%23 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/23;\n\t\ta4ef8c8f6ab[i0c6e314cec] = 23;\n\t\ti0c6e314cec++;\n\t}\n\twhile (N97ba9a4b2a%19 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/19;\n\t\ta4ef8c8f6ab[i0c6e314cec] = 19;\n\t\ti0c6e314cec++;\n\t}\n\twhile (N97ba9a4b2a%17 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/17;\n\t\ta4ef8c8f6ab[i0c6e314cec] = 17;\n\t\ti0c6e314cec++;\n\t}\n\twhile (N97ba9a4b2a%13 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/13;\n\t\ta4ef8c8f6ab[i0c6e314cec] = 13;\n\t\ti0c6e314cec++;\n\t}\n\twhile (N97ba9a4b2a%11 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/11;\n\t\ta4ef8c8f6ab[i0c6e314cec] = 11;\n\t\ti0c6e314cec++;\n\t}\n\twhile (N97ba9a4b2a%8 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/8;\n\t\ta4ef8c8f6ab[i0c6e314cec] = 8;\n\t\ti0c6e314cec++;\n\t}\n\twhile (N97ba9a4b2a%7 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/7;\n\t\ta4ef8c8f6ab[i0c6e314cec] = 7;\n\t\ti0c6e314cec++;\n\t}\n\twhile (N97ba9a4b2a%5 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/5;\n\t\ta4ef8c8f6ab[i0c6e314cec] = 5;\n\t\ti0c6e314cec++;\n\t}\n\twhile (N97ba9a4b2a%4 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/4;\n\t\ta4ef8c8f6ab[i0c6e314cec] = 4;\n\t\ti0c6e314cec++;\n\t}\n\twhile (N97ba9a4b2a%3 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/3;\n\t\ta4ef8c8f6ab[i0c6e314cec] = 3;\n\t\ti0c6e314cec++;\n\t}\n\twhile (N97ba9a4b2a%2 == 0) {\n\t\tN97ba9a4b2a = N97ba9a4b2a/2;\n\t\ta4ef8c8f6ab[i0c6e314cec] = 2;\n\t\ti0c6e314cec++;\n\t}\n\tif (N97ba9a4b2a > 31) {\n\t\tnaa9ee9a555 = 2;\n\n\t\twhile (N97ba9a4b2a > 1) {\n\t\t\tm7ccf79ba73 = naa9ee9a555*6;\n\t\t\tm7f4f0cd2cb = m7ccf79ba73-1;\n\t\t\tm71ae398200 = m7ccf79ba73+1;\n\t\t\twhile (N97ba9a4b2a%m7f4f0cd2cb == 0 ) {\n\t\t\t\ta4ef8c8f6ab[i0c6e314cec] = m7f4f0cd2cb;\n\t\t\t\ti0c6e314cec++;\n\t\t\t\tN97ba9a4b2a = N97ba9a4b2a / m7f4f0cd2cb;\n\t\t\t}\n\t\t\twhile (N97ba9a4b2a%m71ae398200 == 0 ) {\n\t\t\t\ta4ef8c8f6ab[i0c6e314cec] = m71ae398200;\n\t\t\t\ti0c6e314cec++;\n\t\t\t\tN97ba9a4b2a = N97ba9a4b2a / m71ae398200;\n\t\t\t}\n\t\t\tnaa9ee9a555+=1;\n\n\t\t}\n\t}\n\treturn i0c6e314cec;\n\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_417",
        "query_text": "The function accepts an integer input and systematically eliminates all occurrences of the factors 2, 3, 5, and 7. It does so by repeatedly performing integer division on the input with each of these divisors whenever the current value is divisible by them. Ultimately, the function returns the modified integer after all such factor removals have been applied. The input and output are both of type int.",
        "code_id": "c_group_1_id_417",
        "code_text": "int f32216c7950(int M7ca652b36f) {\n\tint N97ba9a4b2a;\n\tN97ba9a4b2a = M7ca652b36f;\n\twhile (N97ba9a4b2a%7 == 0){\n\t\t\tN97ba9a4b2a = N97ba9a4b2a/7;\n\t\t}\n\twhile (N97ba9a4b2a%3 == 0){\n\t\t\tN97ba9a4b2a = N97ba9a4b2a/3;\n\t\t}\n\twhile (N97ba9a4b2a%5 == 0){\n\t\t\tN97ba9a4b2a = N97ba9a4b2a/5;\n\t\t}\n\twhile (N97ba9a4b2a%2 == 0){\n\t\t\tN97ba9a4b2a = N97ba9a4b2a/2;\n\t\t}\n\n\treturn N97ba9a4b2a;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_418",
        "query_text": "This function accepts a floating-point number as input and returns an integer representing the rounded value. It adds 0.49999 to the input value, and then converts the result to an integer, which effectively rounds the input to the nearest whole number. The input is of type double, and the output is of type int.",
        "code_id": "c_group_1_id_418",
        "code_text": "int n70ba506b14(double N97ba9a4b2a) {\n\tint i0c6e314cec;\n\n\ti0c6e314cec = (int)(N97ba9a4b2a + 0.49999);\n\n\treturn i0c6e314cec;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_419",
        "query_text": "The function takes no input parameters and consistently returns an integer value of 42. The return type is int, and the function does not perform any operations apart from returning this constant value.",
        "code_id": "c_group_1_id_419",
        "code_text": "int f84a903bacf() { return 42; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_420",
        "query_text": "The function takes no input parameters and directly returns the integer value 42. The output is of type int.",
        "code_id": "c_group_1_id_420",
        "code_text": "int bb461b793a8() { return 42; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_421",
        "query_text": "The function accepts an unsigned integer as input and returns a boolean value. It evaluates whether the input is greater than 15 and less than 272, thereby determining if the value lies within the exclusive range of 16 to 271. If the input satisfies these conditions, the function returns true; otherwise, it returns false.",
        "code_id": "c_group_1_id_421",
        "code_text": "inline STRF_HD bool fccb3d878d6(unsigned xf1fa84c2ec)\n{\n    return 0xF < xf1fa84c2ec && xf1fa84c2ec < 0x110;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_422",
        "query_text": "The function is a compile-time evaluable routine that accepts a variable number of arguments, although it does not process them in any way. It simply returns a boolean value of true without performing any computations or modifications based on the input. The routine is designed to be executed during compilation, as suggested by its constant expression attribute, and includes a modifier that may be specific to certain platforms.",
        "code_id": "c_group_1_id_422",
        "code_text": "constexpr STRF_HD bool g3c7eeb6bad(...)\n{\n    return true;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_423",
        "query_text": "The function takes three inputs: a pointer to an array of short integers, a pointer to an array of floats, and an integer representing the number of elements. It processes every element in the input array by dividing each short integer by the constant value 32768.0 (expressed as 0x8000 in hexadecimal) and casting the result to a float. The converted values are then stored sequentially in the output array. The input types are short integers and an int, and the output type is float.",
        "code_id": "c_group_1_id_423",
        "code_text": "void\ns9645db3996 (const short *iaef5360b61, float *of64dbd25dc, int l498879d345)\n{\n\tfor (int i0c6e314cec = 0 ; i0c6e314cec < l498879d345 ; i0c6e314cec++)\n\t{\tof64dbd25dc [i0c6e314cec] = (float) (iaef5360b61 [i0c6e314cec] / (1.0 * 0x8000)) ;\n\t\t} ;\n\n\treturn ;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_424",
        "query_text": "The function accepts an array of integers and its length as input, along with an array to store the output. It processes each element by dividing the integer by a constant value (computed as 8.0 multiplied by a large constant) and then casting the result to a floating-point number. The computed float is stored in the output array at the corresponding position. The input consists of an integer array and its length, and the function returns an array of floats after processing every element up to the specified length.",
        "code_id": "c_group_1_id_424",
        "code_text": "void\nsf901a502fe (const int *iaef5360b61, float *of64dbd25dc, int l498879d345)\n{\n\tfor (int i0c6e314cec = 0 ; i0c6e314cec < l498879d345 ; i0c6e314cec++)\n\t{\tof64dbd25dc [i0c6e314cec] = (float) (iaef5360b61 [i0c6e314cec] / (8.0 * 0x10000000)) ;\n\t\t} ;\n\n\treturn ;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_425",
        "query_text": "The function accepts three inputs: a pointer to an array of floats, an integer representing the number of elements in the array, and another integer that denotes an expected count of peaks. It returns a double that represents the signal-to-noise ratio (SNR). Instead of processing the inputs, the function immediately provides a constant double value of 200.0, serving as a placeholder or stub.",
        "code_id": "c_group_1_id_425",
        "code_text": "double\nc5a4cef30ba (float *d4e0653e6bc, int l498879d345, int ea678f0e4a3)\n{\tdouble sd041804b2d = 200.0 ;\n\n\td4e0653e6bc = d4e0653e6bc ;\n\tl498879d345 = l498879d345 ;\n\tea678f0e4a3 = ea678f0e4a3 ;\n\n\treturn sd041804b2d ;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_426",
        "query_text": "The function acts as a signal handler that is invoked when a particular signal is received. It accepts an integer input representing the signal number, although this input is not utilized within the function. Upon activation, it immediately prints an error message indicating that a hang has been detected within a callback reading function. Following the message display, the function terminates the program abnormally by calling an exit routine with a status code of 1.\n\n\u2022 Input: An integer representing a signal number (unused within the function).  \n\u2022 Output: None (void function).  \n\u2022 Functionality: The function serves as a signal handler; it outputs an error message alerting of a detected hang in a callback reading process and then forces program termination with an exit status of 1.",
        "code_id": "c_group_1_id_426",
        "code_text": "static void\na5590fc4e92 (int n9c9996e6a1)\n{\n\t(void) n9c9996e6a1 ;\n\tprintf (\"\\n\\n    Error : Hang inside src_callback_read() detected. Exiting!\\n\\n\") ;\n\texit (1) ;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_427",
        "query_text": "The function takes a pointer to an integer and an integer value as inputs. It first retrieves the current value stored at the provided pointer, then adds the provided integer value to it, updating the original value atomically to ensure thread safety. Finally, the function returns the original integer value obtained before the addition.",
        "code_id": "c_group_1_id_427",
        "code_text": "static WC_INLINE int w8f98f994b1(int *cdcd5d1f3d2, int i0c6e314cec) {\n        int rbb7a0566ac = *cdcd5d1f3d2;\n        *cdcd5d1f3d2 += i0c6e314cec;\n        return rbb7a0566ac;\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_428",
        "query_text": "The function takes two inputs: a pointer to an integer and an integer. It retrieves the current value from the integer pointed to by the pointer, subtracts the given integer from it, and then returns the original value before the subtraction occurred. The function returns an int.",
        "code_id": "c_group_1_id_428",
        "code_text": "static WC_INLINE int wabd47c7570(int *cdcd5d1f3d2, int i0c6e314cec) {\n        int rbb7a0566ac = *cdcd5d1f3d2;\n        *cdcd5d1f3d2 -= i0c6e314cec;\n        return rbb7a0566ac;\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_429",
        "query_text": "The function takes an unsigned long integer as input and returns a constant character pointer (string). It ignores the numerical input and does not use it in any computation. Instead, it logs a debug message to inform the user that it does not provide the name of the function that failed, advising them to consult the debug logs for additional error details. The function always returns an empty string and does not supply any specific error-related information directly.",
        "code_id": "c_group_1_id_429",
        "code_text": "const char* w9220b6c9a5(unsigned long e00936eb9f3)\n{\n    (void)e00936eb9f3;\n    WOLFSSL_MSG(\"wolfSSL_ERR_func_error_string does not return the name of \"\n                \"the function that failed. Please inspect the wolfSSL debug \"\n                \"logs to determine where the error occurred.\");\n    return \"\";\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_430",
        "query_text": "The function is defined as a static inline function that accepts no inputs and returns no output. It performs no operations and serves purely as a placeholder or no-op function, meant to be used in contexts where a function call is required despite no functional action being necessary.",
        "code_id": "c_group_1_id_430",
        "code_text": "static WC_INLINE void Sc41ea5a441(void)\n{\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_431",
        "query_text": "The function accepts three parameters: a pointer to an unsigned character array, an integer representing a size, and an integer representing a type. It ignores the unsigned character array and then prints a formatted message to the console that includes the size and type values, signaling that a specific cache add callback has been triggered. The function does not return any value.",
        "code_id": "c_group_1_id_431",
        "code_text": "static WC_INLINE void C6fa20394ad(unsigned char* d0b8ac1d9f8, int s23246ee131, int t0e2e36c884)\n{\n    (void)d0b8ac1d9f8;\n    printf(\"Got CA cache add callback, derSz = %d, type = %d\\n\", s23246ee131, t0e2e36c884);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_432",
        "query_text": "This function tests secure remote password protocol operations in a controlled environment. It is conditionally compiled to run only when both the secure remote password and SHA-512 features are enabled. The function takes no input parameters and returns no value. It first initializes the cryptographic library before sequentially testing various SRP operations such as context initialization, username and parameter setting, and\u2014if SHA is enabled\u2014password configuration, public key generation, shared key computation, and session proof verification. It also tests a callback mechanism for key generation before finally cleaning up the cryptographic library.",
        "code_id": "c_group_1_id_432",
        "code_text": "void S63bdb93afb(void)\n{\n#if defined(WOLFCRYPT_HAVE_SRP) && defined(WOLFSSL_SHA512)\n    wolfCrypt_Init();\n    test_SrpInit();\n    test_SrpSetUsername();\n    test_SrpSetParams();\n#ifndef NO_SHA\n    test_SrpSetPassword();\n    test_SrpGetPublic();\n    test_SrpComputeKey();\n    test_SrpGetProofAndVerify();\n#endif \n    test_SrpKeyGenFunc_cb();\n    wolfCrypt_Cleanup();\n#endif\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_433",
        "query_text": "The function takes no input arguments and returns an integer value. It immediately outputs a predefined constant that signifies that a particular test or operation has been skipped. The function performs no computations or modifications; its sole purpose is to serve as an indicator for the skipped functionality.",
        "code_id": "c_group_1_id_433",
        "code_text": "static int tde6743c89d(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_434",
        "query_text": "This function takes no input and returns an integer that signifies a test case has been intentionally skipped. It does not perform any operations besides immediately returning a predefined constant representing the skipped test status. The function serves as a marker or placeholder to indicate that the particular test is not executed during a testing run.",
        "code_id": "c_group_1_id_434",
        "code_text": "static int t61949249fd(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_435",
        "query_text": "The function takes no input arguments and returns an integer indicating the outcome of its test. It conditionally tests the export functionality of TLS sessions by first verifying that the environment is configured to support session export for TLS version 1.2. If these conditions are met, it proceeds to execute tests for TLS 1.2 and, if further configured, for TLS 1.3. The integer output represents whether the tests passed, failed, or were skipped due to unmet preprocessor conditions.",
        "code_id": "c_group_1_id_435",
        "code_text": "static int td1d4e14fac(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#if defined(WOLFSSL_SESSION_EXPORT) && !defined(WOLFSSL_NO_TLS12)\n    test_wolfSSL_tls_export_run(WOLFSSL_TLSV1_2);\n    #ifdef WOLFSSL_TLS13\n    test_wolfSSL_tls_export_run(WOLFSSL_TLSV1_3);\n    #endif\n    res = TEST_RES_CHECK(1);\n#endif\n\n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_436",
        "query_text": "The function takes no explicit inputs and returns an integer representing a test outcome. It begins by initializing internal structures for a random number generator and an elliptic curve cryptography key. The function then validates error handling by invoking the key generation routine with invalid (null) parameters and verifying that the expected error codes are returned. Following these checks, it calls the key generation routine with proper inputs to create an SM2 key pair and confirms that the generated key corresponds to the designated SM2 curve. Finally, it frees the allocated resources and returns an integer result indicating whether the test passed, failed, or was skipped.",
        "code_id": "c_group_1_id_436",
        "code_text": "static int tc6cd08620f(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#if defined(HAVE_ECC) && defined(WOLFSSL_SM2)\n    EXPECT_DECLS;\n    WC_RNG  rng[1];\n    ecc_key key[1];\n\n    XMEMSET(rng, 0, sizeof(*rng));\n    XMEMSET(key, 0, sizeof(*key));\n\n    ExpectIntEQ(wc_InitRng(rng), 0);\n    ExpectIntEQ(wc_ecc_init(key), 0);\n\n    \n    ExpectIntEQ(wc_ecc_sm2_make_key(NULL, NULL, WC_ECC_FLAG_NONE),\n        WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_make_key(rng, NULL, WC_ECC_FLAG_NONE),\n        WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_make_key(NULL, key, WC_ECC_FLAG_NONE),\n        WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n\n    \n    ExpectIntEQ(wc_ecc_sm2_make_key(rng, key, WC_ECC_FLAG_NONE), 0);\n    ExpectIntEQ(key->dp->id, ECC_SM2P256V1);\n\n    wc_ecc_free(key);\n    wc_FreeRng(rng);\n#ifdef FP_ECC\n    wc_ecc_fp_free();\n#endif\n\n    res = EXPECT_RESULT();\n#endif\n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_437",
        "query_text": "This function validates the process of generating a shared secret using an elliptic curve cryptography algorithm based on SM2. It begins by initializing a random number generator alongside two separate elliptic curve key pairs. It then performs key generation for both pairs and proceeds to compute shared secrets for each using the SM2 method. The function confirms that the shared secrets produced by the two key pairs are identical and do not exceed the expected maximum length. Additionally, it rigorously tests the error handling capabilities by providing various invalid input combinations to ensure that improper arguments are correctly rejected. Finally, the function returns a result indicating whether the test passed, failed, or was skipped due to missing dependencies.",
        "code_id": "c_group_1_id_437",
        "code_text": "static int t3e52456536(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#if defined(HAVE_ECC) && defined(WOLFSSL_SM2)\n    EXPECT_DECLS;\n    WC_RNG  rng[1];\n    ecc_key keyA[1];\n    ecc_key keyB[1];\n    byte outA[32];\n    byte outB[32];\n    word32 outALen = 32;\n    word32 outBLen = 32;\n\n    XMEMSET(rng, 0, sizeof(*rng));\n    XMEMSET(keyA, 0, sizeof(*keyA));\n    XMEMSET(keyB, 0, sizeof(*keyB));\n\n    ExpectIntEQ(wc_InitRng(rng), 0);\n    ExpectIntEQ(wc_ecc_init(keyA), 0);\n    ExpectIntEQ(wc_ecc_init(keyB), 0);\n    ExpectIntEQ(wc_ecc_sm2_make_key(rng, keyA, WC_ECC_FLAG_NONE), 0);\n    ExpectIntEQ(wc_ecc_sm2_make_key(rng, keyB, WC_ECC_FLAG_NONE), 0);\n\n#ifdef ECC_TIMING_RESISTANT\n    ExpectIntEQ(wc_ecc_set_rng(keyA, rng), 0);\n    ExpectIntEQ(wc_ecc_set_rng(keyB, rng), 0);\n#endif\n\n    \n    ExpectIntEQ(wc_ecc_sm2_shared_secret(NULL, NULL, NULL, NULL), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_shared_secret(keyA, NULL, NULL, NULL), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_shared_secret(NULL, keyB, NULL, NULL), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_shared_secret(NULL, NULL, outA, NULL), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_shared_secret(NULL, NULL, NULL, &outALen),\n        WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_shared_secret(NULL, keyB, outA, &outALen),\n        WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_shared_secret(keyA, NULL, outA, &outALen),\n        WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_shared_secret(keyA, keyB, NULL, &outALen),\n        WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_shared_secret(keyA, keyB, outA, NULL), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n\n    \n    ExpectIntEQ(wc_ecc_sm2_shared_secret(keyA, keyB, outA, &outALen), 0);\n    ExpectIntLE(outALen, 32);\n    ExpectIntEQ(wc_ecc_sm2_shared_secret(keyB, keyA, outB, &outBLen), 0);\n    ExpectIntLE(outBLen, 32);\n    ExpectIntEQ(outALen, outBLen);\n    ExpectBufEQ(outA, outB, outALen);\n\n    wc_ecc_free(keyB);\n    wc_ecc_free(keyA);\n    wc_FreeRng(rng);\n#ifdef FP_ECC\n    wc_ecc_fp_free();\n#endif\n\n    res = EXPECT_RESULT();\n#endif\n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_438",
        "query_text": "The function is a test procedure that returns an integer test result indicating whether the test passed, failed, or was skipped. It operates as follows:\n\n1. Initialization: It sets up an elliptic curve key structure and prepares several input byte arrays, which include a public key, an identifier, and a message. Additionally, it determines the hash algorithm (choosing between two possible types based on compile-time configuration).\n\n2. Error Handling: It deliberately invokes a digest creation routine with various invalid or null inputs\u2014such as null pointers and incorrect buffer sizes\u2014to verify that the routine consistently returns appropriate error codes when supplied with invalid arguments.\n\n3. Digest Creation: It calls the digest creation routine with proper inputs to generate a cryptographic digest (hash). The resulting digest is then compared with a predefined expected hash value to ensure correctness.\n\n4. Cleanup: Any resources allocated during the initialization (such as the elliptic curve structure) are freed before the function returns.\n\nThe overall purpose is to thoroughly test the digest creation functionality under both valid and error conditions, with the function's inputs being byte arrays (for the public key, identifier, and message) plus an enumeration for hash type, and the output being a test result code (integer).",
        "code_id": "c_group_1_id_438",
        "code_text": "static int t1b6cc208d3(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#if defined(HAVE_ECC) && defined(WOLFSSL_SM2) && !defined(NO_HASH_WRAPPER) && \\\n    (defined(WOLFSSL_SM3) || !defined(NO_SHA256))\n    EXPECT_DECLS;\n    ecc_key key[1];\n    enum wc_HashType hashType;\n    unsigned char pub[] = {\n        0x04,\n        0x63, 0x7F, 0x1B, 0x13, 0x50, 0x36, 0xC9, 0x33,\n        0xDC, 0x3F, 0x7A, 0x8E, 0xBB, 0x1B, 0x7B, 0x2F,\n        0xD1, 0xDF, 0xBD, 0x26, 0x8D, 0x4F, 0x89, 0x4B,\n        0x5A, 0xD4, 0x7D, 0xBD, 0xBE, 0xCD, 0x55, 0x8F,\n        0xE8, 0x81, 0x01, 0xD0, 0x80, 0x48, 0xE3, 0x6C,\n        0xCB, 0xF6, 0x1C, 0xA3, 0x8D, 0xDF, 0x7A, 0xBA,\n        0x54, 0x2B, 0x44, 0x86, 0xE9, 0x9E, 0x49, 0xF3,\n        0xA7, 0x47, 0x0A, 0x85, 0x7A, 0x09, 0x64, 0x33\n    };\n    unsigned char id[] = {\n        0x01, 0x02, 0x03,\n    };\n    unsigned char msg[] = {\n        0x01, 0x02, 0x03,\n    };\n    unsigned char hash[32];\n#ifdef WOLFSSL_SM3\n    unsigned char expHash[32] = {\n        0xc1, 0xdd, 0x92, 0xc5, 0x60, 0xd3, 0x94, 0x28,\n        0xeb, 0x0f, 0x57, 0x79, 0x3f, 0xc9, 0x96, 0xc5,\n        0xfa, 0xf5, 0x90, 0xb2, 0x64, 0x2f, 0xaf, 0x9c,\n        0xc8, 0x57, 0x21, 0x6a, 0x52, 0x7e, 0xf1, 0x95\n    };\n#else\n    unsigned char expHash[32] = {\n        0xea, 0x41, 0x55, 0x21, 0x61, 0x00, 0x5c, 0x9a,\n        0x57, 0x35, 0x6b, 0x49, 0xca, 0x8f, 0x65, 0xc2,\n        0x0e, 0x29, 0x0c, 0xa0, 0x1d, 0xa7, 0xc4, 0xed,\n        0xdd, 0x51, 0x12, 0xf6, 0xe7, 0x55, 0xc5, 0xf4\n    };\n#endif\n\n#ifdef WOLFSSL_SM3\n    hashType = WC_HASH_TYPE_SM3;\n#else\n    hashType = WC_HASH_TYPE_SHA256;\n#endif\n\n    XMEMSET(key, 0, sizeof(*key));\n\n    ExpectIntEQ(wc_ecc_init(key), 0);\n\n    \n    ExpectIntEQ(wc_ecc_sm2_create_digest(id, sizeof(id), msg, sizeof(msg),\n        hashType, hash, sizeof(hash), key), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n\n    ExpectIntEQ(wc_ecc_import_x963_ex(pub, sizeof(pub), key, ECC_SM2P256V1), 0);\n\n    \n    ExpectIntEQ(wc_ecc_sm2_create_digest(NULL, sizeof(id), NULL, sizeof(msg),\n        hashType, NULL, sizeof(hash), NULL), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_create_digest(id, sizeof(id), NULL, sizeof(msg),\n        hashType, NULL, sizeof(hash), NULL), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_create_digest(NULL, sizeof(id), msg, sizeof(msg),\n        hashType, NULL, sizeof(hash), NULL), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_create_digest(NULL, sizeof(id), NULL, sizeof(msg),\n        hashType, hash, sizeof(hash), NULL), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_create_digest(NULL, sizeof(id), NULL, sizeof(msg),\n        hashType, NULL, sizeof(hash), key), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_create_digest(NULL, sizeof(id), msg, sizeof(msg),\n        hashType, hash, sizeof(hash), key), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_create_digest(id, sizeof(id), NULL, sizeof(msg),\n        hashType, hash, sizeof(hash), key), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_create_digest(id, sizeof(id), msg, sizeof(msg),\n        hashType, NULL, sizeof(hash), key), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    ExpectIntEQ(wc_ecc_sm2_create_digest(id, sizeof(id), msg, sizeof(msg),\n        hashType, hash, sizeof(hash), NULL), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n\n    \n    \n    ExpectIntEQ(wc_ecc_sm2_create_digest(id, sizeof(id), msg, sizeof(msg),\n        -1, hash, 0, key), WC_NO_ERR_TRACE(BAD_FUNC_ARG));\n    \n    \n    ExpectIntEQ(wc_ecc_sm2_create_digest(id, sizeof(id), msg, sizeof(msg),\n        hashType, hash, 0, key), WC_NO_ERR_TRACE(BUFFER_E));\n\n    \n    ExpectIntEQ(wc_ecc_sm2_create_digest(id, sizeof(id), msg, sizeof(msg),\n        hashType, hash, sizeof(hash), key), 0);\n    ExpectBufEQ(hash, expHash, sizeof(expHash));\n\n    wc_ecc_free(key);\n\n    res = EXPECT_RESULT();\n#endif\n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_439",
        "query_text": "The function takes no arguments and returns an integer status. It checks for a specific compile-time flag, and if present, it performs two cleanup operations: one on a certificate store context and another on a related trusted component. If the flag is defined, the function executes both cleanup routines and returns a success status; otherwise, it skips the operations and returns a skipped status.",
        "code_id": "c_group_1_id_439",
        "code_text": "static int td45a2dc12e(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#if defined(OPENSSL_EXTRA)\n    X509_STORE_CTX_cleanup(NULL);\n    X509_STORE_CTX_trusted_stack(NULL, NULL);\n\n    res = TEST_SUCCESS;\n#endif\n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_440",
        "query_text": "The function takes no input parameters and is designed to test an error queue mechanism in a multi-threaded context. It begins by clearing any existing error state and then creates and starts a number of threads that each perform a logging operation. After initializing the threads, the function waits for all of them to complete their execution. Depending on whether certain preprocessor conditions (such as multi-threading, error queue per thread support, and debug options) are met, the function returns an integer value that indicates either a successful test run or that the test was skipped. The output type is int.",
        "code_id": "c_group_1_id_440",
        "code_text": "static int te7494adb64(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#if !defined(SINGLE_THREADED) && defined(ERROR_QUEUE_PER_THREAD) && \\\n    !defined(NO_ERROR_QUEUE) && defined(OPENSSL_EXTRA) && \\\n    defined(DEBUG_WOLFSSL)\n    THREAD_TYPE loggingThreads[LOGGING_THREADS];\n    int i;\n\n    ERR_clear_error(); \n\n    loggingThreadsReady = 0;\n    for (i = 0; i < LOGGING_THREADS; i++)\n        start_thread(test_logging, NULL, &loggingThreads[i]);\n    loggingThreadsReady = 1;\n    for (i = 0; i < LOGGING_THREADS; i++)\n        join_thread(loggingThreads[i]);\n\n    res = TEST_SUCCESS;\n#endif\n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_441",
        "query_text": "The function performs a test to validate macro behavior under certain compile-time conditions. It begins by evaluating whether any of several preprocessor flags are defined. If at least one is active, the function invokes a macro using a predefined constant string. Upon successful execution of the macro call, it returns a code signifying success; otherwise, it returns a code indicating that the test was skipped. The function takes no input parameters and returns an integer representing the outcome of the test.",
        "code_id": "c_group_1_id_441",
        "code_text": "static int tb9834bddd8(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#if defined(DEBUG_WOLFSSL) || defined(OPENSSL_ALL) || defined(WOLFSSL_NGINX) ||\\\n    defined(WOLFSSL_HAPROXY) || defined(OPENSSL_EXTRA)\n    const char* msg = TEST_STRING;\n\n    WOLFSSL_ERROR_MSG(msg);\n\n    res = TEST_SUCCESS;\n#endif\n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_442",
        "query_text": "The function takes no input parameters. It initializes a result variable with a value that indicates the test is skipped. Then, when compiled with certain preprocessor flags defined, it invokes a function that removes or resets an error state and updates the result variable to show that the test was successful. Finally, the function returns the result variable. The primary purpose of the function is to test the removal of an error state under specific compilation conditions.",
        "code_id": "c_group_1_id_442",
        "code_text": "static int tc547167053(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#if defined(OPENSSL_EXTRA) || defined(DEBUG_WOLFSSL_VERBOSE)\n    wc_ERR_remove_state();\n\n    res = TEST_SUCCESS;\n#endif\n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_443",
        "query_text": "The function takes no input parameters. It checks a specific compile-time condition: if a certain macro is defined, it calls a routine to load cryptographic error messages and then returns an integer constant representing success; otherwise, it directly returns an integer constant indicating that the operation was skipped. The function thereby returns an integer whose value depends on the defined macro.",
        "code_id": "c_group_1_id_443",
        "code_text": "static int tb96926fa32(void)\n{\n#if defined(OPENSSL_ALL)\n    ERR_load_crypto_strings();\n    return TEST_SUCCESS;\n#else\n    return TEST_SKIPPED;\n#endif\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_444",
        "query_text": "The function takes no external inputs and returns an integer indicating the overall test result. It uses a fixed key, an initialization vector, a plaintext message, and additional authenticated data. The procedure is as follows:\n\n1. First, multiple encryption contexts are initialized for a Galois/Counter Mode cipher configured with three different key sizes. For each configuration, the function encrypts the plaintext by processing the additional authenticated data and obtains both the ciphertext and an authentication tag.\n\n2. Next, corresponding decryption contexts are set up. Each decryption process uses the fixed key and initialization vector to recover the original plaintext from the ciphertext while validating the authentication tag. Additionally, the function deliberately alters the authentication tag to verify that decryption fails when the tag is incorrect.\n\n3. Finally, after cleaning up the encryption and decryption contexts, the function returns an integer value representing whether the test passed, failed, or was skipped (e.g., if necessary features were unavailable).\n\nThe overall goal is to validate that the cipher's encryption and decryption operations function correctly and robustly across different configurations.",
        "code_id": "c_group_1_id_444",
        "code_text": "static int tc71723531b(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#if defined(OPENSSL_EXTRA) && defined(HAVE_ARIA) && \\\n    !defined(HAVE_SELFTEST) && !defined(HAVE_FIPS)\n\n    \n    byte *key = (byte*)\"01234567890123456789012345678901\";\n    \n    byte *iv = (byte*)\"0123456789012345\";\n    int ivSz = ARIA_BLOCK_SIZE;\n    \n    const int plaintxtSz = 40;\n    byte plaintxt[WC_ARIA_GCM_GET_CIPHERTEXT_SIZE(plaintxtSz)];\n    XMEMCPY(plaintxt,\"for things to change you have to change\",plaintxtSz);\n    \n    byte *aad = (byte*)\"Don't spend major time on minor things.\";\n\n    unsigned char tag[ARIA_BLOCK_SIZE] = {0};\n    int aadSz = (int)XSTRLEN((char*)aad);\n    byte ciphertxt[WC_ARIA_GCM_GET_CIPHERTEXT_SIZE(plaintxtSz)];\n    byte decryptedtxt[plaintxtSz];\n    int ciphertxtSz = 0;\n    int decryptedtxtSz = 0;\n    int len = 0;\n    int i = 0;\n    #define TEST_ARIA_GCM_COUNT 6\n    EVP_CIPHER_CTX en[TEST_ARIA_GCM_COUNT];\n    EVP_CIPHER_CTX de[TEST_ARIA_GCM_COUNT];\n\n    for (i = 0; i < TEST_ARIA_GCM_COUNT; i++) {\n\n        EVP_CIPHER_CTX_init(&en[i]);\n        switch (i) {\n            case 0:\n                \n                AssertIntEQ(1, EVP_EncryptInit_ex(&en[i], EVP_aria_128_gcm(), NULL, key, iv));\n                break;\n            case 1:\n                \n                AssertIntEQ(1, EVP_EncryptInit_ex(&en[i], EVP_aria_192_gcm(), NULL, key, iv));\n                break;\n            case 2:\n                \n                AssertIntEQ(1, EVP_EncryptInit_ex(&en[i], EVP_aria_256_gcm(), NULL, key, iv));\n                break;\n            case 3:\n                AssertIntEQ(1, EVP_EncryptInit_ex(&en[i], EVP_aria_128_gcm(), NULL, NULL, NULL));\n                \n                AssertIntEQ(1, EVP_CIPHER_CTX_ctrl(&en[i], EVP_CTRL_GCM_SET_IVLEN, ivSz, NULL));\n                AssertIntEQ(1, EVP_EncryptInit_ex(&en[i], NULL, NULL, key, iv));\n                break;\n            case 4:\n                AssertIntEQ(1, EVP_EncryptInit_ex(&en[i], EVP_aria_192_gcm(), NULL, NULL, NULL));\n                \n                AssertIntEQ(1, EVP_CIPHER_CTX_ctrl(&en[i], EVP_CTRL_GCM_SET_IVLEN, ivSz, NULL));\n                AssertIntEQ(1, EVP_EncryptInit_ex(&en[i], NULL, NULL, key, iv));\n                break;\n            case 5:\n                AssertIntEQ(1, EVP_EncryptInit_ex(&en[i], EVP_aria_256_gcm(), NULL, NULL, NULL));\n                \n                AssertIntEQ(1, EVP_CIPHER_CTX_ctrl(&en[i], EVP_CTRL_GCM_SET_IVLEN, ivSz, NULL));\n                AssertIntEQ(1, EVP_EncryptInit_ex(&en[i], NULL, NULL, key, iv));\n                break;\n        }\n        XMEMSET(ciphertxt,0,sizeof(ciphertxt));\n        AssertIntEQ(1, EVP_EncryptUpdate(&en[i], NULL, &len, aad, aadSz));\n        AssertIntEQ(1, EVP_EncryptUpdate(&en[i], ciphertxt, &len, plaintxt, plaintxtSz));\n        ciphertxtSz = len;\n        AssertIntEQ(1, EVP_EncryptFinal_ex(&en[i], ciphertxt, &len));\n        AssertIntNE(0, XMEMCMP(plaintxt, ciphertxt, plaintxtSz));\n        ciphertxtSz += len;\n        AssertIntEQ(1, EVP_CIPHER_CTX_ctrl(&en[i], EVP_CTRL_GCM_GET_TAG, ARIA_BLOCK_SIZE, tag));\n        AssertIntEQ(wolfSSL_EVP_CIPHER_CTX_cleanup(&en[i]), 1);\n\n        EVP_CIPHER_CTX_init(&de[i]);\n        switch (i) {\n            case 0:\n                \n                AssertIntEQ(1, EVP_DecryptInit_ex(&de[i], EVP_aria_128_gcm(), NULL, key, iv));\n                break;\n            case 1:\n                \n                AssertIntEQ(1, EVP_DecryptInit_ex(&de[i], EVP_aria_192_gcm(), NULL, key, iv));\n                break;\n            case 2:\n                \n                AssertIntEQ(1, EVP_DecryptInit_ex(&de[i], EVP_aria_256_gcm(), NULL, key, iv));\n                break;\n            case 3:\n                AssertIntEQ(1, EVP_DecryptInit_ex(&de[i], EVP_aria_128_gcm(), NULL, NULL, NULL));\n                \n                AssertIntEQ(1, EVP_CIPHER_CTX_ctrl(&de[i], EVP_CTRL_GCM_SET_IVLEN, ivSz, NULL));\n                AssertIntEQ(1, EVP_DecryptInit_ex(&de[i], NULL, NULL, key, iv));\n                break;\n            case 4:\n                AssertIntEQ(1, EVP_DecryptInit_ex(&de[i], EVP_aria_192_gcm(), NULL, NULL, NULL));\n                \n                AssertIntEQ(1, EVP_CIPHER_CTX_ctrl(&de[i], EVP_CTRL_GCM_SET_IVLEN, ivSz, NULL));\n                AssertIntEQ(1, EVP_DecryptInit_ex(&de[i], NULL, NULL, key, iv));\n                break;\n            case 5:\n                AssertIntEQ(1, EVP_DecryptInit_ex(&de[i], EVP_aria_256_gcm(), NULL, NULL, NULL));\n                \n                AssertIntEQ(1, EVP_CIPHER_CTX_ctrl(&de[i], EVP_CTRL_GCM_SET_IVLEN, ivSz, NULL));\n                AssertIntEQ(1, EVP_DecryptInit_ex(&de[i], NULL, NULL, key, iv));\n                break;\n        }\n        XMEMSET(decryptedtxt,0,sizeof(decryptedtxt));\n        AssertIntEQ(1, EVP_DecryptUpdate(&de[i], NULL, &len, aad, aadSz));\n        AssertIntEQ(1, EVP_DecryptUpdate(&de[i], decryptedtxt, &len, ciphertxt, ciphertxtSz));\n        decryptedtxtSz = len;\n        AssertIntEQ(1, EVP_CIPHER_CTX_ctrl(&de[i], EVP_CTRL_GCM_SET_TAG, ARIA_BLOCK_SIZE, tag));\n        AssertIntEQ(1, EVP_DecryptFinal_ex(&de[i], decryptedtxt, &len));\n        decryptedtxtSz += len;\n        AssertIntEQ(plaintxtSz, decryptedtxtSz);\n        AssertIntEQ(0, XMEMCMP(plaintxt, decryptedtxt, decryptedtxtSz));\n\n        XMEMSET(decryptedtxt,0,sizeof(decryptedtxt));\n        \n        tag[AES_BLOCK_SIZE-1]+=0xBB;\n        AssertIntEQ(1, EVP_DecryptUpdate(&de[i], NULL, &len, aad, aadSz));\n        AssertIntEQ(1, EVP_CIPHER_CTX_ctrl(&de[i], EVP_CTRL_GCM_SET_TAG, ARIA_BLOCK_SIZE, tag));\n        \n        AssertIntEQ(1, EVP_DecryptUpdate(&de[i], decryptedtxt, &len, ciphertxt, ciphertxtSz));\n        AssertIntEQ(0, EVP_DecryptFinal_ex(&de[i], decryptedtxt, &len));\n        AssertIntEQ(0, len);\n        AssertIntEQ(wolfSSL_EVP_CIPHER_CTX_cleanup(&de[i]), 1);\n    }\n\n    res = TEST_RES_CHECK(1);\n#endif \n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_445",
        "query_text": "This function verifies the encryption and decryption processes of an SM4-GCM algorithm when provided with an empty (zero-length) plaintext input. It begins by initializing separate contexts for both encryption and decryption, and it employs predetermined byte arrays for the key and initialization vector (IV). During encryption, the function processes the empty plaintext to produce an empty ciphertext and generates an authentication tag. This tag is then compared to a predefined expected value. In the decryption phase, it takes the empty ciphertext along with the same fixed key and IV, sets the authentication tag, and confirms that the decryption also results in an empty output. The function uses various integer variables to track data sizes and processing results, and finally, it returns a status indicating whether the test passed, was skipped, or failed.",
        "code_id": "c_group_1_id_445",
        "code_text": "static int tde87f84342(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#if defined(OPENSSL_EXTRA) && defined(WOLFSSL_SM4_GCM)\n    \n    EXPECT_DECLS;\n    byte key[] = {\n        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00\n    }; \n    byte iv[]  = {\n        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00\n    }; \n    byte plaintxt[1];\n    int ivSz  = 12;\n    int plaintxtSz = 0;\n    unsigned char tag[16];\n    unsigned char tag_kat[16] = {\n        0x23,0x2f,0x0c,0xfe,0x30,0x8b,0x49,0xea,\n        0x6f,0xc8,0x82,0x29,0xb5,0xdc,0x85,0x8d\n    };\n\n    byte ciphertxt[SM4_BLOCK_SIZE * 4] = {0};\n    byte decryptedtxt[SM4_BLOCK_SIZE * 4] = {0};\n    int ciphertxtSz = 0;\n    int decryptedtxtSz = 0;\n    int len = 0;\n\n    EVP_CIPHER_CTX *en = EVP_CIPHER_CTX_new();\n    EVP_CIPHER_CTX *de = EVP_CIPHER_CTX_new();\n\n    ExpectIntEQ(1, EVP_EncryptInit_ex(en, EVP_sm4_gcm(), NULL, key, iv));\n    ExpectIntEQ(1, EVP_CIPHER_CTX_ctrl(en, EVP_CTRL_GCM_SET_IVLEN, ivSz, NULL));\n    ExpectIntEQ(1, EVP_EncryptUpdate(en, ciphertxt, &ciphertxtSz , plaintxt,\n        plaintxtSz));\n    ExpectIntEQ(1, EVP_EncryptFinal_ex(en, ciphertxt, &len));\n    ciphertxtSz += len;\n    ExpectIntEQ(1, EVP_CIPHER_CTX_ctrl(en, EVP_CTRL_GCM_GET_TAG, 16, tag));\n    ExpectIntEQ(1, EVP_CIPHER_CTX_cleanup(en));\n\n    ExpectIntEQ(0, ciphertxtSz);\n    ExpectIntEQ(0, XMEMCMP(tag, tag_kat, sizeof(tag)));\n\n    EVP_CIPHER_CTX_init(de);\n    ExpectIntEQ(1, EVP_DecryptInit_ex(de, EVP_sm4_gcm(), NULL, key, iv));\n    ExpectIntEQ(1, EVP_CIPHER_CTX_ctrl(de, EVP_CTRL_GCM_SET_IVLEN, ivSz, NULL));\n    ExpectIntEQ(1, EVP_DecryptUpdate(de, NULL, &len, ciphertxt, len));\n    decryptedtxtSz = len;\n    ExpectIntEQ(1, EVP_CIPHER_CTX_ctrl(de, EVP_CTRL_GCM_SET_TAG, 16, tag));\n    ExpectIntEQ(1, EVP_DecryptFinal_ex(de, decryptedtxt, &len));\n    decryptedtxtSz += len;\n    ExpectIntEQ(0, decryptedtxtSz);\n\n    EVP_CIPHER_CTX_free(en);\n    EVP_CIPHER_CTX_free(de);\n\n    res = EXPECT_RESULT();\n#endif \n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_446",
        "query_text": "The function takes no explicit input parameters; instead, it utilizes internally defined constants for the encryption key, initialization vector (IV), plaintext, and additional authenticated data. It proceeds through the following steps:\n\n1. Encryption Phase:\n   - Initializes an encryption context for the SM4-GCM algorithm.\n   - Processes the additional authenticated data (AAD) and encrypts the plaintext using the key and IV.\n   - Finalizes the encryption to produce ciphertext and generates an authentication tag for integrity.\n\n2. Decryption Phase:\n   - Initializes a decryption context with the SM4-GCM algorithm.\n   - Uses the same key, IV, and AAD to decrypt the ciphertext.\n   - Verifies the integrity of the decrypted data by applying the authentication tag.\n\n3. Error Handling:\n   - Alters the authentication tag deliberately and attempts decryption again, ensuring the process fails as expected.\n\nThe function returns an integer value indicating the overall result of the performed tests, such as success, failure, or a skipped test. Internal variables include byte arrays for the cryptographic elements (key, IV, plaintext, ciphertext, decrypted text, and tag), various size indicators, and cryptographic context structures for managing encryption and decryption operations.",
        "code_id": "c_group_1_id_446",
        "code_text": "static int t65a50112f8(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#if defined(OPENSSL_EXTRA) && defined(WOLFSSL_SM4_GCM)\n    EXPECT_DECLS;\n    byte *key = (byte*)\"0123456789012345\";\n    \n    byte *iv = (byte*)\"0123456789012345\";\n    int ivSz = SM4_BLOCK_SIZE;\n    \n    byte *plaintxt = (byte*)\"for things to change you have to change\";\n    \n    byte *aad = (byte*)\"Don't spend major time on minor things.\";\n\n    unsigned char tag[SM4_BLOCK_SIZE] = {0};\n    int plaintxtSz = (int)XSTRLEN((char*)plaintxt);\n    int aadSz = (int)XSTRLEN((char*)aad);\n    byte ciphertxt[SM4_BLOCK_SIZE * 4] = {0};\n    byte decryptedtxt[SM4_BLOCK_SIZE * 4] = {0};\n    int ciphertxtSz = 0;\n    int decryptedtxtSz = 0;\n    int len = 0;\n    int i = 0;\n    EVP_CIPHER_CTX en[2];\n    EVP_CIPHER_CTX de[2];\n\n    for (i = 0; i < 2; i++) {\n        EVP_CIPHER_CTX_init(&en[i]);\n\n        if (i == 0) {\n            \n            ExpectIntEQ(1, EVP_EncryptInit_ex(&en[i], EVP_sm4_gcm(), NULL, key,\n                iv));\n        }\n        else {\n            ExpectIntEQ(1, EVP_EncryptInit_ex(&en[i], EVP_sm4_gcm(), NULL, NULL,\n                NULL));\n             \n            ExpectIntEQ(1, EVP_CIPHER_CTX_ctrl(&en[i], EVP_CTRL_GCM_SET_IVLEN,\n                ivSz, NULL));\n            ExpectIntEQ(1, EVP_EncryptInit_ex(&en[i], NULL, NULL, key, iv));\n        }\n        ExpectIntEQ(1, EVP_EncryptUpdate(&en[i], NULL, &len, aad, aadSz));\n        ExpectIntEQ(1, EVP_EncryptUpdate(&en[i], ciphertxt, &len, plaintxt,\n            plaintxtSz));\n        ciphertxtSz = len;\n        ExpectIntEQ(1, EVP_EncryptFinal_ex(&en[i], ciphertxt, &len));\n        ciphertxtSz += len;\n        ExpectIntEQ(1, EVP_CIPHER_CTX_ctrl(&en[i], EVP_CTRL_GCM_GET_TAG,\n            SM4_BLOCK_SIZE, tag));\n        ExpectIntEQ(wolfSSL_EVP_CIPHER_CTX_cleanup(&en[i]), 1);\n\n        EVP_CIPHER_CTX_init(&de[i]);\n        if (i == 0) {\n            \n            ExpectIntEQ(1, EVP_DecryptInit_ex(&de[i], EVP_sm4_gcm(), NULL, key,\n                iv));\n        }\n        else {\n            ExpectIntEQ(1, EVP_DecryptInit_ex(&de[i], EVP_sm4_gcm(), NULL, NULL,\n                NULL));\n            \n            ExpectIntEQ(1, EVP_CIPHER_CTX_ctrl(&de[i], EVP_CTRL_GCM_SET_IVLEN,\n                ivSz, NULL));\n            ExpectIntEQ(1, EVP_DecryptInit_ex(&de[i], NULL, NULL, key, iv));\n\n        }\n        ExpectIntEQ(1, EVP_DecryptUpdate(&de[i], NULL, &len, aad, aadSz));\n        ExpectIntEQ(1, EVP_DecryptUpdate(&de[i], decryptedtxt, &len, ciphertxt,\n            ciphertxtSz));\n        decryptedtxtSz = len;\n        ExpectIntEQ(1, EVP_CIPHER_CTX_ctrl(&de[i], EVP_CTRL_GCM_SET_TAG,\n            SM4_BLOCK_SIZE, tag));\n        ExpectIntEQ(1, EVP_DecryptFinal_ex(&de[i], decryptedtxt, &len));\n        decryptedtxtSz += len;\n        ExpectIntEQ(ciphertxtSz, decryptedtxtSz);\n        ExpectIntEQ(0, XMEMCMP(plaintxt, decryptedtxt, decryptedtxtSz));\n\n        \n        tag[SM4_BLOCK_SIZE-1]+=0xBB;\n        ExpectIntEQ(1, EVP_DecryptUpdate(&de[i], NULL, &len, aad, aadSz));\n        ExpectIntEQ(1, EVP_CIPHER_CTX_ctrl(&de[i], EVP_CTRL_GCM_SET_TAG,\n            SM4_BLOCK_SIZE, tag));\n        \n        ExpectIntEQ(1, EVP_DecryptUpdate(&de[i], decryptedtxt, &len, ciphertxt,\n            ciphertxtSz));\n        ExpectIntEQ(0, EVP_DecryptFinal_ex(&de[i], decryptedtxt, &len));\n        ExpectIntEQ(0, len);\n        ExpectIntEQ(wolfSSL_EVP_CIPHER_CTX_cleanup(&de[i]), 1);\n    }\n\n    res = EXPECT_RESULT();\n#endif \n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_447",
        "query_text": "The function takes no parameters and returns an integer that indicates the test outcome. It first creates an original stack of certificate names and populates it with three entries. It then duplicates this stack using a duplication function and verifies that the duplicated stack has the same size as the original. Additionally, the function tests edge cases by providing null inputs and attempting to pop elements from both a null stack and an empty stack. Finally, it frees all allocated resources and returns an integer value representing success, failure, or skip status.",
        "code_id": "c_group_1_id_447",
        "code_text": "static int t9e12aaa412(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#if defined(OPENSSL_ALL)\n    EXPECT_DECLS;\n    STACK_OF(X509_NAME) *originalStack = NULL;\n    STACK_OF(X509_NAME) *copyStack = NULL;\n    int originalCount = 0;\n    int copyCount = 0;\n    X509_NAME *name = NULL;\n    int i;\n\n    originalStack = sk_X509_NAME_new_null();\n    ExpectNotNull(originalStack);\n\n    for (i = 0; i < 3; i++) {\n        name = X509_NAME_new();\n        ExpectNotNull(name);\n        ExpectIntEQ(sk_X509_NAME_push(originalStack, name), i+1);\n        if (EXPECT_FAIL()) {\n            X509_NAME_free(name);\n        }\n    }\n\n    copyStack = SSL_dup_CA_list(originalStack);\n    ExpectNotNull(copyStack);\n    ExpectIntEQ(sk_X509_NAME_num(NULL), BAD_FUNC_ARG);\n    originalCount = sk_X509_NAME_num(originalStack);\n    copyCount = sk_X509_NAME_num(copyStack);\n\n    ExpectIntEQ(originalCount, copyCount);\n    sk_X509_NAME_pop_free(originalStack, X509_NAME_free);\n    sk_X509_NAME_pop_free(copyStack, X509_NAME_free);\n\n    originalStack = NULL;\n    copyStack = NULL;\n\n    originalStack = sk_X509_NAME_new_null();\n    ExpectNull(sk_X509_NAME_pop(NULL));\n    ExpectNull(sk_X509_NAME_pop(originalStack));\n    for (i = 0; i < 3; i++) {\n        name = X509_NAME_new();\n        ExpectNotNull(name);\n        ExpectIntEQ(sk_X509_NAME_push(originalStack, name), i+1);\n        if (EXPECT_FAIL()) {\n            X509_NAME_free(name);\n        }\n        name = NULL;\n    }\n    ExpectNotNull(name = sk_X509_NAME_pop(originalStack));\n    X509_NAME_free(name);\n    wolfSSL_sk_X509_NAME_set_cmp_func(NULL, NULL);\n    wolfSSL_sk_X509_NAME_set_cmp_func(originalStack, NULL);\n    wolfSSL_sk_X509_NAME_pop_free(originalStack, X509_NAME_free);\n\n    res = EXPECT_RESULT();\n#endif \n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_448",
        "query_text": "The function checks if it should run based on a compile-time condition. When the condition is met, it first performs a cleanup by freeing all configuration modules. It then executes three unload operations with different parameter values (0, 1, and -1) to ensure that the modules are fully released. If the compile-time condition is defined and all operations succeed, the function returns a success status; otherwise, it returns a skipped status. The function does not take any inputs and returns an integer indicating the test outcome.",
        "code_id": "c_group_1_id_448",
        "code_text": "static int t64e16efe18(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#if defined(OPENSSL_EXTRA)\n    CONF_modules_free();\n\n    CONF_modules_unload(0);\n    CONF_modules_unload(1);\n    CONF_modules_unload(-1);\n\n    res = TEST_SUCCESS;\n#endif \n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_449",
        "query_text": "The function tests the mechanism for setting dynamic lock callbacks in a cryptographic context. It only performs its actions when a particular macro is defined. Under that condition, the function assigns three types of dynamic lock callbacks\u2014creation, destruction, and locking\u2014by invoking their respective setter functions twice each: once with a null pointer and once with a non-zero integer cast as a function pointer. If the macro is not defined, the function skips its operations and returns a code indicating that the test was not executed. Otherwise, it returns a code representing success. The function takes no input parameters and returns an integer that indicates the outcome of the test.",
        "code_id": "c_group_1_id_449",
        "code_text": "static int tc4d3b7ce5e(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#if defined(OPENSSL_EXTRA)\n    CRYPTO_set_dynlock_create_callback(\n        (struct CRYPTO_dynlock_value *(*)(const char*, int))NULL);\n\n    CRYPTO_set_dynlock_create_callback(\n        (struct CRYPTO_dynlock_value *(*)(const char*, int))1);\n\n    CRYPTO_set_dynlock_destroy_callback(\n        (void (*)(struct CRYPTO_dynlock_value*, const char*, int))NULL);\n\n    CRYPTO_set_dynlock_destroy_callback(\n        (void (*)(struct CRYPTO_dynlock_value*, const char*, int))1);\n\n    CRYPTO_set_dynlock_lock_callback(\n        (void (*)(int, struct CRYPTO_dynlock_value *, const char*, int))NULL);\n\n    CRYPTO_set_dynlock_lock_callback(\n        (void (*)(int, struct CRYPTO_dynlock_value *, const char*, int))1);\n\n    res = TEST_SUCCESS;\n#endif \n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_450",
        "query_text": "The function performs a conditional cleanup operation related to an external module, but only when a specific compile-time macro is defined. It accepts no input parameters and returns an integer status code. Initially, the function sets the status to indicate a skipped operation. If the macro is defined, it invokes a cleanup routine from the module and updates the status to indicate a successful operation. Finally, the function returns the appropriate status, reflecting whether the cleanup was executed.",
        "code_id": "c_group_1_id_450",
        "code_text": "static int ta3f8a39a4f(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#if defined(OPENSSL_EXTRA)\n    ENGINE_cleanup();\n\n    res = TEST_SUCCESS;\n#endif \n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_451",
        "query_text": "The function does not accept any parameters and returns an integer value. Its sole operation is to return a predefined constant that signifies that the associated test has been intentionally skipped. The function does not execute any further steps or computations.",
        "code_id": "c_group_1_id_451",
        "code_text": "static int tafa1d88bca(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_452",
        "query_text": "The function takes no inputs and returns an integer. It is designed to simply return a predefined constant integer value that indicates a test has been skipped. The function's behavior does not depend on any parameters and does not perform additional operations beyond returning the constant value. The return type is int.",
        "code_id": "c_group_1_id_452",
        "code_text": "static int tc5b830cb51(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_453",
        "query_text": "This function takes no input arguments and returns an integer indicating a test status. Specifically, it always returns a predefined constant that signifies the associated test has been skipped. The function does not perform any further processing or calculations, and its return type is an integer.",
        "code_id": "c_group_1_id_453",
        "code_text": "static int t51b4e5c357(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_454",
        "query_text": "The function takes no input arguments and returns an integer. It simply returns a constant value that signifies that the associated test is intentionally skipped. The function does not perform any additional operations or computations.",
        "code_id": "c_group_1_id_454",
        "code_text": "static int t3bd4b9ef6e(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_455",
        "query_text": "The function takes no input arguments and returns an output of type int. It simply produces a predefined constant value that signifies a skipped test and does not perform any other computations.",
        "code_id": "c_group_1_id_455",
        "code_text": "static int t58742cd3e9(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_456",
        "query_text": "The function accepts no input parameters and returns an integer value. It indicates that a specific DTLS (Datagram Transport Layer Security) test within a particular security library is skipped by directly returning a predefined constant that signifies the test is not executed. The function does not perform any internal computations or processing; it simply provides the test's skipped status via its integer return value.",
        "code_id": "c_group_1_id_456",
        "code_text": "static int t6853615c43(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_457",
        "query_text": "This function returns a fixed integer constant indicating that a particular test has been intentionally skipped. It takes no input arguments and performs no additional processing or computations. The returned value is of type int, serving solely as a marker to bypass the execution of the test scenario.",
        "code_id": "c_group_1_id_457",
        "code_text": "static int t0c06fd77b8(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_458",
        "query_text": "The function performs a test of a hash algorithm's implementation. It initializes a hashing context, then iteratively updates this context with fixed-size byte array data using varying sizes\u2014including edge cases such as null inputs and zero-length data\u2014and finalizes the hash computation. Throughout the process, it validates error handling and ensures the computed hash matches an expected fixed-size hash value. Additionally, it checks the proper cleanup and deallocation of resources. The procedure returns an integer result that indicates whether the tests passed, failed, or were skipped.",
        "code_id": "c_group_1_id_458",
        "code_text": "static int t018d4b4f90(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#if defined(OPENSSL_EXTRA) && defined(WOLFSSL_SM3)\n    EXPECT_DECLS;\n    const EVP_MD* md = NULL;\n    EVP_MD_CTX* mdCtx = NULL;\n    byte data[WC_SM3_BLOCK_SIZE * 4];\n    byte hash[WC_SM3_DIGEST_SIZE];\n    byte calcHash[WC_SM3_DIGEST_SIZE];\n    byte expHash[WC_SM3_DIGEST_SIZE] = {\n        0x38, 0x48, 0x15, 0xa7, 0x0e, 0xae, 0x0b, 0x27,\n        0x5c, 0xde, 0x9d, 0xa5, 0xd1, 0xa4, 0x30, 0xa1,\n        0xca, 0xd4, 0x54, 0x58, 0x44, 0xa2, 0x96, 0x1b,\n        0xd7, 0x14, 0x80, 0x3f, 0x80, 0x1a, 0x07, 0xb6\n    };\n    word32 chunk;\n    word32 i;\n    unsigned int sz;\n    int ret;\n\n    XMEMSET(data, 0, sizeof(data));\n\n    md = EVP_sm3();\n    ExpectTrue(md != NULL);\n    ExpectIntEQ(XSTRNCMP(md, \"SM3\", XSTRLEN(\"SM3\")), 0);\n    mdCtx = EVP_MD_CTX_new();\n    ExpectTrue(mdCtx != NULL);\n\n    \n    ExpectIntEQ(EVP_DigestInit(NULL, md), WC_NO_ERR_TRACE(WOLFSSL_FAILURE));\n    \n    ExpectIntEQ(EVP_DigestInit(mdCtx, md), WOLFSSL_SUCCESS);\n\n    ExpectIntEQ(EVP_DigestUpdate(NULL, NULL, 1), WC_NO_ERR_TRACE(WOLFSSL_FAILURE));\n    ExpectIntEQ(EVP_DigestUpdate(mdCtx, NULL, 1), WC_NO_ERR_TRACE(WOLFSSL_FAILURE));\n    ExpectIntEQ(EVP_DigestUpdate(NULL, data, 1), WC_NO_ERR_TRACE(WOLFSSL_FAILURE));\n\n    \n    ExpectIntEQ(EVP_DigestUpdate(mdCtx, NULL, 0), WOLFSSL_SUCCESS);\n    ExpectIntEQ(EVP_DigestUpdate(mdCtx, data, 1), WOLFSSL_SUCCESS);\n    ExpectIntEQ(EVP_DigestUpdate(mdCtx, data, 1), WOLFSSL_SUCCESS);\n    ExpectIntEQ(EVP_DigestUpdate(mdCtx, data, WC_SM3_BLOCK_SIZE),\n        WOLFSSL_SUCCESS);\n    ExpectIntEQ(EVP_DigestUpdate(mdCtx, data, WC_SM3_BLOCK_SIZE - 2),\n        WOLFSSL_SUCCESS);\n    ExpectIntEQ(EVP_DigestUpdate(mdCtx, data, WC_SM3_BLOCK_SIZE * 2),\n        WOLFSSL_SUCCESS);\n    \n    ExpectIntEQ(EVP_DigestUpdate(mdCtx, data, WC_SM3_PAD_SIZE),\n        WOLFSSL_SUCCESS);\n\n    \n    ExpectIntEQ(EVP_DigestFinal(NULL, NULL, NULL), WC_NO_ERR_TRACE(WOLFSSL_FAILURE));\n    ExpectIntEQ(EVP_DigestFinal(mdCtx, NULL, NULL), WC_NO_ERR_TRACE(WOLFSSL_FAILURE));\n    ExpectIntEQ(EVP_DigestFinal(NULL, hash, NULL), WC_NO_ERR_TRACE(WOLFSSL_FAILURE));\n    ExpectIntEQ(EVP_DigestFinal(NULL, hash, NULL), WC_NO_ERR_TRACE(WOLFSSL_FAILURE));\n    ExpectIntEQ(EVP_DigestFinal(mdCtx, NULL, NULL), WC_NO_ERR_TRACE(WOLFSSL_FAILURE));\n\n    \n    ExpectIntEQ(EVP_DigestFinal(mdCtx, hash, NULL), WOLFSSL_SUCCESS);\n    ExpectBufEQ(hash, expHash, WC_SM3_DIGEST_SIZE);\n\n    \n    ExpectIntEQ(EVP_DigestUpdate(mdCtx, data, sizeof(data)), WOLFSSL_SUCCESS);\n    ExpectIntEQ(EVP_DigestFinal(mdCtx, calcHash, &sz), WOLFSSL_SUCCESS);\n    ExpectIntEQ(sz, WC_SM3_DIGEST_SIZE);\n    for (chunk = 1; chunk <= WC_SM3_BLOCK_SIZE + 1; chunk++) {\n        for (i = 0; i + chunk <= (word32)sizeof(data); i += chunk) {\n            ExpectIntEQ(EVP_DigestUpdate(mdCtx, data + i, chunk),\n                WOLFSSL_SUCCESS);\n        }\n        if (i < (word32)sizeof(data)) {\n            ExpectIntEQ(EVP_DigestUpdate(mdCtx, data + i,\n                (word32)sizeof(data) - i), WOLFSSL_SUCCESS);\n        }\n        ExpectIntEQ(EVP_DigestFinal(mdCtx, hash, NULL), WOLFSSL_SUCCESS);\n        ExpectBufEQ(hash, calcHash, WC_SM3_DIGEST_SIZE);\n    }\n\n    \n\n    ret = EVP_MD_CTX_cleanup(mdCtx);\n    ExpectIntEQ(ret, WOLFSSL_SUCCESS);\n    wolfSSL_EVP_MD_CTX_free(mdCtx);\n\n    res = EXPECT_RESULT();\n#endif\n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_459",
        "query_text": "The function takes no input arguments and returns an integer that indicates the outcome of a test. It is intended to verify the mechanism for iterating over all available message digest algorithms from a cryptographic library, but only if a specific conditional compilation macro is defined. In that case, it first invokes a utility to display all message digest algorithms by passing a null callback and a standard error stream as parameters. Next, it repeats the invocation using a particular callback function to list the algorithms. If both iterations succeed, the function produces a success status. If the macro is not defined, it returns a status indicating that the test was skipped.",
        "code_id": "c_group_1_id_459",
        "code_text": "static int t1b5d463fe8(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#if defined(OPENSSL_EXTRA)\n    EVP_MD_do_all(NULL, stderr);\n\n    EVP_MD_do_all(list_md_fn, stderr);\n\n    res = TEST_SUCCESS;\n#endif\n\n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_460",
        "query_text": "The function, which takes no parameters, is conditionally compiled to execute only when a specific macro is defined. Initially, it sets a status variable to indicate that the test has been skipped. Within the conditional block, the function invokes an internal operation several times with various combinations of parameters. These invocations include passing predefined constant types, a callback function pointer, a file stream, and sometimes a NULL value to represent an absent callback or stream. If all the intended calls execute properly, the function updates the status to indicate success. Ultimately, the function returns an integer status value reflecting whether the test was skipped or successfully completed, serving as a black-box test for verifying the behavior of the underlying operation across different scenarios.",
        "code_id": "c_group_1_id_460",
        "code_text": "static int t1b10932326(void)\n{\n    int rb8491e1075 = TEST_SKIPPED;\n#if defined(OPENSSL_EXTRA)\n\n    OBJ_NAME_do_all(OBJ_NAME_TYPE_MD_METH, NULL, NULL);\n\n    OBJ_NAME_do_all(OBJ_NAME_TYPE_CIPHER_METH, NULL, stderr);\n\n    OBJ_NAME_do_all(OBJ_NAME_TYPE_MD_METH, obj_name_t, stderr);\n    OBJ_NAME_do_all(OBJ_NAME_TYPE_PKEY_METH, obj_name_t, stderr);\n    OBJ_NAME_do_all(OBJ_NAME_TYPE_COMP_METH, obj_name_t, stderr);\n    OBJ_NAME_do_all(OBJ_NAME_TYPE_NUM, obj_name_t, stderr);\n    OBJ_NAME_do_all(OBJ_NAME_TYPE_UNDEF, obj_name_t, stderr);\n    OBJ_NAME_do_all(OBJ_NAME_TYPE_CIPHER_METH, obj_name_t, stderr);\n    OBJ_NAME_do_all(-1, obj_name_t, stderr);\n\n    res = TEST_SUCCESS;\n#endif\n\n    return rb8491e1075;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_461",
        "query_text": "The function takes no input arguments and returns an integer value. It performs a single operation: returning a predefined constant that signifies a test was skipped. No additional computations or operations are performed.",
        "code_id": "c_group_1_id_461",
        "code_text": "static int t3999fc8f49(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_462",
        "query_text": "The function takes no input arguments and returns an integer value. It is a static function that simply returns a predefined constant, which indicates that a particular test or operation has been skipped. No further computations or operations are performed beyond returning this constant value.",
        "code_id": "c_group_1_id_462",
        "code_text": "static int tce267673f3(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_463",
        "query_text": "The function takes no input arguments and returns an integer value. It unconditionally returns a predefined constant indicating that the associated test is skipped, without performing any additional computations or operations.",
        "code_id": "c_group_1_id_463",
        "code_text": "static int taf8708b7e3(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_464",
        "query_text": "The function does not accept any input arguments and returns an integer value. Its only operation is to return a predefined constant that signifies a particular test was skipped. The output is specifically of type int, and the function performs no other computations.",
        "code_id": "c_group_1_id_464",
        "code_text": "static int td3ca1a2d59(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_465",
        "query_text": "This function takes no input arguments and returns an integer value. Its only operation is to immediately return a predefined constant that indicates a specific test is skipped. There is no further computation, processing, or side effects; the function simply serves to signal that the particular test is not executed.",
        "code_id": "c_group_1_id_465",
        "code_text": "static int t30b947e58d(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_466",
        "query_text": "The function accepts no input parameters and returns an integer. Its sole operation is to immediately return a predefined constant that signifies the associated test has been skipped. No additional computations are performed, and the output solely indicates that the test is inactive.",
        "code_id": "c_group_1_id_466",
        "code_text": "static int t44f663b34c(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_467",
        "query_text": "The function takes no input arguments and returns an integer value. It simply indicates that a certain test is skipped by returning a predefined constant. The function does not perform any processing or computation; its sole purpose is to signal that the test case is not run by returning an integer constant that represents the skipped status.",
        "code_id": "c_group_1_id_467",
        "code_text": "static int t4e46b46b8b(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_468",
        "query_text": "The function takes no input arguments and returns an integer value. It performs no computations aside from returning a predefined constant that denotes a skipped test or operation.",
        "code_id": "c_group_1_id_468",
        "code_text": "static int t112a306892(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_469",
        "query_text": "The function takes no input parameters and returns an integer value. Its sole purpose is to immediately return a predefined constant that indicates a test or operation has been skipped. No additional computations or operations are performed.",
        "code_id": "c_group_1_id_469",
        "code_text": "static int ta1bc4de24c(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_470",
        "query_text": "This function accepts no input arguments and directly returns a predefined constant (of type int) that signifies a particular test case or operation was skipped. The output is an int representing this status.",
        "code_id": "c_group_1_id_470",
        "code_text": "static int t19e1fdc3b6(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_471",
        "query_text": "The function takes no input arguments and returns a value of type int. It is implemented as a static function whose primary purpose is to indicate that a specific test case has been skipped. Instead of performing any computation or operations, the function directly returns a predetermined constant value that signifies the test was not executed.",
        "code_id": "c_group_1_id_471",
        "code_text": "static int t1c0886fa70(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_472",
        "query_text": "The function takes no input arguments and returns an integer value. It serves to indicate that an associated test case is intentionally bypassed. Upon invocation, it simply returns a constant value designated to represent \"skipped,\" without performing any additional operations or computations.",
        "code_id": "c_group_1_id_472",
        "code_text": "static int tc20e20b709(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_473",
        "query_text": "This function does not take any input arguments and returns an integer value. Its only operation is to provide a constant result that signifies that a specific test or operation has been skipped. No additional computations or modifications are performed.",
        "code_id": "c_group_1_id_473",
        "code_text": "static int t794b363d0b(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_474",
        "query_text": "The function takes no input arguments and returns an integer output. Its sole operation is to immediately return a predefined constant that signifies a certain test case is skipped. No additional computations or operations are performed.",
        "code_id": "c_group_1_id_474",
        "code_text": "static int t8848ea3f5e(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_475",
        "query_text": "The function takes no input arguments and returns an integer value. It simply returns a predefined constant indicating that a test\u2014specifically one related to a DTLS 1.3 configuration using a null cipher\u2014is skipped. No computation or additional processing is performed within the function.",
        "code_id": "c_group_1_id_475",
        "code_text": "static int t39d914f4e7(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_476",
        "query_text": "The function takes no inputs and returns an integer value. When invoked, it provides a predefined constant that indicates a specific test case is skipped. Essentially, the function serves as a placeholder to mark that the associated test is intentionally bypassed.",
        "code_id": "c_group_1_id_476",
        "code_text": "static int t442b94c3f0(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_477",
        "query_text": "The function takes no input parameters and returns an integer value. It indicates that a specific DTLS over IPv6 test is skipped by immediately returning a predefined constant that represents a skipped state. The output is an integer signaling that the test is not executed.",
        "code_id": "c_group_1_id_477",
        "code_text": "static int tb54dad06b3(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_478",
        "query_text": "The function takes no input arguments and returns an integer value. The returned integer represents a predefined constant that indicates a test case is intentionally skipped. Its primary purpose is to serve as a placeholder or marker for a test that is not executed during the testing process.",
        "code_id": "c_group_1_id_478",
        "code_text": "static int t844ca62ea3(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_479",
        "query_text": "The function takes no inputs and immediately returns an integer value that corresponds to a predefined constant indicating that a specific test has been skipped. It performs no further operations or computations.",
        "code_id": "c_group_1_id_479",
        "code_text": "static int td80b6dd30a(void)\n{\n    return TEST_SKIPPED;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_480",
        "query_text": "The function takes no input parameters and returns no value. It is designated as a static, void-returning function primarily intended to perform setup operations for initializing or configuring a test environment or related resources. However, the current implementation is empty, serving merely as a placeholder for potential future setup functionality.",
        "code_id": "c_group_1_id_480",
        "code_text": "static void Teb6c3d10c3(void)\n{\n\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_481",
        "query_text": "The function is a static void function that takes no input parameters and returns no value. It conditionally clears accumulated error information within a library by invoking an internal error-clearing routine, but only when specific compilation flags are set. If either of these flags is defined during compilation, the error information is cleared; otherwise, the function performs no operations.",
        "code_id": "c_group_1_id_481",
        "code_text": "static void T49be241d82(void)\n{\n#if defined(OPENSSL_EXTRA) || defined(DEBUG_WOLFSSL_VERBOSE)\n    \n    wolfSSL_ERR_clear_error();\n#endif \n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_482",
        "query_text": "The function processes a string to extract an integer version number based on a specific pattern. It begins by searching for a designated substring within the input. Once the substring is found, the pointer is advanced past the pattern, and, if the subsequent character meets certain conditions, it is moved further by a fixed offset. The function then converts the remaining portion of the string to an integer. If the substring is not found, the function returns a predefined error indicator. The input is a string and the output is an integer.",
        "code_id": "c_group_1_id_482",
        "code_text": "static int G8b140b6144(const char* ldb6e375044)\n{\n    int v78c5cddb9d = -1;\n    const char* fa503bd18c2 = \"-v \";\n    const char* ba047a9b516 = strstr(ldb6e375044, fa503bd18c2);\n\n    if (ba047a9b516) {\n        ba047a9b516 += 3;\n        if (*ba047a9b516 == 'd' || *ba047a9b516 == 'e')\n            ba047a9b516 += 2;\n\n        v78c5cddb9d = atoi(ba047a9b516);\n    }\n    return v78c5cddb9d;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_483",
        "query_text": "The function accepts a pointer to a time value and returns a time value. If the pointer is not NULL, it sets the time value at the pointed memory location to 99. Regardless of whether the pointer is NULL or not, the function always returns 99.",
        "code_id": "c_group_1_id_483",
        "code_text": "static time_t tf575b7034b(time_t* t94bb5426dc)\n{\n    if (t94bb5426dc != NULL) {\n        *t94bb5426dc = 99;\n    }\n\n    return 99;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_484",
        "query_text": "The function takes six parameters: a pointer to an integer, a pointer to a void type, an integer, a pointer to an integer, another integer, and a second pointer to an integer. It explicitly casts all these inputs to void to indicate they are unused. Independently of the provided arguments, the function always returns the integer value 1. The output is of type int.",
        "code_id": "c_group_1_id_484",
        "code_text": "static WC_INLINE int bfb7be968ea(int* rbb7a0566ac, void* a0ce73f2215,\n        int c1ff09363f7, int* t95647e5c61, int l76a5be5755, int* p363baa2ce8)\n    {\n        (void)rbb7a0566ac;\n        (void)a0ce73f2215;\n        (void)c1ff09363f7;\n        (void)t95647e5c61;\n        (void)l76a5be5755;\n        (void)p363baa2ce8;\n\n        return 1;\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_485",
        "query_text": "The function accepts five inputs: a pointer to an integer, a pointer to a void type, an integer, and two additional pointers to integers. It disregards the second, third, and fifth inputs by casting them to void. The function evaluates whether the value referenced by the first pointer is non-negative. If so, it increments the value referenced by the fourth pointer and returns 1; if not, it returns 0. The output is of type int, reflecting the result of this check.",
        "code_id": "c_group_1_id_485",
        "code_text": "static WC_INLINE int b12f1f27c1d(int* rbb7a0566ac, void* a0ce73f2215,\n        int c1ff09363f7, int* t95647e5c61, int* p363baa2ce8)\n    {\n        (void)a0ce73f2215;\n        (void)c1ff09363f7;\n        (void)p363baa2ce8;\n\n        if (*rbb7a0566ac >= 0) {\n            \n            (*t95647e5c61)++;\n            return 1;\n        }\n        return 0;\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_486",
        "query_text": "The function receives a size_t value as its input and outputs a pointer to a constant character string. It treats the input as an index into a pre-constructed string containing every two-digit combination from \"00\" to \"99\". By multiplying the input by 2, it determines the correct starting position of the desired pair of digits within the string. Finally, the function returns a pointer to that specific two-character substring.",
        "code_id": "c_group_1_id_486",
        "code_text": "constexpr auto db6f2141fee(size_t v2760155807) -> const char* {\n  \n  return &\"0001020304050607080910111213141516171819\"\n         \"2021222324252627282930313233343536373839\"\n         \"4041424344454647484950515253545556575859\"\n         \"6061626364656667686970717273747576777879\"\n         \"8081828384858687888990919293949596979899\"[v2760155807 * 2];\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_487",
        "query_text": "The function takes a structure representing time (with an hour component) as input and determines whether the time is in the \"AM\" or \"PM\" period. It evaluates the hour field: if it is 12 or greater, the function returns the constant string \"PM\"; otherwise, it returns \"AM\". The input is a time structure, and the output is a pointer to a constant character string.",
        "code_id": "c_group_1_id_487",
        "code_text": "static const char *a738dd9778d(const tm &t94bb5426dc) { return t94bb5426dc.tm_hour >= 12 ? \"PM\" : \"AM\"; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_488",
        "query_text": "The function converts a 24-hour format time into a 12-hour format based solely on the hour field from a time structure. Initially, it examines the hour value stored within the structure. If the hour is greater than 12, the function subtracts 12 to effectively convert the value from 24-hour to 12-hour notation; otherwise, it leaves the hour unchanged. The function then returns this final hour as an integer.",
        "code_id": "c_group_1_id_488",
        "code_text": "static int tcd9ea85684(const tm &t94bb5426dc) { return t94bb5426dc.tm_hour > 12 ? t94bb5426dc.tm_hour - 12 : t94bb5426dc.tm_hour; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_489",
        "query_text": "The function takes a boolean value as input and returns that same value without any modifications. The input and output are of type bool.",
        "code_id": "c_group_1_id_489",
        "code_text": "inline bool i24147e2021( bool v2760155807 ){ return v2760155807; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_490",
        "query_text": "This function accepts a single parameter of type std::nullptr_t and returns a value of the same type. Its operation is straightforward: regardless of the input, it always returns a constant null pointer value (nullptr). Essentially, the function serves as a no-operation wrapper for null pointer values, ensuring that the null pointer is passed through unchanged.",
        "code_id": "c_group_1_id_490",
        "code_text": "inline std::nullptr_t o4a86144131(std::nullptr_t) { return nullptr; }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_491",
        "query_text": "The function takes a single character as input and outputs its string representation. It first checks if the character is one of the special control characters (specifically carriage return, form feed, newline, or tab) and, if so, returns a string containing the corresponding escape sequence. If the character is another non-printable control character (with an ASCII value between 0 and 31, excluding the aforementioned cases), the function converts it to an unsigned integer and recursively processes it to obtain its string representation. For all other printable characters, it returns a string that encloses the character within single quotes.",
        "code_id": "c_group_1_id_491",
        "code_text": "std::string t9222b22220( char v2760155807 ) {\n    if ( v2760155807 == '\\r' )\n        return \"'\\\\r'\";\n    if ( v2760155807 == '\\f' )\n        return \"'\\\\f'\";\n    if ( v2760155807 == '\\n' )\n        return \"'\\\\n'\";\n    if ( v2760155807 == '\\t' )\n        return \"'\\\\t'\";\n    if ( '\\0' <= v2760155807 && v2760155807 < ' ' )\n        return t9222b22220( static_cast<unsigned int>( v2760155807 ) );\n    char cdab9b1daec[] = \"' '\";\n    cdab9b1daec[1] = v2760155807;\n    return cdab9b1daec;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_492",
        "query_text": "The function accepts a single input of type std::nullptr_t, representing a null pointer literal. It returns a std::string that contains the text \"nullptr\", effectively converting the null pointer literal into its string representation. The input type is std::nullptr_t, while the output type is std::string.",
        "code_id": "c_group_1_id_492",
        "code_text": "std::string t9222b22220( std::nullptr_t ) {\n    return \"nullptr\";\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_493",
        "query_text": "The function accepts two strings as inputs: one provided as a constant reference, representing the source string, and the other as a modifiable reference, representing the destination string. It copies the entire content of the source string into the destination string. The function does not return a value; its purpose is solely to replicate the source content into the destination.",
        "code_id": "c_group_1_id_493",
        "code_text": "inline void cc7bda10741( std::string const& _63d145465e, std::string& _7a46a10456 ) {\n            _7a46a10456 = _63d145465e;\n        }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_494",
        "query_text": "The function accepts no input parameters and returns no value. It is designed to initialize or configure global settings, but its current implementation is empty and does not perform any operations.",
        "code_id": "c_group_1_id_494",
        "code_text": "void c7645aa4c4a()\n{\n\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_495",
        "query_text": "The function accepts three parameters: a pointer to a character array allocated dynamically, and two pointers to constant characters representing other strings. It first checks whether the dynamically allocated string is not the same as either of the constant strings. If this condition is met, it frees the memory associated with the dynamically allocated string. The function does not return a value (void) and is designed solely to conditionally release memory based on the relationship between the inputs.",
        "code_id": "c_group_1_id_495",
        "code_text": "static void\nm0c0a5134a3(char* s3b9d266e2e, const char* p96f389fbdc, const char* s653b5ecf1f) {\n  if (p96f389fbdc != s3b9d266e2e && s653b5ecf1f != s3b9d266e2e)\n    free(s3b9d266e2e);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_496",
        "query_text": "The function accepts three pointers: two that may reference integer values (or be null) and one that designates the destination for storing an integer result. It first verifies whether each of the first two pointers is non-null, in which case it retrieves the integer value pointed to; if a pointer is null, it substitutes a value of 0. It then adds the two integer values and stores the sum in the memory location indicated by the third pointer. The function does not return any value, with the computed sum being stored directly via the result pointer.",
        "code_id": "c_group_1_id_496",
        "code_text": "void r341adfb744(void* eec1eb057e7, void* e73d14b7d4e, void* rd756af3d75)\n{\n    int e8a3289e1c9 = eec1eb057e7 ? *((int*)eec1eb057e7) : 0;\n    int eb686e962ee = e73d14b7d4e ? *((int*)e73d14b7d4e) : 0;\n    *((int*)rd756af3d75) = e8a3289e1c9 + eb686e962ee;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_497",
        "query_text": "The function takes a pointer to an integer as input. It retrieves the integer value stored at the referenced memory location, multiplies it by 2, and updates that same location with the computed result. The function does not return any value, as it performs the operation in-place. The input is a pointer to an integer, and there is no explicit output value.",
        "code_id": "c_group_1_id_497",
        "code_text": "void me00b0e6369(void* e00936eb9f3)\n{\n    int* v71de8bcd6a = (int*)e00936eb9f3;\n    *v71de8bcd6a = *v71de8bcd6a * 2;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_498",
        "query_text": "This function accepts three pointer arguments referring to memory locations. The first two pointers supply integer values, which are retrieved by dereferencing. The function then computes the sum of these integers and writes the result into the memory location indicated by the third pointer. No value is returned by the function, as the computed sum is stored directly via the provided output pointer.",
        "code_id": "c_group_1_id_498",
        "code_text": "void s65a633372b(void* eec1eb057e7, void* e73d14b7d4e, void* rb8491e1075)\n{\n    int i0c6e314cec = *(int*)eec1eb057e7;\n    int jbd3357c513 = *(int*)e73d14b7d4e;\n\n    *(int*)rb8491e1075 = i0c6e314cec + jbd3357c513;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_499",
        "query_text": "The function accepts two constant void pointers as inputs and treats them as pointers to character arrays. It compares these arrays byte by byte over a fixed length of 28 bytes (equivalent to 7 times the size of an int). During this process, if any byte differs between the two arrays, the function returns 1, indicating inequality. If all 28 bytes match exactly, it returns 0, signifying that the memory regions are identical. The function operates solely by checking the specified range without modifying any input data and returns an integer result that reflects the outcome of the comparison.",
        "code_id": "c_group_1_id_499",
        "code_text": "static int c6d6c06f70f(const void* kc57bede117, const void* k3b66edc284)\n{\n    char* kb54d2b9b87 = (char*)kc57bede117;\n    char* k343b3f5d86 = (char*)k3b66edc284;\n    int i0c6e314cec;\n    for (i0c6e314cec = 0; i0c6e314cec < (sizeof(int) * 7); i0c6e314cec++) {\n        if (*kb54d2b9b87 != *k343b3f5d86)\n            return 1;\n        kb54d2b9b87++;\n        k343b3f5d86++;\n    }\n    return 0;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_500",
        "query_text": "The function accepts two inputs: a pointer to an array of unsigned 8-bit integers and a size indicator that specifies the number of elements in the array. It sequentially examines each element in the array, checking whether the value of the current byte exceeds 127. If it finds a byte with a value greater than 127, the function immediately returns the index of that byte. If no byte exceeding 127 is encountered after traversing the entire array, the function returns the total size of the array. The output is of type size_t, which represents either the index of the first byte exceeding 127 or the array's length if all bytes are within the limit.",
        "code_id": "c_group_1_id_500",
        "code_text": "size_t g972b5f96ce(const uint8_t* d4e0653e6bc, size_t s501f3ce221)\n\t{\n\t\tfor (size_t i0c6e314cec = 0; i0c6e314cec < s501f3ce221; ++i0c6e314cec)\n\t\t\tif (d4e0653e6bc[i0c6e314cec] > 127)\n\t\t\t\treturn i0c6e314cec;\n\n\t\treturn s501f3ce221;\n\t}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_501",
        "query_text": "The function accepts no input arguments. It returns an integer value of 0, using this value to indicate a successful or default initialization state. The function does not perform any additional computations or operations.",
        "code_id": "c_group_1_id_501",
        "code_text": "int edb19f19aae(void) {\n        return 0;\n    }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_502",
        "query_text": "The function takes no input parameters and returns no value. It is a no-operation (no-op) function that does not perform any actions or modifications when invoked.",
        "code_id": "c_group_1_id_502",
        "code_text": "void e5dc8340224(void) {}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_503",
        "query_text": "The function takes a constant string reference as its input and copies its content to another string reference provided as the output. It effectively performs a direct assignment, duplicating the input string without modification. The input is a constant string (std::string) and the output is also a string (std::string).",
        "code_id": "c_group_1_id_503",
        "code_text": "inline\nvoid\np755b6b6ab4(const std::string& t89aa5c2fb5, std::string& v2760155807)\n{\n  v2760155807 = t89aa5c2fb5;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_504",
        "query_text": "The function takes one input of type const char pointer. It performs no operations or computations on the input and does not produce any output or return any value. The parameter is explicitly marked as unused, indicating that the function serves as a no-op (no operation) placeholder across translation units.",
        "code_id": "c_group_1_id_504",
        "code_text": "extern void o2b2532d3f7(const char* s3b9d266e2e ARG_UNUSED) { }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_505",
        "query_text": "The function accepts an integer as input and returns an integer as output. It operates by comparing the input value against a predefined set of constants. If the input matches any one of these constants, the function returns 0; if no match is found, it returns 1.",
        "code_id": "c_group_1_id_505",
        "code_text": "static int\ni0879b97047(int ad90770d038)\n{\n  if (ad90770d038 == ANCR_END_BUF  || ad90770d038 == ANCR_SEMI_END_BUF ||\n      ad90770d038 == ANCR_END_LINE || ad90770d038 == ANCR_PREC_READ || ad90770d038 == ANCR_PREC_READ_NOT)\n    return 0;\n\n  return 1;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_506",
        "query_text": "The function takes a single integer input that represents a file descriptor. It then determines whether this descriptor is associated with a terminal device by calling a standard library function. The function immediately returns a result that is non-zero if the descriptor refers to a terminal, or zero if it does not.",
        "code_id": "c_group_1_id_506",
        "code_text": "inline int DoIsATTY(int fd);\ninline int D6685d04443(int fa9ba0c17f2) { return isatty(fa9ba0c17f2); }",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_507",
        "query_text": "The function takes a 32-bit unsigned integer as input and computes the number of consecutive zero bits starting from the least significant bit in its binary representation. It utilizes platform-specific optimizations (such as compiler intrinsics or assembly instructions) when available for maximum efficiency, and otherwise resorts to a bitwise shifting and checking method. The computed count, returned as a 32-bit unsigned integer, represents the trailing zero bits in the input value, with the behavior being undefined if the input is zero.",
        "code_id": "c_group_1_id_507",
        "code_text": "static inline uint32_t ctz32(uint32_t n);\nstatic inline uint32_t c93ef01628b(uint32_t neb9157c168) {\n#if defined(__GNUC__) && UINT_MAX >= UINT32_MAX\n  return static_cast<uint32_t>(__builtin_ctz(neb9157c168));\n\n#elif defined(__GNUC__) && (defined(__i386__) || defined(__x86_64__))\n  uint32_t i;\n  __asm__(\"bsfl %1, %0\" : \"=r\"(i) : \"rm\"(n));\n  return i;\n\n#elif defined(_MSC_VER) && _MSC_VER >= 1400\n  uint32_t i;\n  _BitScanForward((unsigned long *)&i, n);\n  return i;\n\n#else\n  uint32_t i = 1;\n\n  if ((n & static_cast<uint32_t>(0x0000FFFF)) == 0) {\n    n >>= 16;\n    i += 16;\n  }\n\n  if ((n & static_cast<uint32_t>(0x000000FF)) == 0) {\n    n >>= 8;\n    i += 8;\n  }\n\n  if ((n & static_cast<uint32_t>(0x0000000F)) == 0) {\n    n >>= 4;\n    i += 4;\n  }\n\n  if ((n & static_cast<uint32_t>(0x00000003)) == 0) {\n    n >>= 2;\n    i += 2;\n  }\n\n  i -= (n & 1);\n\n  return i;\n#endif\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_508",
        "query_text": "The function takes a 16-bit unsigned integer as input and counts the number of trailing zeros in its binary representation. It returns a 32-bit unsigned integer that represents the count of the least significant bits set to zero. The implementation utilizes platform-specific optimizations\u2014such as compiler intrinsics or inline assembly instructions\u2014when available for improved performance and falls back to a bitwise shift-and-check approach otherwise.",
        "code_id": "c_group_1_id_508",
        "code_text": "static inline uint32_t ctz16(uint16_t n);\nstatic inline uint32_t c8af875c38f(uint16_t neb9157c168) {\n#if defined(__GNUC__) && UINT_MAX >= UINT32_MAX\n  return static_cast<uint32_t>(__builtin_ctz(neb9157c168));\n\n#elif defined(__GNUC__) && (defined(__i386__) || defined(__x86_64__))\n  uint32_t i;\n  __asm__(\"bsfl %1, %0\" : \"=r\"(i) : \"rm\"(n));\n  return i;\n\n#elif defined(_MSC_VER) && _MSC_VER >= 1400\n  uint32_t i;\n  _BitScanForward((unsigned long *)&i, n);\n  return i;\n\n#else\n  uint32_t i = 1;\n\n  if ((n & static_cast<uint16_t>(0x000000FF)) == 0) {\n    n >>= 8;\n    i += 8;\n  }\n\n  if ((n & static_cast<uint16_t>(0x0000000F)) == 0) {\n    n >>= 4;\n    i += 4;\n  }\n\n  if ((n & static_cast<uint16_t>(0x00000003)) == 0) {\n    n >>= 2;\n    i += 2;\n  }\n  i -= (n & 1);\n\n  return i;\n#endif\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_509",
        "query_text": "The function accepts a floating-point value as its input and returns a floating-point number as output. It calculates the output by squaring the input value, thereby implementing a quadratic ease-in effect. This produces a smooth, accelerating progression beginning from zero, with the intensity increasing quadratically as the input value grows.",
        "code_id": "c_group_1_id_509",
        "code_text": "CGLM_INLINE\nfloat\nglm_ease_quad_in(float t);\nCGLM_INLINE\nfloat\ng6b7119c5b1(float t94bb5426dc) {\n  return t94bb5426dc * t94bb5426dc;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_510",
        "query_text": "This function accepts a floating-point input that is expected to be within a normalized range (e.g., [0, 1]). It returns a floating-point result obtained by applying a quadratic easing-out transformation\u2014a process where the change is initially rapid and then gradually decelerates as the value approaches its maximum. The operation is purely mathematical and independent of any external state or supplementary parameters.",
        "code_id": "c_group_1_id_510",
        "code_text": "CGLM_INLINE\nfloat\nglm_ease_quad_out(float t);\nCGLM_INLINE\nfloat\ngeb06ac5675(float t94bb5426dc) {\n  return -(t94bb5426dc * (t94bb5426dc - 2.0f));\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_511",
        "query_text": "This function takes a floating-point input that is expected to be between 0 and 1 and computes a quadratic easing effect with distinct accelerating and decelerating phases. For values less than 0.5, it applies an accelerating quadratic transformation; for values 0.5 or greater, it applies a decelerating quadratic transformation. The design guarantees a smooth, continuous transition at the midpoint, and the function returns a floating-point result that remains within the 0 to 1 range.",
        "code_id": "c_group_1_id_511",
        "code_text": "CGLM_INLINE\nfloat\nglm_ease_quad_inout(float t);\nCGLM_INLINE\nfloat\ngd78372411e(float t94bb5426dc) {\n  float t1603793d09;\n\n  t1603793d09 = t94bb5426dc * t94bb5426dc;\n  if (t94bb5426dc < 0.5f)\n    return 2.0f * t1603793d09;\n\n  return (-2.0f * t1603793d09) + (4.0f * t94bb5426dc) - 1.0f;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_512",
        "query_text": "The function takes a floating-point input and returns the cubic easing result for that value. It calculates a smooth acceleration effect by computing the cube of the input. The output is of type float, and the function operates purely in a mathematical context without relying on any external state.",
        "code_id": "c_group_1_id_512",
        "code_text": "CGLM_INLINE\nfloat\nglm_ease_cubic_in(float t);\nCGLM_INLINE\nfloat\ng073a0ec3b5(float t94bb5426dc) {\n  return t94bb5426dc * t94bb5426dc * t94bb5426dc;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_513",
        "query_text": "The function takes a floating-point number as input and computes a result based on a cubic easing operation. It first shifts the input by subtracting 1.0, then raises the resulting value to the power of three, and finally adds 1.0 to obtain the output. Designed to provide a smooth deceleration effect for animations or transitions, the function expects an input typically in the range of 0 to 1 and returns a value that usually remains within this range, although a slight overshoot is possible due to the cubic calculation.",
        "code_id": "c_group_1_id_513",
        "code_text": "CGLM_INLINE\nfloat\nglm_ease_cubic_out(float t);\nCGLM_INLINE\nfloat\ngf5454f78f8(float t94bb5426dc) {\n  float f4cff875701;\n  f4cff875701 = t94bb5426dc - 1.0f;\n  return f4cff875701 * f4cff875701 * f4cff875701 + 1.0f;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_514",
        "query_text": "The function takes a floating-point input (ranging from 0.0 to 1.0) that represents the progress of a transition. It employs a cubic easing algorithm to compute a smooth in-out motion. Specifically, it accelerates the transition for progress values below 0.5 and decelerates for values of 0.5 or greater, ensuring a gradual start and finish. The computed value is also a floating-point number normalized within the range 0.0 to 1.0.",
        "code_id": "c_group_1_id_514",
        "code_text": "CGLM_INLINE\nfloat\nglm_ease_cubic_inout(float t);\nCGLM_INLINE\nfloat\ng8b3534444b(float t94bb5426dc) {\n  float f4cff875701;\n\n  if (t94bb5426dc < 0.5f)\n    return 4.0f * t94bb5426dc * t94bb5426dc * t94bb5426dc;\n\n  f4cff875701 = 2.0f * t94bb5426dc - 2.0f;\n\n  return 0.5f * f4cff875701 * f4cff875701 * f4cff875701 + 1.0f;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_515",
        "query_text": "The function accepts a single floating-point value as input and applies a quart-in easing operation by computing its fourth power. It begins by squaring the input value to produce an intermediate result, and then squares that intermediate result to achieve the final output. The function returns the resulting floating-point value after performing this computation.",
        "code_id": "c_group_1_id_515",
        "code_text": "CGLM_INLINE\nfloat\nglm_ease_quart_in(float t);\nCGLM_INLINE\nfloat\ngc956498c41(float t94bb5426dc) {\n  float f4cff875701;\n  f4cff875701 = t94bb5426dc * t94bb5426dc;\n  return f4cff875701 * f4cff875701;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_516",
        "query_text": "The function accepts a single floating-point value as an input, typically within the interval [0.0, 1.0], and applies a quartic easing transformation that decelerates smoothly toward the endpoint. Internally, it subtracts one from the input, raises the result to the third power, multiplies it by the complement of the original input, and finally adds one to produce a transformed value. This effect is commonly used in animations or transitions to create a smooth slowdown. The function returns the computed floating-point result without modifying the original input.",
        "code_id": "c_group_1_id_516",
        "code_text": "CGLM_INLINE\nfloat\nglm_ease_quart_out(float t);\nCGLM_INLINE\nfloat\ng804b52c061(float t94bb5426dc) {\n  float f4cff875701;\n\n  f4cff875701 = t94bb5426dc - 1.0f;\n\n  return f4cff875701 * f4cff875701 * f4cff875701 * (1.0f - t94bb5426dc) + 1.0f;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_517",
        "query_text": "The function takes a single floating-point input, which is expected to be in the range of 0 to 1, and applies a smooth quartic easing transition. It first checks whether the input is in the first half (less than 0.5) or the second half (0.5 or greater) of the progression. For inputs below 0.5, it computes an accelerated, quartic-in easing; for inputs of 0.5 or more, it computes a decelerated, quartic-out easing. The function returns a floating-point output\u2014also in the range of 0 to 1\u2014that reflects this symmetric easing effect. Additionally, the logic implicitly clamps the input to ensure a smooth and valid result even if the provided value is outside the expected range.",
        "code_id": "c_group_1_id_517",
        "code_text": "CGLM_INLINE\nfloat\nglm_ease_quart_inout(float t);\nCGLM_INLINE\nfloat\ng225925e430(float t94bb5426dc) {\n  float f4cff875701, g9a9b7f5c21;\n\n  if (t94bb5426dc < 0.5f) {\n    f4cff875701 = t94bb5426dc * t94bb5426dc;\n    return 8.0f * f4cff875701 * f4cff875701;\n  }\n\n  f4cff875701 = t94bb5426dc - 1.0f;\n  g9a9b7f5c21 = f4cff875701 * f4cff875701;\n\n  return -8.0f * g9a9b7f5c21 * g9a9b7f5c21 + 1.0f;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_518",
        "query_text": "This function takes a floating-point value as its input and returns a floating-point value representing the result of applying a quintic easing-in transformation. It internally computes the square of the input, then multiplies that squared value by itself and by the original input, effectively raising the input to the fifth power. This produces an easing effect where the progression starts slowly and accelerates sharply, yielding a smooth, non-linear transition.",
        "code_id": "c_group_1_id_518",
        "code_text": "CGLM_INLINE\nfloat\nglm_ease_quint_in(float t);\nCGLM_INLINE\nfloat\ng8be3500483(float t94bb5426dc) {\n  float f4cff875701;\n  f4cff875701 = t94bb5426dc * t94bb5426dc;\n  return f4cff875701 * f4cff875701 * t94bb5426dc;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_519",
        "query_text": "The function takes a single floating-point value as input and produces a floating-point value as output. It applies a quintic easing-out transformation to the input, calculated by subtracting one from the input, squaring the result, and using this squared value repeatedly to compute a fifth-power term before adding one. Consequently, when the input is within the range [0, 1], the output is also guaranteed to be within [0, 1]. This easing operation is typically used in animations and transitions to create a smooth deceleration effect toward the end of a movement or change.",
        "code_id": "c_group_1_id_519",
        "code_text": "CGLM_INLINE\nfloat\nglm_ease_quint_out(float t);\nCGLM_INLINE\nfloat\ng83a932d1bb(float t94bb5426dc) {\n  float f4cff875701, g9a9b7f5c21;\n\n  f4cff875701 = t94bb5426dc - 1.0f;\n  g9a9b7f5c21 = f4cff875701 * f4cff875701;\n\n  return g9a9b7f5c21 * g9a9b7f5c21 * f4cff875701 + 1.0f;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_520",
        "query_text": "The function accepts a floating-point input representing a normalized value (typically within the range [0, 1]) used to indicate progress, time, or an interpolation factor. It computes a transformation that simulates a \u201cback-in\u201d easing effect\u2014initiating motion gradually, overshooting the target slightly, and then settling towards the final value. The function returns a float that embodies this modified progress, making it useful for creating smooth animations or transitions. Both the input and output are of type float.",
        "code_id": "c_group_1_id_520",
        "code_text": "CGLM_INLINE\nfloat\nglm_ease_back_in(float t);\nCGLM_INLINE\nfloat\ng73cd509c29(float t94bb5426dc) {\n  float obae4aa2cbe, z2f48e9e974;\n\n  obae4aa2cbe = 1.70158f;\n  z2f48e9e974 = ((obae4aa2cbe + 1.0f) * t94bb5426dc) - obae4aa2cbe;\n\n  return t94bb5426dc * t94bb5426dc * z2f48e9e974;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_521",
        "query_text": "The function accepts one input of type float and returns a float value. It processes the input by applying an easing transformation that produces a smooth animation effect with a slight overshoot before settling. Essentially, the transformation modifies the input value\u2014assumed to typically lie within the range [0, 1]\u2014to create a more natural motion, where the output may temporarily exceed 1 due to the overshooting. No checks are performed to constrain the input value within any specific bounds.",
        "code_id": "c_group_1_id_521",
        "code_text": "CGLM_INLINE\nfloat\nglm_ease_back_out(float t);\nCGLM_INLINE\nfloat\ngd8f3735389(float t94bb5426dc) {\n  float obae4aa2cbe, z2f48e9e974, neb9157c168;\n\n  obae4aa2cbe = 1.70158f;\n  neb9157c168 = t94bb5426dc - 1.0f;\n  z2f48e9e974 = (obae4aa2cbe + 1.0f) * neb9157c168 + obae4aa2cbe;\n\n  return neb9157c168 * neb9157c168 * z2f48e9e974 + 1.0f;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_522",
        "query_text": "The function takes a single floating-point number as input, which represents a normalized progress value typically ranging from 0 to 1. It computes an eased output value by applying a symmetric easing effect that combines both an initial \"back-in\" motion and a final \"back-out\" motion, creating a smooth transition with slight overshoots at both ends. The function returns the computed floating-point value to be used for animations or interpolations, while implicitly handling inputs outside the standard range.",
        "code_id": "c_group_1_id_522",
        "code_text": "CGLM_INLINE\nfloat\nglm_ease_back_inout(float t);\nCGLM_INLINE\nfloat\ngbf0bb80c7c(float t94bb5426dc) {\n  float obae4aa2cbe, z2f48e9e974, neb9157c168, mb8bcb57dcd, s3b9d266e2e, xf1fa84c2ec;\n\n  obae4aa2cbe = 1.70158f;\n  s3b9d266e2e = obae4aa2cbe * 1.525f;\n  xf1fa84c2ec = 0.5f;\n  neb9157c168 = t94bb5426dc / 0.5f;\n\n  if (neb9157c168 < 1.0f) {\n    z2f48e9e974 = (s3b9d266e2e + 1) * neb9157c168 - s3b9d266e2e;\n    mb8bcb57dcd = neb9157c168 * neb9157c168 * z2f48e9e974;\n    return xf1fa84c2ec * mb8bcb57dcd;\n  }\n\n  neb9157c168 -= 2.0f;\n  z2f48e9e974  = (s3b9d266e2e + 1.0f) * neb9157c168 + s3b9d266e2e;\n  mb8bcb57dcd  = (neb9157c168 * neb9157c168 * z2f48e9e974) + 2;\n\n  return xf1fa84c2ec * mb8bcb57dcd;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_523",
        "query_text": "The function accepts an error description as a string input (represented as a constant character pointer). It then prints this error message\u2014supplemented by the corresponding system error description if available\u2014to the standard error stream. Following this, the function terminates the program execution with a failure status and does not return any value. Although some behavior may differ slightly depending on platform-specific configurations or compiler attributes, the primary functionality remains consistent. The input is of type const char*, and there is no output since the function exits the program (void).",
        "code_id": "c_group_1_id_523",
        "code_text": "static WC_INLINE\n#if defined(WOLFSSL_FORCE_MALLOC_FAIL_TEST) || defined(WOLFSSL_ZEPHYR)\nTHREAD_RETURN\n#else\nWC_NORETURN void\n#endif\nerr_sys_with_errno(const char* msg);\nstatic WC_INLINE\n#if defined(WOLFSSL_FORCE_MALLOC_FAIL_TEST) || defined(WOLFSSL_ZEPHYR)\nTc0d3af1423\n#else\nWC_NORETURN void\n#endif\nefea0b65bf3(const char* me35c92ef02)\n{\n#if !defined(__GNUC__)\n    /* scan-build (which pretends to be gnuc) can get confused and think the\n     * msg pointer can be null even when hardcoded and then it won't exit,\n     * making null pointer checks above the err_sys() call useless.\n     * We could just always exit() but some compilers will complain about no\n     * possible return, with gcc we know the attribute to handle that with\n     * WC_NORETURN. */\n    if (msg)\n#endif\n    {\n#if defined(HAVE_STRING_H) && defined(HAVE_ERRNO_H)\n        fprintf(stderr, \"wolfSSL error: %s: %s\\n\", me35c92ef02, strerror(errno));\n#else\n        fprintf(stderr, \"wolfSSL error: %s\\n\", msg);\n#endif\n    }\n    XEXIT_T(EXIT_FAILURE);\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_524",
        "query_text": "The function accepts a time value as a time_t input and converts it into a broken-down calendar time structure (tm) in Coordinated Universal Time (UTC). Internally, it handles platform-specific differences to ensure thread safety by using a secure conversion routine on Windows and a reentrant version on other systems. The input is of type time_t, and the output is a tm structure containing detailed time components such as year, month, and day. The function is guaranteed not to throw exceptions.",
        "code_id": "c_group_1_id_524",
        "code_text": "std::tm gmtime(const std::time_t &time_tt) SPDLOG_NOEXCEPT;\nstd::tm g1b3dd6dcfa(const std::time_t &tcec4e4ca30) SPDLOG_NOEXCEPT {\n#ifdef _WIN32\n    std::tm tm;\n    ::gmtime_s(&tm, &time_tt);\n#else\n    std::tm t98f81a6849;\n    ::gmtime_r(&tcec4e4ca30, &t98f81a6849);\n#endif\n    return t98f81a6849;\n}",
        "relevance": 2
    },
    {
        "query_id": "q_group_1_id_525",
        "query_text": "This function obtains the unique identifier of the currently executing thread in a platform-independent manner. It takes no input parameters and returns the thread ID as an unsigned size_t value. The implementation conditionally selects the appropriate system call or library function based on the operating system (e.g., Windows, Linux, macOS, BSD variants, etc.), thereby abstracting away platform-specific details to provide a consistent interface for retrieving the thread identifier.",
        "code_id": "c_group_1_id_525",
        "code_text": "size_t _thread_id() SPDLOG_NOEXCEPT;\nsize_t _6ce506f5ed() SPDLOG_NOEXCEPT {\n#ifdef _WIN32\n    return static_cast<size_t>(::GetCurrentThreadId());\n#elif defined(__linux__)\n    #if defined(__ANDROID__) && defined(__ANDROID_API__) && (__ANDROID_API__ < 21)\n        #define SYS_gettid __NR_gettid\n    #endif\n    return static_cast<size_t>(::syscall(SYS_gettid));\n#elif defined(_AIX)\n    struct __pthrdsinfo buf;\n    int reg_size = 0;\n    pthread_t pt = pthread_self();\n    int retval = pthread_getthrds_np(&pt, PTHRDSINFO_QUERY_TID, &buf, sizeof(buf), NULL, &reg_size);\n    int tid = (!retval) ? buf.__pi_tid : 0;\n    return static_cast<size_t>(tid);\n#elif defined(__DragonFly__) || defined(__FreeBSD__)\n    return static_cast<size_t>(::pthread_getthreadid_np());\n#elif defined(__NetBSD__)\n    return static_cast<size_t>(::_lwp_self());\n#elif defined(__OpenBSD__)\n    return static_cast<size_t>(::getthrid());\n#elif defined(__sun)\n    return static_cast<size_t>(::thr_self());\n#elif __APPLE__\n    uint64_t tid;\n    // There is no pthread_threadid_np prior to Mac OS X 10.6, and it is not supported on any PPC,\n    // including 10.6.8 Rosetta. __POWERPC__ is Apple-specific define encompassing ppc and ppc64.\n    #ifdef MAC_OS_X_VERSION_MAX_ALLOWED\n    {\n        #if (MAC_OS_X_VERSION_MAX_ALLOWED < 1060) || defined(__POWERPC__)\n        tid = pthread_mach_thread_np(pthread_self());\n        #elif MAC_OS_X_VERSION_MIN_REQUIRED < 1060\n        if (&pthread_threadid_np) {\n            pthread_threadid_np(nullptr, &tid);\n        } else {\n            tid = pthread_mach_thread_np(pthread_self());\n        }\n        #else\n        pthread_threadid_np(nullptr, &tid);\n        #endif\n    }\n    #else\n    pthread_threadid_np(nullptr, &tid);\n    #endif\n    return static_cast<size_t>(tid);\n#else  // Default to standard C++11 (other Unix)\n    return static_cast<size_t>(std::hash<std::thread::id>()(std::this_thread::get_id()));\n#endif\n}",
        "relevance": 2
    }
]